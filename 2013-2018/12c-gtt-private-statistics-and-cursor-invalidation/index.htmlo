This was first published on <a href=https://blog.dbi-services.com/12c-gtt-private-statistics-and-cursor-invalidation>https://blog.dbi-services.com/12c-gtt-private-statistics-and-cursor-invalidation</a> (2016-10-27)
								<h1 class="entry-title">12c GTT private statistics and cursor invalidation</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Short summary of this post is that rolling invalidation do not occur when you gather statistics on Global Temporary Tables in 12c that have session statistic scope (which is the default) and this may cause too many hard parses. I&#8217;m sharing all details and comments are welcome.
<span id="more-12383"></span></p>
<h3><em>Update28-OCT-16</em></h3>
<p><em>I&#8217;ve written this having in mind a specific case I encountered. But what I said here is too wide: not all cursors are invalidated, but only those that have been created on same session private statistics. Thanks to Andrew Sayer (see comments) and to Mark from Oracle Support for their tests with cursors created by other sessions.</em></p>
<p>When you gather statistics on a table, the goal is to get new plan if statistics have changed, so you can expect cursor invalidation. However, invalidating immediately all cursors that have a dependency with the table may cause a hard parse storm and this is why by default rolling invalidation occurs: invalidation of cursor will be planned randomly in a time window that follows next execution. 12c comes with a new feature, global temporary table private stats where execution plans are not shared between sessions. And there&#8217;s another feature where statistics gathering is automatic when you bulk insert into an empty table. </p>
<p>In both cases, by default, invalidation is not rolling but immediate. Let&#8217;s see examples.</p>
<h3>No GTT -&gt; rolling invalidation</h3>
<p>Here is an example with a regular table to show rolling invalidation:
<pre>
21:14:36 SQL&gt; create
21:14:36   2  table DEMOGTT1 as select * from dual;
Table created.

21:14:38 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1');
PL/SQL procedure successfully completed.

21:14:39 SQL&gt; insert into DEMOGTT1 select * from dual;
1 row created.

21:14:39 SQL&gt; alter session set optimizer_mode=first_rows;
Session altered.

21:14:39 SQL&gt; insert into DEMOGTT1 select * from dual;
1 row created.

21:14:39 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000008368BB98 3223759815           1          1 N                              0
VALID                          1 000000008368BB98 3223759815           1          1 N                              0

21:14:40 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1',no_invalidate=&gt;null);
PL/SQL procedure successfully completed.

21:14:41 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000008368BB98 3223759815           1          1 Y                              0
VALID                          1 000000008368BB98 3223759815           1          1 Y                              0

21:14:41 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED  21:14:40
</pre>
Statistics on non-GTT are shared and the dbms_stats using default no_invalidate do rolling invalidation.</p>
<h3>GTT with session private stats -&gt; immediate invalidation</h3>
<p>Here is the same example with a Global Temporary Table:
<pre>
21:13:06 SQL&gt; create
21:13:06   2  global temporary
21:13:06   3  table DEMOGTT1 as select * from dual;
Table created.
...
21:13:09 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000008096DF10 3223759815           1          1 N                              0
VALID                          1 000000008096DF10 3223759815           1          1 N                              0

21:13:10 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1',no_invalidate=&gt;null);
PL/SQL procedure successfully completed.

21:13:11 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
INVALID_UNAUTH                 0 000000008096DF10 3223759815           1          1 N                              1
INVALID_UNAUTH                 1 000000008096DF10 3223759815           1          1 N                              1

21:13:11 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED
DEMOGTT1                       SESSION 21:13:10
</pre>
By default, gathered statistics are private to the session and you see that all cursors have been invalidated immediately. Next execution will need to hard parse.</p>
<h3>GTT with shared stats -&gt; no invalidation</h3>
<p>When setting shared statistics on the GTT we come back to the 11g behavior:
<pre>
21:28:52 SQL&gt; create
21:28:52   2  global temporary
21:28:52   3  table DEMOGTT1 as select * from dual;
Table created.

21:28:52 SQL&gt; exec dbms_stats.set_table_prefs(user,'DEMOGTT1','GLOBAL_TEMP_TABLE_STATS','SHARED');
PL/SQL procedure successfully completed.
...
21:28:55 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 0000000079782A08 3223759815           1          1 N                              0
VALID                          1 0000000079782A08 3223759815           1          1 N                              0

21:28:56 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1',no_invalidate=&gt;null);
PL/SQL procedure successfully completed.

21:28:57 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 0000000079782A08 3223759815           1          1 Y                              0
VALID                          1 0000000079782A08 3223759815           1          1 Y                              0

21:28:57 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED  21:28:56
</pre>
No invalidation: this is rolling invalidation</p>
<h3>GTT with session stats but &#8220;_optimizer_use_gtt_session_stats&#8221;=false</h3>
<p>Here is an exemple when disabling the private statistics feature:
<pre>
21:15:36 SQL&gt; create
21:15:36   2  global temporary
21:15:36   3  table DEMOGTT1 as select * from dual;
Table created.

21:15:36 SQL&gt; alter session set "_optimizer_use_gtt_session_stats"=false;
Session altered.
...
21:15:38 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000007A373A08 3223759815           1          1 N                              0
VALID                          1 000000007A373A08 3223759815           1          1 N                              0

21:15:39 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1',no_invalidate=&gt;null);
PL/SQL procedure successfully completed.

21:15:41 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000007A373A08 3223759815           1          1 N                              0
VALID                          1 000000007A373A08 3223759815           1          1 N                              0

21:15:41 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED
DEMOGTT1                       SESSION 21:15:40
</pre>
No invalidation here as in previous versions. But interesting thing is that I still have session statistics. The setting just disables its usage. But then, there were no invalidation and no rolling invalidation. Not sure how to interpret that&#8230;</p>
<h3>Invalidation with online statistics gathering</h3>
<p>In all those examples I&#8217;ve used dbms_stats with default no_invalidate. But in 12c statistics gathering can occur automatically during bulk insert. Let&#8217;s try that:
<pre>
...
21:38:50 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 000000007A9D8860 3223759815           1          1 N                              0
VALID                          1 000000007A9D8860 3223759815           1          1 N                              0

21:38:51 SQL&gt; truncate table DEMOGTT1;
Table truncated.
21:38:52 SQL&gt; insert /*+ append */ into  DEMOGTT1 select * from dual;
1 row created.

21:38:53 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
INVALID_UNAUTH                 0 000000007A9D8860 3223759815           1          1 N                              1
INVALID_UNAUTH                 1 000000007A9D8860 3223759815           1          1 N                              1
21:38:53 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED
DEMOGTT1                       SESSION 21:38:52
</pre>
Same behaviour here. The online statistics gathering has gathered private statistics and invalidated all cursors.</p>
<h3>NO_INVALIDATE=true</h3>
<p>We can explicitly disable invalidation with no_invalidate=&gt;true:
<pre>
...
21:43:25 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 0000000075873D60 3223759815           1          1 N                              0
VALID                          1 0000000075873D60 3223759815           1          1 N                              0

21:43:28 SQL&gt; exec dbms_stats.gather_table_stats('DEMO','DEMOGTT1',no_invalidate=&gt;true);
PL/SQL procedure successfully completed.

21:43:29 SQL&gt; select object_status,child_number,address,hash_value,parse_calls,executions,is_rolling_invalid,invalidations from v$sql where sql_id='1pmuu9z02day7';

OBJECT_STATUS       CHILD_NUMBER ADDRESS          HASH_VALUE PARSE_CALLS EXECUTIONS IS_ROLLING_INVALID INVALIDATIONS
------------------- ------------ ---------------- ---------- ----------- ---------- ------------------ -------------
VALID                          0 0000000075873D60 3223759815           1          1 N                              0
VALID                          1 0000000075873D60 3223759815           1          1 N                              0

21:43:29 SQL&gt; select table_name,scope,last_analyzed from user_tab_statistics where table_name='DEMOGTT1';

TABLE_NAME                     SCOPE   LAST_ANA
------------------------------ ------- --------
DEMOGTT1                       SHARED
DEMOGTT1                       SESSION 21:43:28
</pre>
Here, as requested, private statistics has been gathered but without cursor invalidation. However I&#8217;ll have new hard parse for my query because private statistics prevent sharing another cursor, but it&#8217;s not an invalidation of all cursors. The other sessions will continue to re-use their plan.</p>
<h3>So what?</h3>
<p>With those new features, we have the famous parsing dilemma again: do we want to avoid too many hard parses and share cursor with the risk of executing an execution plan that has been optimized for different data? Or do we prefer to optimize each query at the risk of more CPU consumption and shared pool contention? Given that 12c comes with adaptive dynamic sampling that can make hard parse longer, and sometimes very very long, all those new features may be gauged carefully. </p>
<p>If you want to avoid hard parses, you should set preferences to SHARED statistics and then gather statistics when the GTT is filled with the data you want to optimize for, and then lock it. If you don&#8217;t, then you are back to the problem that private statistics tries to solve: sharing a plan optimized for few rows and executed on thousands.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-123840"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 7 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-5039">
				<div id="div-comment-5039" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/52b07c8f5c28281d34f986a3f33f051c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Andrew Sayer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5039">
			October 27, 2016 at 22 h 50 min</a>		</div>

		<p>Thanks for the write up.
I don&#8217;t see the problem, if you gather statistics that represent the data that only your session can see then you shouldn&#8217;t have to wait for the rolling invalidation before your execution plans could take advantage (by then the GTT could be used with different data or your session could have logged out). </p>
<p>The only problem I can consider, and I&#8217;d appreciate a follow up, is if gathering private statistics in session A invalidates cursors in session B?</p>
<p>If the GTT is always used in the same way then shared statistics are perfect. FWIW, I wouldn&#8217;t gather the statistics in the application code though, just once outside the application when some sample data is in the GTT should be more than sufficient.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50401"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5039' onclick='return addComment.moveForm( "div-comment-5039", "5039", "respond", "12383" )' aria-label='Reply to Andrew to Andrew Sayer'>Reply to Andrew</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1 parent" id="comment-5040">
				<div id="div-comment-5040" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5040">
			October 27, 2016 at 22 h 57 min</a>		</div>

		<p>Hi Andrew,
&gt;&gt; The only problem I can consider, and I’d appreciate a follow up, is if gathering private statistics in session A invalidates cursors in session B?
Yes, this is what invalidation does. That&#8217;s the problem. Non sharing cursor across sessions (and creating new child) is one thing. Invalidating cursors that are already there is another thing.
Your point about not gathering in the application is good (so you don&#8217;t need this 12c feature) but then you must avoid truncate + insert /*+ append */ or disable online statistics gathering.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50411"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5040' onclick='return addComment.moveForm( "div-comment-5040", "5040", "respond", "12383" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		<ul class="children">
		<li class="comment even depth-2 parent" id="comment-5043">
				<div id="div-comment-5043" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/52b07c8f5c28281d34f986a3f33f051c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Andrew Sayer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5043">
			October 28, 2016 at 1 h 19 min</a>		</div>

		<p>Thanks for the response Franck,
&gt;&gt;Yes, this is what invalidation does. That’s the problem. Non sharing cursor across sessions (and creating new child) is one thing. Invalidating cursors that are already there is another thing.</p>
<p>I&#8217;ve just reinstalled my 12c instance to double check this. From my test cases, gathering private statistics in one session does not invalidate a child cursor being used by another session, all sessions use their own child cursor and only invalidate their own session&#8217;s child cursor when gathering statistics.
(Not sure how to format this nicely)</p>
<p>Setup:
<pre>
truncate table DEMOGTT1;
drop table DEMOGTT1;
alter system flush shared_pool;
create global temporary table DEMOGTT1
on commit preserve rows
as
select * from all_objects where 1=0;
exec dbms_stats.set_table_prefs(user,'DEMOGTT1','GLOBAL_TEMP_TABLE_STATS','SESSION');

SQL&gt; get sql_find
  1* select sql_id, executions, substr(sql_text,1,100) sql_text from v$sql where sql_text not like '%v$sql%' and upper(sql_text) like UPPER('%&amp;1%')
SQL&gt; get sql_info
  1* select sql_id, child_number, executions, invalidations from v$sql where sql_id = '&amp;1';
SQL&gt; get test_case
  1  select sys_context('userenv','sid') from dual;
  2  set serverout off
  3  var x varchar2(30);
  4  exec select object_name into :X from (select * from all_objects order by dbms_random.value) where rownum =1;
  5  insert into DEMOGTT1 select * from all_objects where rownum &lt;=&amp;1;
  6  exec dbms_stats.gather_table_stats(user,&#039;DEMOGTT1&#039;)
  7  select count(*) from demogtt1 where object_name = :x;
  8  select count(*) from demogtt1 where object_name = :x;
  9* select count(*) from demogtt1 where object_name = :x;

host start sqlplus andy/andy@pdborcl @test_case 2000

SQL&gt; @sql_find "select count(*) from demogtt1 where object_name = :x"

SQL_ID        EXECUTIONS
------------- ----------
SQL_TEXT
-----------------------------------------------------------------------------------------------------------
3g5812fa0hdmc          3
select count(*) from demogtt1 where object_name = :x
&amp;nbps;

SQL&gt; @sql_info 3g5812fa0hdmc

SQL_ID        CHILD_NUMBER EXECUTIONS INVALIDATIONS
------------- ------------ ---------- -------------
3g5812fa0hdmc            0          3             0

SQL&gt; host start sqlplus andy/andy@pdborcl @test_case 20

SQL&gt; @sql_info 3g5812fa0hdmc

SQL_ID        CHILD_NUMBER EXECUTIONS INVALIDATIONS
------------- ------------ ---------- -------------
3g5812fa0hdmc            0          3             0
3g5812fa0hdmc            1          3             0
</pre>
&gt; Rerun statement in first session
<pre>
SQL&gt; @sql_info 3g5812fa0hdmc

SQL_ID        CHILD_NUMBER EXECUTIONS INVALIDATIONS
------------- ------------ ---------- -------------
3g5812fa0hdmc            0          4             0
3g5812fa0hdmc            1          3             0
</pre>
One child cursor per session does seem a little off putting, and I can appreciate it could be issues for some applications &#8211; but less so than the pre 12c situation. If you were already gathering statistics every time you populate the GTT then private statistics will help you use those statistics and not execute a child cursor that was created using statistics from another session.</p>
<p>Good point about truncate and insert append (although both those operations would make me nervous at the best of times) but you can use the NO_GATHER_OPTIMIZER_STATISTICS hint (documented) to disable them for a statement.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50441"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5043' onclick='return addComment.moveForm( "div-comment-5043", "5043", "respond", "12383" )' aria-label='Reply to Andrew to Andrew Sayer'>Reply to Andrew</a></div>
				</div>
		<ul class="children">
		<li class="comment odd alt depth-3 parent" id="comment-5046">
				<div id="div-comment-5046" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/52b07c8f5c28281d34f986a3f33f051c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Andrew Sayer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5046">
			October 28, 2016 at 1 h 46 min</a>		</div>

		<p>Part of line 5 onwards from test_case.sql got trimmed from the comment:
<pre>
  5  insert into DEMOGTT1 select * from all_objects where rownum &lt;=&amp;1;
  6  exec dbms_stats.gather_table_stats(user,&#039;DEMOGTT1&#039;)
  7  select count(*) from demogtt1 where object_name = :x;
  8  select count(*) from demogtt1 where object_name = :x;
  9* select count(*) from demogtt1 where object_name = :x;
</pre>
i.e insert a number of rows (determined by caller), gather stats, run the query 3 times.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50471"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5046' onclick='return addComment.moveForm( "div-comment-5046", "5046", "respond", "12383" )' aria-label='Reply to Andrew to Andrew Sayer'>Reply to Andrew</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor even depth-4 parent" id="comment-5061">
				<div id="div-comment-5061" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5061">
			October 28, 2016 at 7 h 06 min</a>		</div>

		<p>Hi Andrew,
I&#8217;ve added the &lt;code&gt; and included the 5 lines into first comment. Thanks a lot for the example.
I&#8217;ll try to understand the difference in the case I encountered. You are using session cursor cache here (reason why you run 3 times), right?
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50621"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5061' onclick='return addComment.moveForm( "div-comment-5061", "5061", "respond", "12383" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		<ul class="children">
		<li class="comment odd alt depth-5" id="comment-5090">
				<div id="div-comment-5090" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/52b07c8f5c28281d34f986a3f33f051c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Andrew Sayer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5090">
			October 29, 2016 at 18 h 04 min</a>		</div>

		<p>Franck, I&#8217;m not sure I understand your question. The test cases were run in standalone sessions so there was no risk of cursors being closed. If the cursors were closed (due to many other statements being fired), then I believe we&#8217;d only see soft parses &#8211; no change there. </p>
<p>The second executions were to allow for statistics feedback to be accounted for, neither session experienced any feedback so it was unnecessary. The third executions had no (intentional) reason behind them.</p>
<p>Glad to have helped, this is certainly an interesting new feature that some may be a bit too nervous of trying still.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50911"></div>
</div>
</td>
</tr>
</table>

		
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-5076">
				<div id="div-comment-5076" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-5076">
			October 28, 2016 at 22 h 56 min</a>		</div>

		<p>Andrew, I&#8217;ve added a small update at the top of the blog post. As you have seen, the cursors that are not created from the same private statistics are not invalidated, which is a good point. My conclusion was not exact, thanks a lot for your tests.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-50771"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-5076' onclick='return addComment.moveForm( "div-comment-5076", "5076", "respond", "12383" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
