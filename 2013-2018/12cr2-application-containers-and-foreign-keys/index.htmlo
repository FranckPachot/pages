This was first published on <a href=https://blog.dbi-services.com/12cr2-application-containers-and-foreign-keys>https://blog.dbi-services.com/12cr2-application-containers-and-foreign-keys</a> (2017-06-19)
								<h1 class="entry-title">12cR2 Application Containers and Foreign Keys</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Application Container brings a new way to share data among databases, and adds a new dimension to referential integrity. A foreign key in an application PDB can reference a row belonging to a root data link table. But then, should a delete on the root validate that there are no orpheans in the application PDBs? And what if those PDBs are closed at the time of this delete? Here is a small example.
<span id="more-17209"></span>
If you run this in 12.2.0.1 you will get an error because the search for parent key is done only on the current container. This is considered as a bug: 21955394: CDB:ORA-02291 WHEN FOREIGN KEY REFERS TO THE PRIMARY KEY IN DATA LINK</p>
<p>The example that follows is run with the <a href="https://updates.oracle.com/download/21955394.html" target="_blank">patch</a> applied to fix this bug.</p>
<p>I&#8217;m connecting to root where I have no user PDB yet.
<pre>
SQL&gt; connect sys/oracle@//localhost/CDB1A as sysdba
Connected.

SQL&gt; select con_id, name, application_root application_root, application_pdb application_pdb,application_root_con_id application_root_con_id from v$containers;

CON_ID  NAME      APPLICATION_ROOT  APPLICATION_PDB  APPLICATION_ROOT_CON_ID
------  ----      ----------------  ---------------  -----------------------
1       CDB$ROOT  NO                NO
2       PDB$SEED  NO                NO
</pre></p>
<p>I create the application container root
<pre>
SQL&gt; create pluggable database SCOTT_ROOT as application container admin user SCOTT_ADMIN identified by oracle roles=(DBA);
Pluggable database SCOTT_ROOT created.

SQL&gt; alter pluggable database SCOTT_ROOT open;
Pluggable database SCOTT_ROOT altered.

SQL&gt; select con_id, name, application_root application_root, application_pdb application_pdb,application_root_con_id application_root_con_id from v$containers;

CON_ID  NAME        APPLICATION_ROOT  APPLICATION_PDB  APPLICATION_ROOT_CON_ID
------  ----        ----------------  ---------------  -----------------------
1       CDB$ROOT    NO                NO
2       PDB$SEED    NO                NO
</pre></p>
<p>I connect to this application root and start the installation of the application
<pre>
SQL&gt; connect sys/oracle@//localhost/SCOTT_ROOT as sysdba
Connected.

SQL&gt; alter pluggable database application SCOTT begin install '1.0';
Pluggable database APPLICATION altered.
</pre></p>
<p>I&#8217;m installing SCOTT tables DEPT and EMP tables but I changed their definition from utlsampl.sql:</p>
<ul>
<li>DEPT is an EXTENDED DATA LINK where a set of row is common, inserted on application root and visible by all application PDBs</li>
<li>EMP is a METADATA LINK where each application PDB has its own data isolated from others, but having the same structure</li>
</ul>
<p><pre>
SQL&gt; GRANT CONNECT,RESOURCE,UNLIMITED TABLESPACE TO SCOTT IDENTIFIED BY tiger container=all;
Grant succeeded.

SQL&gt; alter session set current_schema=SCOTT;
Session altered.

SQL&gt; CREATE TABLE DEPT sharing=extended data
  2         (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
  3     DNAME VARCHAR2(14) ,
  4     LOC VARCHAR2(13) ) ;
Table DEPT created.

SQL&gt; CREATE TABLE EMP sharing=metadata
  2         (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
  3     ENAME VARCHAR2(10),
  4     JOB VARCHAR2(9),
  5     MGR NUMBER(4),
  6     HIREDATE DATE,
  7     SAL NUMBER(7,2),
  8     COMM NUMBER(7,2),
  9     DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);
Table EMP created.

SQL&gt; INSERT INTO DEPT VALUES
  2     (10,'ACCOUNTING','NEW YORK');
1 row inserted.

SQL&gt; INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
1 row inserted.

SQL&gt; INSERT INTO DEPT VALUES
  2     (30,'SALES','CHICAGO');
1 row inserted.

SQL&gt; INSERT INTO DEPT VALUES
  2     (40,'OPERATIONS','BOSTON');
1 row inserted.

SQL&gt; COMMIT;
Commit complete.

SQL&gt; alter pluggable database application SCOTT end   install '1.0';
Pluggable database APPLICATION altered.
</pre></p>
<p>The application root has departments 10, 20, 30 and 40 in DEPT shared with all PDBs and has defined that EMP has a foreign key to it.</p>
<p>I create an application PDB from this application root
<pre>
SQL&gt; create pluggable database SCOTT_ONE admin user SCOTT_ONE_ADMIN identified by covfefe;
Pluggable database SCOTT_ONE created.

SQL&gt; alter pluggable database SCOTT_ONE open;
Pluggable database SCOTT_ONE altered.
</pre></p>
<p>I sync it to get common DDL and DML applied
<pre>
SQL&gt; connect sys/oracle@//localhost/SCOTT_ONE as sysdba
Connected.

SQL&gt; alter pluggable database application SCOTT sync;
Pluggable database APPLICATION altered.

SQL&gt; select name,con_id,application_pdb,application_root_con_id from v$containers;

NAME       CON_ID  APPLICATION_PDB  APPLICATION_ROOT_CON_ID
----       ------  ---------------  -----------------------
SCOTT_ONE  8       YES              6
</pre></p>
<p>Now let&#8217;s connect to the application PDB. I can see the DEPT rows inserted from root because it is a DATA LINK.
<pre>
SQL&gt; connect scott/tiger@//localhost/SCOTT_ONE
Connected.

SQL&gt; select * from dept;

DEPTNO  DNAME       LOC
------  -----       ---
10      ACCOUNTING  NEW YORK
20      RESEARCH    DALLAS
30      SALES       CHICAGO
40      OPERATIONS  BOSTON
</pre></p>
<p>EMP is empty here
<pre>
SQL&gt; select * from emp;

no rows selected
</pre></p>
<p>I insert an EMP row in the application PDB which references a DEPT row in the application root:
<pre>
SQL&gt; INSERT INTO EMP VALUES
  2  (7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);

1 row inserted.
</pre>
As DEPT is and EXTENDED DATA LINK, I can add new rows in my PDB:
<pre>
SQL&gt; INSERT INTO DEPT VALUES
  2     (50,'MY LOCAL DEPT','LAUSANNE');

1 row inserted.
</pre>
And I can have an EMP row referencing this local parent:
<pre>
SQL&gt; INSERT INTO EMP VALUES
  2  (7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,50);
1 row inserted.

SQL&gt; commit;
Commit complete.
</pre></p>
<p>This looks good. Now what happens of we delete all rows from DEPT in the application root?
<pre>
SQL&gt; connect sys/oracle@//localhost/SCOTT_ROOT as sysdba
Connected.
SQL&gt; delete from SCOTT.DEPT;
4 rows deleted.

SQL&gt; commit;
Commit complete.
</pre></p>
<p>No error here. But then, I have orphans in my application PDB:
<pre>
SQL&gt; connect scott/tiger@//localhost/SCOTT_ONE
Connected.
SQL&gt; select * from dept;

    DEPTNO DNAME          LOC
---------- -------------- -------------
        50 MY LOCAL DEPT  LAUSANNE

SQL&gt; select * from emp;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800                    20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         50
</pre></p>
<h3>So what?</h3>
<p>Referential integrity works across containers: an application PDB can reference parent key in the application root (according that bug is fixed). However, no ORA-02292 (child record found) is raised when child records are not in the current container. This one makes sense. Enforcing the verification of child records in all PDBs would require that they are opened, and may require locking the table in all containers. We must be aware that doing DML on the application root can lead to inconsistency if not done correctly. </p>
<p>Operations on the application root are application releases (upgrades and patches) and must be validated and tested carefully. For the example above, deleting all rows from DEPT can be done as an application patch which deletes from the EMP table as well:
<pre>
SQL&gt; connect sys/oracle@//localhost/SCOTT_ROOT as sysdba
Connected.
SQL&gt; alter pluggable database application SCOTT begin patch 1 ;
Pluggable database APPLICATION altered.
SQL&gt; delete from scott.emp;
0 rows deleted.
SQL&gt; delete from scott.dept where deptno in (10,20,30,40);
4 rows deleted.
SQL&gt; alter pluggable database application SCOTT end patch 1 ;
Pluggable database APPLICATION altered.
</pre></p>
<p>The delete from EMP does nothing in the application root here, but it will be done on the PDB when applying the patch:
<pre>
SQL&gt; select * from dept;

    DEPTNO DNAME          LOC
---------- -------------- -------------
        50 MY LOCAL DEPT  LAUSANNE

SQL&gt; select * from emp;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         50
</pre></p>
<p>Note that I&#8217;ve defined exactly which rows from DEPT I wanted to delete in the where clause of <pre>delete from scott.dept where deptno in (10,20,30,40);</pre>
You may be tempted to do something like: <pre>delete from scott.dept where deptno in (select deptno from scott.dept);</pre>
But keep in mind that the statements you run in the root are re-played as-is in the PDBs. And when you sync the PDB, you can see no rows from DEPT because there were already purged from the root. Actually, what you want is to delete from EMP the rows which refer to the rows you have deleted from the root. It is not possible to get them with a subquery, except if you have stored them into another data link table before deleting them. Changes in the application root must be managed like application patches.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-172100"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 2 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-7682">
				<div id="div-comment-7682" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/ba77413ffe0bb48d9da467d649464a6c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.oracle.com' rel='external nofollow' class='url'>Thomas Teske</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7682">
			June 20, 2017 at 9 h 06 min</a>		</div>

		<p>Hello Franck,</p>
<p>the question is: why is the data in an application root. You could also use an ordinary PDB for that purpose and have again a little more flexibility keeping the reference &amp; master data. If you intend using the application root for that then the question raises: how to deal with logical dependencies of application releases and the correlated data? Lets consider the example: what if we extend the EMP table including 3rd party and therefor another table is required &#8211; say a BUS_PARTNER entity.</p>
<p>Kind regards
  Thomas
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-76831"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7682' onclick='return addComment.moveForm( "div-comment-7682", "7682", "respond", "17209" )' aria-label='Reply to Thomas to Thomas Teske'>Reply to Thomas</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-7683">
				<div id="div-comment-7683" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/db538a3bda578260157611f83bde50de?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Ahmed B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7683">
			June 20, 2017 at 10 h 16 min</a>		</div>

		<p>Hi Thomas,</p>
<p>The idea behind all the common objects in the CDB is to have the application objects in the application root and the PDB references to it. Metadata-linked objects, data-linked objects and Extended data Linked objects are all designed to serve this target. In theory, this sounds like a great idea. Practically, some challenges will definitely be raised, like the one demonstrated in this article.</p>
<p>Thanks Frank to taking time to demonstrate this subject.</p>
<p>Warm regards,
Ahmed
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-76841"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7683' onclick='return addComment.moveForm( "div-comment-7683", "7683", "respond", "17209" )' aria-label='Reply to Ahmed to Ahmed B.'>Reply to Ahmed</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
