This was first published on <a href=https://blog.dbi-services.com/12cr2-cross-container-dml-insert-into-container>https://blog.dbi-services.com/12cr2-cross-container-dml-insert-into-container</a> (2017-05-13)
								<h1 class="entry-title">12cR2 Cross-container DML &#8211; insert into container()</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Multitenant has been introduced in 12.1.0.1 with the goal to share resources but isolate data. However, having all PDBs in the same root may be convenient to manipulate data in multiple PDBs. In the first patchset, 12.1.0.2, a way to query cross-container has been introduced for the CDB administrator to see data in other containers. In the second release, 12.2.0.1, this goes further with the introduction of Application Containers and cross-PDB DML. Currently, not all possibilities are documented and not all documented features are actually working. This will probably improve in next patchset. I&#8217;ll start here with something simple: insert from root into a table which is in a PDB.
<span id="more-16542"></span></p>
<p>Here is my CDB with two PDBs
<pre>
22:48:13 SQL&gt; connect sys/oracle@//localhost/CDB1A as sysdba
Connected.

22:48:13 SQL&gt; show pdbs

CON_ID  CON_NAME  OPEN MODE   RESTRICTED
------  --------  ---- ----   ----------
2       PDB$SEED  READ ONLY   NO
3       PDB1      READ WRITE  NO
4       PDB2      READ WRITE  NO

</pre></p>
<p>I create a DEMO table in CDB$ROOT and do the same in PDB1 and PDB2
<pre>
22:48:13 SQL&gt; create table DEMO (n number primary key, text varchar2(90) );
Table DEMO created.

22:48:14 SQL&gt; connect sys/oracle@//localhost/PDB1  as sysdba
Connected.

22:48:14 SQL&gt; create table DEMO (n number primary key, text varchar2(90) );
Table DEMO created.

22:48:14 SQL&gt; connect sys/oracle@//localhost/PDB2  as sysdba
Connected.

22:48:14 SQL&gt; create table DEMO (n number primary key, text varchar2(90) );
Table DEMO created.
</pre></p>
<p>I connect to CDB$ROOT and set a transaction name, then check all transactions
<pre>
22:48:14 SQL&gt; connect sys/oracle@//localhost/CDB1A as sysdba
Connected.

22:48:14 SQL&gt; set transaction name 'Franck';
Transaction NAME succeeded.

22:48:14 SQL&gt; select con_id,addr,xidusn,ubafil,ses_addr,ptx_xid,name,used_urec from containers(v$transaction);
no rows selected

</pre></p>
<p>I&#8217;m alone here with no transactions.</p>
<h3>CONTAINERS()</h3>
<p>Here is the cross-container syntax: using the CONTAINERS() and specifying the CON_ID column and value (CON_ID=3 for PDB1)
<pre>
22:48:14 SQL&gt; insert into containers(DEMO) (con_id,n,text) values (3,1,'Cross-container insert');
1 row inserted.

22:48:14 SQL&gt; select con_id,addr,xidusn,ubafil,ses_addr,ptx_xid,name,used_urec from containers(v$transaction);

CON_ID  ADDR              XIDUSN  UBAFIL  SES_ADDR          PTX_XID           NAME    USED_UREC
------  ----              ------  ------  --------          -------           ----    ---------
1       0000000067BB19E8  7       0       000000006ADD2EA8  0000000000000000  Franck  1
3       000000006642AEB8  1       62      000000006AC99610  0000000000000000          2
</pre></p>
<p>The interesting thing is that I have two transactions: one on my current container, and one on the container CON_ID=3 specified in my insert.</p>
<p>I&#8217;m doing the same for PDB2 which is CON_ID=4
<pre>
22:48:14 SQL&gt; insert into containers(DEMO) (con_id,n,text) values (4,1,'Cross-container insert');
1 row inserted.

22:48:15 SQL&gt; select addr,con_id,addr,xidusn,ubafil,ses_addr,ptx_xid,name,used_urec from containers(v$transaction);

ADDR              CON_ID  ADDR              XIDUSN  UBAFIL  SES_ADDR          PTX_XID           NAME    USED_UREC
----              ------  ----              ------  ------  --------          -------           ----    ---------
0000000067BB19E8  1       0000000067BB19E8  7       0       000000006ADD2EA8  0000000000000000  Franck  1
000000006642AEB8  3       000000006642AEB8  1       62      000000006AC99610  0000000000000000          2
000000006644EA90  4       000000006644EA90  6       66      000000006B20F828  0000000000000000          2
</pre></p>
<p>looking at the transactions sessions, the ones on the PDBs looks like a database link connection:
<pre>
22:48:15 SQL&gt; select taddr,con_id,program,action,module from v$session where saddr in (select ses_addr from v$transaction);

TADDR             CON_ID  PROGRAM                   ACTION  MODULE
-----             ------  -------                   ------  ------
000000006644EA90  4       oracle@VM104 (TNS V1-V3)          oracle@VM104 (TNS V1-V3)
000000006642AEB8  3       oracle@VM104 (TNS V1-V3)          oracle@VM104 (TNS V1-V3)
0000000067BB19E8  1       java@VM104 (TNS V1-V3)            java@VM104 (TNS V1-V3)
</pre></p>
<p>It looks as database links, and we can actually see those open links in V$DBLINKS:
<pre>
23:06:53 SQL&gt; select * from v$dblink;

DB_LINK  OWNER_ID  LOGGED_ON  HETEROGENEOUS  PROTOCOL  OPEN_CURSORS  IN_TRANSACTION  UPDATE_SENT  COMMIT_POINT_STRENGTH  CON_ID
-------  --------  ---------  -------------  --------  ------------  --------------  -----------  ---------------------  ------
PDB1     0         YES        YES            UNKN      0             YES             YES          1                      1
PDB2     0         YES        YES            UNKN      0             YES             YES          1                      1
</pre></p>
<h3>Commit</h3>
<p>However, when using CONTAINERS() the session is not using the database links but something like parallel query switching to the containers. This means that it is not the same transaction and we don&#8217;t see the modifications:
<pre>
22:48:15 SQL&gt; select * from containers(DEMO);
no rows selected
</pre></p>
<p>Now, I commit:
<pre>
22:48:15 SQL&gt; commit;
Commit complete.
</pre>
and all transactions are ended:
<pre>
22:48:15 SQL&gt; select taddr,con_id,program,action,module from v$session where saddr in (select ses_addr from v$transaction);
no rows selected
</pre>
the links are still opened but not in a transaction anymore:
<pre>
23:10:21 SQL&gt; select * from v$dblink;

DB_LINK  OWNER_ID  LOGGED_ON  HETEROGENEOUS  PROTOCOL  OPEN_CURSORS  IN_TRANSACTION  UPDATE_SENT  COMMIT_POINT_STRENGTH  CON_ID
-------  --------  ---------  -------------  --------  ------------  --------------  -----------  ---------------------  ------
PDB1     0         YES        YES            UNKN      0             NO              NO           1                      1
PDB2     0         YES        YES            UNKN      0             NO              NO           1                      1
</pre></p>
<p>My inserts are now visible, either from the root with CONTAINER()
<pre>
22:48:15 SQL&gt; select * from containers(DEMO);

N  TEXT                    CON_ID
-  ----                    ------
1  Cross-container insert  4
1  Cross-container insert  3
</pre>
or from each PDB:
<pre>
22:48:15 SQL&gt; alter session set container=PDB1;
Session altered.

22:48:15 SQL&gt; select * from DEMO;

N  TEXT
-  ----
1  Cross-container insert
</pre></p>
<h3>So what?</h3>
<p>This is a convenient way for the CDB administrator, or for the Application Root administrator, to do some DML on different containers, without having to create a database link. Of course, the common user can also switch to a PDB using the &#8216;alter session set container&#8217; but this one does not allow to have a transaction that spans multiple containers. You can think of it as a shortcut to avoid creating database links from the root to its containers.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-165430"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
