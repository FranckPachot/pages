This was first published on <a href=https://blog.dbi-services.com/12cr2-dbca-can-create-a-standby-database>https://blog.dbi-services.com/12cr2-dbca-can-create-a-standby-database</a> (2017-02-12)
								<h1 class="entry-title">12cR2 DBCA can create a standby database</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Do you like DBCA to create a database from command line, with -silent -createDatabase? On a simple command line you can provision a database, with oratab, tnsnames.ora directory creation and any setting you want. And you can even call a custom script to customize further. But if you want to put it in Data Guard, you have to do the duplicate manually with RMAN. This evolves in 12.2 with a new option in DBCA to do that: <pre>dbca -silent -createDuplicateDB -createAsStandby </pre>
<span id="more-14771"></span></p>
<h3>Limitations</h3>
<p>I&#8217;ve tried in the Oracle Public Cloud where I just created a RAC database. But unfortunately, this new feature is only for Single Instance:</p>
<p><pre>[FATAL] [DBT-16056] Specified primary database is not a Single Instance (SI) database.
   CAUSE: Duplicate database operation is supported only for SI databases.</pre></p>
<p>Ok. RAC is complex enough anyway, so you don&#8217;t need that quick command line to create the standby. So I tried with a single instance database:</p>
<p><pre>[FATAL] [DBT-16057] Specified primary database is a container database (CDB).
   CAUSE: Duplicate database operation is supported only for non container databases.</pre></p>
<p>Ok. That a bit surprising to have a new feature in 12.2 that works only on the architecture that is deprecated in 12.1 but if we think about it, DBCA is for fast provisioning. In multitenant you create a CDB once, put it in Data Guard, and the fast provisioning comes with the &#8216;create pluggable database&#8217;. And deprecated doesn&#8217;t mean that we do not use it, and it is good to have a simple command line tools for easy provisioning in non-CDB.</p>
<p>Then, I tried on a non-CDB that I&#8217;ve created in 12.2</p>
<p>I&#8217;m a big fan of EZCONNECT but I had a few problems with it. What&#8217;s worth to know is that there is no &#8216;impossible to connect&#8217; message.  When it cannot connect, the following message is raised:</p>
<p><pre>[FATAL] [DBT-16051] Archive log mode is not enabled in the primary database.
   ACTION: Primary database should be configured with archive log mode for creating a duplicate or standby database.</pre>
just because this is the first thing that DBCA checks and this is where  it fails when connections is not ok.</p>
<p>But you can also use a tnsnames.ora network service name. This is what I&#8217;ll use for -primaryDBConnectionString
<pre>
$ tnsping ORCLA
TNS Ping Utility for Linux: Version 12.2.0.1.0 - Production on 11-FEB-2017 22:28:35
Copyright (c) 1997, 2016, Oracle.  All rights reserved.
Used parameter files:
/u01/app/oracle/product/12.2.0/dbhome_1/network/admin/sqlnet.ora
Used TNSNAMES adapter to resolve the alias
Attempting to contact (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = MAA.compute-usslash.oraclecloud.internal)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcla.compute-usslash.oraclecloud.internal)))
OK (0 msec)
</pre></p>
<h3>-createDuplicateDB -createAsStandby</h3>
<p>Here is an example:</p>
<p><pre>dbca -silent -createDuplicateDB -gdbName ORCLB.compute-usslash.oraclecloud.internal -sid ORCLB -sysPassword "Ach1z0#d" -primaryDBConnectionString ORCLA -createAsStandby -dbUniquename ORCLB </pre></p>
<p>This will connect RMAN to the target (here called &#8216;primary&#8217;), with the connect string ORCLA and run a duplicate to create ORCLB as specified.</p>
<p>It starts to create a temporary listener (which is still there in listener.ora even after completion), create the auxiliary instance and run RMAN:
<pre>Listener config step
33% complete
Auxiliary instance creation
66% complete
RMAN duplicate
100% complete
Look at the log file "/u01/app/oracle/cfgtoollogs/dbca/ORCLB/orcla.log" for further details.</pre></p>
<p>Through RMAN API, the file names are set:</p>
<p><pre>
run {
set newname for datafile 1 to  '/u01/app/oracle/oradata/orclb/system01.dbf' ;
set newname for datafile 3 to  '/u01/app/oracle/oradata/orclb/sysaux01.dbf' ;
set newname for datafile 4 to  '/u01/app/oracle/oradata/orclb/undotbs01.dbf' ;
set newname for datafile 7 to  '/u01/app/oracle/oradata/orclb/users01.dbf' ;
set newname for tempfile 1 to  '/u01/app/oracle/oradata/orclb/temp01.dbf' ;
</pre></p>
<p>and the DUPLICATE FOR STANDBY FROM ACTIVE is run:
<pre>
duplicate target database
for standby
from active database
dorecover
spfile
set 'db_recovery_file_dest_size'='8405385216'
set 'compatible'='12.2.0'
set 'undo_tablespace'='UNDOTBS1'
set 'dispatchers'='(PROTOCOL=TCP) (SERVICE=ORCLAXDB)'
set 'db_name'='orcla'
set 'db_unique_name'='ORCLB'
set 'sga_target'='2281701376'
set 'diagnostic_dest'='/u01/app/oracle'
set 'audit_file_dest'='/u01/app/oracle/audit'
set 'open_cursors'='300'
set 'processes'='300'
set 'nls_language'='AMERICAN'
set 'pga_aggregate_target'='757071872'
set 'db_recovery_file_dest'='/u01/app/oracle/fast_recovery_area/orcla'
set 'db_block_size'='8192'
set 'log_archive_format'='%t_%s_%r.dbf'
set 'nls_territory'='AMERICA'
set 'control_files'="/u01/app/oracle/oradata/orclb/control01.ctl", "/u01/app/oracle/fast_recovery_area/orcla/ORCLB/control02.ctl"
set 'audit_trail'='DB'
set 'db_domain'='compute-usslash.oraclecloud.internal'
set 'remote_login_passwordfile'='EXCLUSIVE'
reset 'local_listener'
reset 'db_file_name_convert'
set 'log_archive_dest_1'='location=/u01/app/oracle/fast_recovery_area/orcla'
reset 'event'
reset 'remote_listener'
nofilenamecheck;
}
</pre></p>
<p>The parameters are coming from the &#8216;primary&#8217; and adapted for the new database. Be careful. This is where I prefer to review the parameters before. For example, when you duplicate to clone the primary (without the -createAsStandby) you probably don&#8217;t want to keep the same log_archive_dest that was set in a Data Guard configuration. I&#8217;ll have to post a blog about that.</p>
<p>At the end, the standby database is opened read-only, so be careful to close it before starting the apply of redo if you don&#8217;t have the Active Data Guard option.</p>
<h3>Data Guard</h3>
<p>DBCA doesn&#8217;t go beyond the DUPLICATE. And you can use it also in Standard Edition to setup the manual standby.</p>
<p>I hope that one day we will have an option to create the Data Guard configuration in the same process, but here you have to do it yourself:</p>
<ul>
<li>No tnsnames.ora entry is added for the standby</li>
<li>The static listener entries are not added in listener.ora</li>
<li>No Data Guard configuration is there</li>
<li>The Data Guard Broker is not started except if it was set in advance to true on primary</li>
<li>No standby redo logs are created (except when they were present on primary)</li>
</ul>
<p>You can set dg_broker_start=true and create the standby redo logs on a post-script that you call with the -customScripts argument. However, the best way is to do it in advance on the primary, and then the duplicate will do the same on the standby.</p>
<h3>So what?</h3>
<p>You don&#8217;t need this new feature because it is easy to automate it yourself. It&#8217;s just a copy of spfile parameters, with a few change, and a RMAN duplicate command. But your scripts will be specialized for your environment. Generic scripts are more complex to maintain. The big advantage to have this integrated on DBCA is that is designed for all configurations, and is maintained through versions.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-147720"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
