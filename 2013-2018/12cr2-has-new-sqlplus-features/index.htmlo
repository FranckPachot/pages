This was first published on <a href=https://blog.dbi-services.com/12cr2-has-new-sqlplus-features>https://blog.dbi-services.com/12cr2-has-new-sqlplus-features</a> (2016-11-11)
								<h1 class="entry-title">12cR2 has new SQL*Plus features</h1>
		<div class="content-inner">
			
						
						
		   
			<p>12<i>c</i>R2 is there. What&#8217;s new in SQL*Plus? For sure, you can&#8217;t expect lot of things from it. The new command line is the SQL*Developer sqlcl which aims to be 100% compatible with SQL*Plus with lot of more features. However, a few little things came here: default editor, command line history and easy row/LOB prefetch and statement caching.
<span id="more-12633"></span></p>
<h3>_EDITOR</h3>
<p>Yes, it seems that the default editor is &#8216;vi&#8217; instead of &#8216;ed&#8217;, finally. This is a great improvement. Of course, you can set the VISUAL environment variable in your system. But when you come to another environment (which consultants do), this default will save lot of &#8220;define _editor=vi&#8221; keystroke.</p>
<p>The environment variables EDITOR and VISUAL are not set:
<pre>
SQL&gt; host set | grep -E "(^EDITOR|^VISUAL)"

SQL&gt;
</pre>
but the _EDITOR in sqlplus is set to &#8216;vi':
<pre>
SQL&gt; define
DEFINE _DATE           = "11-NOV-16" (CHAR)
DEFINE _CONNECT_IDENTIFIER = "CDB1" (CHAR)
DEFINE _USER           = "SYS" (CHAR)
DEFINE _PRIVILEGE      = "AS SYSDBA" (CHAR)
DEFINE _SQLPLUS_RELEASE = "1202000100" (CHAR)
DEFINE _EDITOR         = "vi" (CHAR)
DEFINE _O_VERSION      = "Oracle Database 12c EE Extreme Perf Release 12.2.0.1.0 - 64bit Production" (CHAR)
DEFINE _O_RELEASE      = "1202000100" (CHAR)
DEFINE 1               = "sqlplus" (CHAR)
DEFINE _RC             = "1" (CHAR)
</pre></p>
<p>Here is the default. For sure, vi is better than &#8216;ed&#8217;. &#8216;ed&#8217; was the line editor from the era of 2400 baud network.</p>
<h3>Command history</h3>
<p>Yes. In 2016 SQL*Plus has a command line history. Do you need it? Probably not. If you are on Windows, you can navigate with arrow-up and arrow-down in any command line program. If you are on Linux, you have probably installed rlwrap. And finally, if you want to do something friendly on command line, you probably use sqlcl.</p>
<p>However, in 12cR2 a very basic history has been introduced to SQL*Plus.
You have to enable it:
<pre>
SQL&gt; show HISTORY
history is OFF
SQL&gt; set HISTORY on
SQL&gt; show history
history is ON and set to "100"
</pre>
so the default is 100 lines, but you can increase it:
<pre>
SQL&gt; set HISTORY 999999
SP2-0267: history option 999999 out of range (0 through 100000)
SQL&gt; set HISTORY 100000
</pre>
what can you do with it?
<pre>
SQL&gt; help HISTORY

 HISTORY
 -------

 Stores, lists, executes, edits of the commands
 entered during the current SQL*Plus session.

 HIST[ORY] [N {RUN | EDIT | DEL[ETE]}] | [CLEAR]

 N is the entry number listed in the history list.
 Use this number to recall, edit or delete the command.

 Example:
 HIST 3 RUN - will run the 3rd entry from the list.

 HIST[ORY] without any option will list all entries in the list.
</pre>
Here are some examples:
<pre>
SQL&gt; show history
history is OFF
SQL&gt; set history on
SQL&gt; show history
history is ON and set to "100"
SQL&gt; prompt 1
1
SQL&gt; prompt 2
2
SQL&gt; history
  1  show history
  2  prompt 1
  3  prompt 2

SQL&gt; history list
  1  show history
  2  prompt 1
  3  prompt 2

SQL&gt; history 2 run
1
SQL&gt; history 2 edit

SQL&gt; history 2 delete
SQL&gt; history
  1  show history
  2  prompt 2
  3  prompt 1

SQL&gt; history clear
SQL&gt; history
SP2-1651: History list is empty.
</pre></p>
<p>As you see, it&#8217;s not the most user friendly. But for the basic DBA task that you do on a server you may find it safer than up-arrow. Imagine that a &#8216;shutdown immediate&#8217; is in the history. Do you want to take the risk to run it because of some network latency and you run the line above the one you wanted? Or do you prefer to be sure tho have read the command befor</p>
<h3>SET LOBPREF[ETCH], SET ROWPREF[ETCH], and SET STATEMENTC[ACHE].</h3>
<p>Here are important performance improvements:
<pre>
SQL&gt; show lobprefetch
lobprefetch 0
SQL&gt; show rowprefetch
rowprefetch 1
SQL&gt; show statementcache
statementcache is 0
</pre>
Those are things that you can to on OCI or JDBC and that you can easily do now in SQL*Plus: prefetch rows and LOBs to avoid fetch roundtrips and use statement caching to avoid parse calls.</p>
<p>I&#8217;ll probably blog about prefetch in a future blog, so for the moment, here is a quick demo of statement caching.</p>
<p>By default, statement caching is off. I run 3 times the same query:
<pre>
select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.370333 PM +00:00 session cursor cache hits                   15
11-NOV-16 05.00.41.370333 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.370333 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.370333 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.370333 PM +00:00 parse count (total)                          6
11-NOV-16 05.00.41.370333 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.370333 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.370333 PM +00:00 parse count (describe)                       0

8 rows selected.

SQL&gt; select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.373429 PM +00:00 session cursor cache hits                   22
11-NOV-16 05.00.41.373429 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.373429 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.373429 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.373429 PM +00:00 parse count (total)                          7
11-NOV-16 05.00.41.373429 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.373429 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.373429 PM +00:00 parse count (describe)                       0

8 rows selected.

SQL&gt; select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.375993 PM +00:00 session cursor cache hits                   29
11-NOV-16 05.00.41.375993 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.375993 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.375993 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.375993 PM +00:00 parse count (total)                          8
11-NOV-16 05.00.41.375993 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.375993 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.375993 PM +00:00 parse count (describe)                       0

8 rows selected.
</pre>
You can see that each one had its parse call. Of course, it&#8217;s not a hard parse because cursor is shared. It&#8217;s not even a soft parse thanks to session cursor cache. But it&#8217;s still a parse call.</p>
<p>Let&#8217;s set statement caching to one and run the query again 3 times:
<pre>
set statementcache 1

SQL&gt; select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.378937 PM +00:00 session cursor cache hits                   36
11-NOV-16 05.00.41.378937 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.378937 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.378937 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.378937 PM +00:00 parse count (total)                          9
11-NOV-16 05.00.41.378937 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.378937 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.378937 PM +00:00 parse count (describe)                       0

8 rows selected.

SQL&gt; select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.381403 PM +00:00 session cursor cache hits                   42
11-NOV-16 05.00.41.381403 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.381403 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.381403 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.381403 PM +00:00 parse count (total)                          9
11-NOV-16 05.00.41.381403 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.381403 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.381403 PM +00:00 parse count (describe)                       0

8 rows selected.

SQL&gt; select current_timestamp,name,value from v$mystat join v$statname using(statistic#) where name like 'parse %' or name like '%cursor cache%';

CURRENT_TIMESTAMP                   NAME                                     VALUE
----------------------------------- ----------------------------------- ----------
11-NOV-16 05.00.41.383844 PM +00:00 session cursor cache hits                   48
11-NOV-16 05.00.41.383844 PM +00:00 session cursor cache count                   4
11-NOV-16 05.00.41.383844 PM +00:00 parse time cpu                               0
11-NOV-16 05.00.41.383844 PM +00:00 parse time elapsed                           0
11-NOV-16 05.00.41.383844 PM +00:00 parse count (total)                          9
11-NOV-16 05.00.41.383844 PM +00:00 parse count (hard)                           0
11-NOV-16 05.00.41.383844 PM +00:00 parse count (failures)                       0
11-NOV-16 05.00.41.383844 PM +00:00 parse count (describe)                       0

8 rows selected.
</pre>
One more parse call only. The cursor was cached at client side.</p>
<p>How many statements can you cache?
<pre>
SQL&gt; set statementcache 999999
SP2-0267: statementcache option 999999 out of range (0 through 32767)
</pre>
from 1 to 32767. The value 0 disable statement caching.
<pre>
set statementcache 32767
</pre></p>
<h3>Not yet in 12.2 ?</h3>
<p>If you did not upgrade yet to 12.2 you have a way to use statement caching. You can set it in oraaccess.xml which can enable those optimizations for all OCI clients.</p>
<h3>sqlplus -F</h3>
<p>Those performance settings can be set to default values with the &#8216;-F&#8217; argument.
Let set which settings are different:
<pre>
[oracle@OPC122 ~]$ sqlplus -s    / as sysdba &lt;&lt;&lt; &quot;store set a.txt replace&quot;
Wrote file a.txt
[oracle@OPC122 ~]$ sqlplus -s -F / as sysdba &lt;&lt;&lt; &quot;store set b.txt replace&quot;
Wrote file b.txt
[oracle@OPC122 ~]$ diff a.txt b.txt
3c3
 set arraysize 100
31c31
 set lobprefetch 16384
46c46
 set rowprefetch 2
59c59
 set statementcache 20
</pre>
Those settings avoid roundtrips and unnecessary work. <a href="http://docs.oracle.com/database/122/SQPUG/release-changes.htm#SQPUG648" target="_blank">Documentation</a> says that PAGESIZE set to higher value but I don&#8217;t see it here and anyway, it&#8217;s about formatting output and not about performance.</p>
<h3>VARIABLE</h3>
<p>You may use SQL*Plus to test queries with bind variables. Here is what you do before 12.2:
<pre>
SQL&gt; variable text char
SQL&gt; exec :text:='X'

PL/SQL procedure successfully completed.

SQL&gt; select * from DUAL where DUMMY=:text;

D
-
X
</pre>
You can now simply:
<pre>
SQL&gt; variable text char='X'
SQL&gt; select * from DUAL where DUMMY=:text;

D
-
X
</pre></p>
<h3>SQLcl the SQLDeveloper command line</h3>
<p>Since 11g SQLDeveloper is shipped in ORACLE_HOME and in 12.2 it includes SQLcl, the SQLDeveloper command line that is fully compatible with SQL*Plus scripts.
The version we have on the DBCS lacks the executable flag and the right JAVA_HOME:
<pre>
[oracle@SE222 ~]$ /u01/app/oracle/product/12.2.0/dbhome_1/sqldeveloper/sqlcl/bin/sql / as sysdba
-bash: /u01/app/oracle/product/12.2.0/dbhome_1/sqldeveloper/sqlcl/bin/sql: Permission denied
[oracle@SE222 ~]$
[oracle@SE222 ~]$ bash /u01/app/oracle/product/12.2.0/dbhome_1/sqldeveloper/sqlcl/bin/sql / as sysdba

SQLcl: Release 12.2.0.1.0 RC on Fri Nov 11 21:16:48 2016

Copyright (c) 1982, 2016, Oracle.  All rights reserved.

  USER          =
  URL           = jdbc:oracle:oci8:@
  Error Message = No suitable driver found for jdbc:oracle:oci8:@
  USER          =
  URL           = jdbc:oracle:thin:@127.0.0.1:1521:CDB2
  Error Message = No suitable driver found for jdbc:oracle:thin:@127.0.0.1:1521:CDB2
  USER          =
  URL           = jdbc:oracle:thin:@localhost:1521/orcl
  Error Message = No suitable driver found for jdbc:oracle:thin:@localhost:1521/orcl
Username? (RETRYING) ('/ as sysdba'?)
</pre></p>
<p>I&#8217;ve defined the following alias:
<pre>
alias sql='JAVA_HOME=$ORACLE_HOME/jdk bash $ORACLE_HOME/sqldeveloper/sqlcl/bin/sql'
</pre>
and I&#8217;m ready to run it:
<pre>
[oracle@SE222 ~]$ sql / as sysdba

SQLcl: Release 12.2.0.1.0 RC on Fri Nov 11 21:20:15 2016

Copyright (c) 1982, 2016, Oracle.  All rights reserved.

Connected to:
Oracle Database 12c Standard Edition Release 12.2.0.1.0 - 64bit Production

SQL&gt;
</pre></p>
<p>I like SQLcl except one thing &#8211; it&#8217;s in java and is long to start:
<pre>
[oracle@SE222 ~]$ time sql /nolog
real    0m2.184s
user    0m3.054s
sys     0m0.149s
</pre>
2 seconds is long when you run it frequently. Compare with sqlplus:
<pre>
[oracle@SE222 ~]$ time sqlplus /nolog
real    0m0.015s
user    0m0.008s
sys     0m0.006s
</pre></p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-126340"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
