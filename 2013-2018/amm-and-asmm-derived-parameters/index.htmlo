This was first published on <a href=https://blog.dbi-services.com/amm-and-asmm-derived-parameters>https://blog.dbi-services.com/amm-and-asmm-derived-parameters</a> (2016-07-16)
								<h1 class="entry-title">AMM and ASMM derived parameters</h1>
		<div class="content-inner">
			
						
						
		   
			<p>The latest <a href="http://www.dbi-services.com/trainings/oracle-dba-essentials-workshop/" target="_blank">DBA Essentials Workshop</a> training I&#8217;ve given raised a question about PGA_AGGREGATE_LIMIT. The default depends on PGA_AGGREGATE_TARGET. So how is it calculated in AMM where PGA_AGGREGATE_TARGET is dynamic? Is it also dynamic or is it determined by the value at instance startup only?
<span id="more-9767"></span>
The PGA_AGGREGATE_LIMIT default value is <a href="https://docs.oracle.com/database/121/REFRN/GUID-E364D0E5-19F2-4081-B55E-131DF09CFDB3.htm#REFRN10328" target="_blank">documented</a>. I&#8217;ll use the following query to display the values of the concerned parameters:
<pre>
select
dbms_stats_internal.get_parameter_val('pga_aggregate_limit')/1024/1024/1024 "pga_aggregate_limit",
 2 "2GB",
 3*dbms_stats_internal.get_parameter_val('processes')/1024 "3MB*processes",
 2*dbms_stats_internal.get_parameter_val('__pga_aggregate_target')/1024/1024/1024 "2*__pga_aggregate_target",
 dbms_stats_internal.get_parameter_val('__sga_target')/1024/1024/1024 "__sga_target",
 dbms_stats_internal.get_parameter_val('__pga_aggregate_target')/1024/1024/1024 "__pga_aggregate_target"
from dual
/
</pre>
and I start with the following:
<pre>
pga_aggregate_limit        2GB 3MB*processes 2*__pga_aggregate_target __sga_target __pga_aggregate_target
------------------- ---------- ------------- ------------------------ ------------ ----------------------
            2.40625          2     .87890625                  2.40625     1.796875               1.203125
</pre></p>
<p>I&#8217;m in AMM with only MEMORY_TARGET set to 3G. The dynamic SGA is at 1.8G and the PGA at 1.2G. The PGA_AGGREGATE_LIMIT is at 200% of the PGA which is 2.4G</p>
<p>I increase the SGA in order to see a resize of the PGA</p>
<p><pre>
SQL&gt; alter system set sga_target=2500M;
System altered.
</pre></p>
<p>The PGA is now about 500M in order to release some space for SGA:</p>
<p><pre>pga_aggregate_limit        2GB 3MB*processes 2*__pga_aggregate_target __sga_target __pga_aggregate_target
------------------- ---------- ------------- ------------------------ ------------ ----------------------
            2.40625          2     .87890625                  1.09375     1.796875                .546875
</pre></p>
<p>However, the PGA_AGGREGATE_LIMIT did no change. the formula is not dynamic. The value that has been calculated at startup remains.</p>
<h3>spfile</h3>
<p>When dynamic components are resized, the values are written into the spfile with double underscore parameters, so that a restart of the instance starts with same value:
<pre>SQL&gt; host strings /u01/app/oracle/product/12.1.0/dbhome_1/dbs/spfileCDB.ora     | grep target
CDB.__pga_aggregate_target=587202560
CDB.__sga_target=1929379840
*.memory_max_target=5G
*.memory_target=3G
.sga_target=2634022912</pre></p>
<p>So let&#8217;s restart and see what happens to PGA_AGGREGATE_LIMIT (which has no double underscore entry in spfile)</p>
<p><pre>SQL&gt; startup force
ORACLE instance started.

Total System Global Area 5368709120 bytes
Fixed Size                  2935712 bytes
Variable Size            3976201312 bytes
Database Buffers          721420288 bytes
Redo Buffers               13840384 bytes
In-Memory Area            654311424 bytes
Database mounted.
Database opened.

SQL&gt; select
  2   dbms_stats_internal.get_parameter_val('pga_aggregate_limit')/1024/1024/1024 "pga_aggregate_limit",
  3   2 "2GB",
  4   3*dbms_stats_internal.get_parameter_val('processes')/1024 "3MB*processes",
  5   2*dbms_stats_internal.get_parameter_val('__pga_aggregate_target')/1024/1024/1024 "2*__pga_aggregate_target",
  6   dbms_stats_internal.get_parameter_val('__sga_target')/1024/1024/1024 "__sga_target",
  7   dbms_stats_internal.get_parameter_val('__pga_aggregate_target')/1024/1024/1024 "__pga_aggregate_target"
  8   from dual
  9  /

pga_aggregate_limit        2GB 3MB*processes 2*__pga_aggregate_target __sga_target __pga_aggregate_target
------------------- ---------- ------------- ------------------------ ------------ ----------------------
                  2          2     .87890625                  1.09375     2.453125                .546875
</pre></p>
<p>The good thing is that the value is calculated from the actual values. Here 200% of PGA is smaller than 2G so 2G is used.</p>
<p>The bad thing is that a restart of the instance may bring a different behavior than before than restart.</p>
<h3>So what?</h3>
<p>This instability is easy to solve: don&#8217;t use AMM. SGA and PGA are different things and you should size them separately.
But the problem is wider. There are other parameters that can show same behavior. For example, the default db_file_multiblock_read_count can be limited by processes x __db_block_buffers.
You may have to change some values either manually or automatically at the start of a new application because you don&#8217;t know which is the best setting. But once the application is more stable, you should stabilize the dynamic sizing by setting minimum values.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-97680"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
