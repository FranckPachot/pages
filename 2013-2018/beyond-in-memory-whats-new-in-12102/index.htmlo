This was first published on <a href=https://blog.dbi-services.com/beyond-in-memory-whats-new-in-12102>https://blog.dbi-services.com/beyond-in-memory-whats-new-in-12102</a> (2014-07-22)
								<h1 class="entry-title">Beyond In-Memory, what&#8217;s new in 12.1.0.2 ?</h1>
		<div class="content-inner">
			
						
						
		   
			<p>It&#8217;s just a patchset. The delivery that is there to stabilize a release with all the bug fixes. But it comes with a lot of new features as well. And not only the one that has been advertised as the future of the database. It&#8217;s a huge release.</p>
<p>Let&#8217;s have a look at what&#8217;s new.</p>
<p>First, it <a href="https://twitter.com/tmmdv/status/484693908900052992">seems </a>that it will be the only patchest for 12.1</p>
<p>Then, there is that In-Memory option awaited for a <a href="https://blog.dbi-services.com/oracle-12c-in-memory-option-waiting-for-12102">while</a>. There has been some demo done by Larry Ellison on Exadata or even on the Oracle SPARC M6. Of course, if you have 32 TB of memory, we can understand the need for an In-Memory optimized storage. For a more real-life usage of that option, stay tune on our blog. We investigate the features in the context of our customer concerns, to fit their needs. For example, In-Memory addresses cases where some customers use Active Data Guard to offload reporting/real-time analytics to another server. But unfortunately In-Memory is not populated on a physical standby. We probably have to wait 12.2 for that.</p>
<p>In-Memory is an option, so available only in Enterprise Edition.</p>
<p>There are other new features related with large memory. There is a part of buffer cache dedicated to big tables (you just set the percentage) to be cached for In-Memory Parallel Query. And there is also a mode where all the database is in buffer cache. About performance and Parallel Query, a new transformation has been introduced to optimize the group by operation when joining a fact table to dimensions.</p>
<p>Second new feature is the range-partitioned hash cluster. Oracle CLUSTER segments is a very old feature but not widely used. Hash cluster is the fastest way to access to a row because the key can be directly transformed to a rowid. Unfortunately maintenance is not easy, especially when the volume increases. And we have partitioning which is the way to ease maintenance with growing tables but, until today, we can&#8217;t partition a hash cluster. I mean, not in a supported way because Oracle <a href="http://iggyfernandez.wordpress.com/2011/05/10/major-new-undocumented-partitioning-feature-in-oracle-database-11g-release-2/trackback">uses it</a>Â on SPARC for the TPC benchmarks &#8211; applying a specific patch (10374168) for it.</p>
<p>Well, the good news is that we can finally partition hash clusters with the simple syntax:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">create cluster democ1 (sample_time timestamp,sample_id number)
hashkeys 3600 hash is sample_id size 8192
partition by range (sample_time) (
partition P12 values less than( timestamp'2014-04-26 12:00:00' )
...</pre>
<p>Another nice feature is Attribute Clustering. Lot of other RDBMS has the ability to arrange rows but Oracle puts any insert anywhere in a heap table, depending only on where some free space is left. The alternative is IOT of course. But it can be good to try to cluster rows on one or several columns. It&#8217;s better for index access, it&#8217;s better for cache efficiency, it&#8217;s better for storage indexes (or in-memory min/max), for ILM compression, etc. We can finally do it and I&#8217;ll blog soon about that.</p>
<p>Attribute Clustering is not an option, but available only in Enterprise Edition.</p>
<p>I think those two features are my favorite ones. Because the best optimization we can do, without refactoring the application design, is to place data in the way it will be retreived.</p>
<p>The trend today is to store unstructured data as JSON. XML was nice, but it&#8217;s verbose. JSON is easier to read and even PostgreSQL can store JSON in its latest version. So Oracle has it in 12.1.0.2: you can store and index it. Once again stay tuned on this blog to see how it works.</p>
<p>Something important was missing in Oracle SQL. How do you grant a read only user? You grant only select privilege? But that&#8217;s too much because with a select privilege we can lock a table (with LOCK or SELECT FOR UPDATE). So we have now a READ privilege to prevent that. That&#8217;s my favorite new feature for developers.</p>
<p>Then there are a few improvements on multitenant, such as the possibility to save the state of a pluggable database so that it can be automatically opened when the CDB startup. We already addressed that in 12.1.0.1 in our <a href="http://www.dbi-services.com/offering/products/database-management-kit-dmk/">Database Management Kit</a>. An undocumented parameter, _multiple_char_set_cdb, let us imagine that we will be able to have different characterset for the PDB &#8211; probably in the future. Currently it&#8217;s set to false.</p>
<p>And once again as beta testing partners we have put the pressure to have a fix for what we consider as serious availability <a href="https://blog.dbi-services.com/oracle-12c-pluggable-databases-not-that-isolated">bug</a>. The behaviour in 12.1.0.1 beta was even worse about CDB availability and I finally had a bug opened (Bug 19001390 &#8211; PDB SYSTEM TABLESPACE MEDIA FAILURE CAUSES THE WHOLE CDB TO CRASH) that should be fixed in 12.1</p>
<p>About fixes, some restrictions are now gone: we can finally use ILM with multitenant and we can have supplemental logging while using a move partition online. And you can have Flashback Data Archive in multitenant as well.</p>
<p>All that is good news, but remember, even if it&#8217;s only the 4th digit that is increased in the version number, it&#8217;s a brand new version with lot of new features. So, when do you plan to upgrade ? 11g is supported until January 2015. Extended support is free until January 2016 given that you are in the terminal patchset (11.2.0.4). So either you don&#8217;t want to be in the latestet release and you will have to upgrade to 11.2.0.4 before the end of the year, waiting for 12.2 maybe in 2016. Or you want those new features and will probably go to 12.1.0.2 for 2015.</p>
<p>Talking about upgrade, there&#8217;s a bad news. We thought that multitenancy can accelarate upgrade time. Because the data dictionary is shared, you just have to plug a PDB into a newer version CDB and it&#8217;s upgraded. And we show that in our <a href="http://www.dbi-services.com/index.php/products/dbi-insite-workshops/oracle-12c-new-features-workshop">12c new features workshop</a> by applying a PSU. But we have tested the upgrade to 12.1.0.2 in the same way, and it&#8217;s not that simple. Plugging is quick when you have only new patches that did not change the dictionary. It&#8217;s still true for PSU when the dictionary changes are limited to the root container. But when you upgrade to 12.1.0.2 you have to synchronize all the PDB dictionaries (all that magic behind <a href="http://www.dbi-services.com/index.php/blog/entry/oracle-12c-cdb-metadata-a-object-links-internals">object links and metadata links</a>) and that takes time. It takes the same time as upgrading a non-CDB. Conclusion: you don&#8217;t save time when you do it by plug/unplug.</p>
<p>But I have good news as well for that because I&#8217;ve tested a 1 minute downtime migration from 12.1.0.1 to 12.1.0.2. Dbvisit replicate, the affordable replication solution, supports multitenant in it&#8217;s latest version, both as source and target. If your application is compatible (which is easy to check with the 30 days trial) then it&#8217;s a good way to migrate without stress and with minimal downtime. It&#8217;s available for Standard Edition as well, but currently the 12.1.0.2 download can install only an Enterprise Edition.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-1200"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
