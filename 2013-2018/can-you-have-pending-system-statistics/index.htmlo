This was first published on <a href=https://blog.dbi-services.com/can-you-have-pending-system-statistics>https://blog.dbi-services.com/can-you-have-pending-system-statistics</a> (2015-06-12)
								<h1 class="entry-title">Can you have pending system statistics?</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Your system statistics seems to be wrong and you want to gather or set more relevant ones. But you don&#8217;t want to see all your application execution plans changing between nested loops and hash joins. For object statistics, we can gather statistics in a pending mode, test them in a few sessions, and publish them when we are ok with them. But for system statistics, can you do the same? It can be risky to try it, so I&#8217;ve done it for you in my lab.</p>
<h3>Test case in 11g</h3>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select banner from v$version where rownum=1;

BANNER
--------------------------------------------------------------------------------
Oracle Database 11g Enterprise Edition Release 11.2.0.2.0 - Production

SQL&gt; create table DEMO as
           select rownum id , ora_hash(rownum,10) a , ora_hash(rownum,10) b , lpad('x',650,'x') c 
           from xmltable('1 to 100000');

Table created.

</pre>
<p>Here are my system statistics:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select '' savtime,sname,pname,pval1,pval2 from sys.aux_stats$ where pval1 is not null or pval2
is not null order by 1,2 desc,3;

SAVTIME              SNAME            PNAME           PVAL1 PVAL2
-------------------- ---------------- ---------- ---------- --------------------
                     SYSSTATS_MAIN    CPUSPEEDNW       2719
                     SYSSTATS_MAIN    IOSEEKTIM          10
                     SYSSTATS_MAIN    IOTFRSPEED       4096
                     SYSSTATS_INFO    DSTART                06-10-2015 08:11
                     SYSSTATS_INFO    DSTOP                 06-10-2015 08:11
                     SYSSTATS_INFO    FLAGS               0
                     SYSSTATS_INFO    STATUS                COMPLETED

</pre>
<p>I check a full table scan cost:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set autotrace trace explain
SQL&gt; select * from DEMO DEMO1;

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 88550 |    30M|  2752   (1)| 00:00:34 |
|   1 |  TABLE ACCESS FULL| DEMO | 88550 |    30M|  2752   (1)| 00:00:34 |
--------------------------------------------------------------------------

</pre>
<p>No surprise here. I&#8217;ve 10000 blocks in my tables, SREATDIM= IOSEEKTIM + db_block_size / IOTFRSPEED= 12 ms and MREADTIM= IOSEEKTIM + db_block_size * MBRC / IOTFRSPEED = 26 ms. Then the cost based on a MBRC of 8 is ( 26 * 10000 / 8 ) / 12 = 2700</p>
<p>&nbsp;</p>
<h3>Pending stats in 11g</h3>
<p>I set &#8216;PUBLISH&#8217; to false in order to have pending statistics:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; exec dbms_stats.SET_GLOBAL_PREFS('PUBLISH', 'FALSE') ;

PL/SQL procedure successfully completed.

</pre>
<p>Then I set some system statistics manually to simulate a fast storage:</p>
<pre class="brush: sql; gutter: true; first-line: 1">17:14:38 SQL&gt; exec dbms_stats.set_system_stats('IOSEEKTIM',1);

PL/SQL procedure successfully completed.

17:14:38 SQL&gt; exec dbms_stats.set_system_stats('IOTFRSPEED','204800');

PL/SQL procedure successfully completed.</pre>
<p>and I run the same explain plan:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 88550 |    30M|  1643   (2)| 00:00:02 |
|   1 |  TABLE ACCESS FULL| DEMO | 88550 |    30M|  1643   (2)| 00:00:02 |
--------------------------------------------------------------------------

</pre>
<p>The cost is better. I&#8217;m not using pending statistics, which means that the published stats have been changed &#8211; despie the PUBLISH global preference set to FALSE:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select '' savtime,sname,pname,pval1,pval2 from sys.aux_stats$ where pval1 is not null or pval2 i
s not null order by 1,2 desc,3;

SAVTIME              SNAME            PNAME           PVAL1 PVAL2
-------------------- ---------------- ---------- ---------- --------------------
                     SYSSTATS_MAIN    CPUSPEEDNW       2719
                     SYSSTATS_MAIN    IOSEEKTIM 1
                     SYSSTATS_MAIN    IOTFRSPEED 204800
                     SYSSTATS_INFO    DSTART                06-10-2015 08:14
                     SYSSTATS_INFO    DSTOP                 06-10-2015 08:14
                     SYSSTATS_INFO    FLAGS               1
                     SYSSTATS_INFO    STATUS                COMPLETED

</pre>
<p>As you see, the SYS.AUX_STATS$ show my modified values (note that the date/time did not change by the way). So be careful, when you set or gather or delete system statistics in 11g you don&#8217;t have the pending/publish mechanism. It&#8217;s the kind of change that may have a wide impact changing all your execution plans.</p>
<p>&nbsp;</p>
<p>With the values I&#8217;ve set the SREADTIM is near 1 ms and MREADTIM is about 1.3 ms so the cost is ( 1.3 * 10000 / 8 ) / 1 = 1625 which is roughly what has been calculated by the CBO on my new not-so-pending statistics.</p>
<h3>12c</h3>
<p>If you look at 12c you will see new procedures in dbms_stats which suggest that you can have pending system statistics:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select banner from v$version where rownum=1;

BANNER
--------------------------------------------------------------------------------
Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production

SQL&gt; select procedure_name from dba_procedures where object_name='DBMS_STATS' and procedure_name like '%PENDIN
G_SYSTEM_STATS';

PROCEDURE_NAME
--------------------------------------------
DELETE_PENDING_SYSTEM_STATS
EXPORT_PENDING_SYSTEM_STATS
PUBLISH_PENDING_SYSTEM_STATS
</pre>
<p>but be careful, they are not documented. Let&#8217;s try it anyway. I start as I did above, with a demo table and default statistics:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select '' savtime,sname,pname,pval1,pval2 from sys.aux_stats$ where pval1 is not null or pval2 is not nul
l order by 1,2 desc,3;

SAVTIME              SNAME            PNAME           PVAL1 PVAL2
-------------------- ---------------- ---------- ---------- --------------------
                     SYSSTATS_MAIN    CPUSPEEDNW       2725
                     SYSSTATS_MAIN    IOSEEKTIM          10
                     SYSSTATS_MAIN    IOTFRSPEED       4096
                     SYSSTATS_INFO    DSTART                06-10-2015 17:25
                     SYSSTATS_INFO    DSTOP                 06-10-2015 17:25
                     SYSSTATS_INFO    FLAGS               0
                     SYSSTATS_INFO    STATUS                COMPLETED

SQL&gt; set autotrace trace explain
SQL&gt; select * from DEMO DEMO1;

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 80500 |    28M|  2752   (1)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| DEMO | 80500 |    28M|  2752   (1)| 00:00:01 |
--------------------------------------------------------------------------

</pre>
<p>I set PUBLISH to false and set manual system stats:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; exec dbms_stats.SET_GLOBAL_PREFS('PUBLISH', 'FALSE') ;

PL/SQL procedure successfully completed.

SQL&gt; exec dbms_stats.set_system_stats('IOSEEKTIM',1);

PL/SQL procedure successfully completed.

SQL&gt; exec dbms_stats.set_system_stats('IOTFRSPEED','204800');

PL/SQL procedure successfully completed.

</pre>
<p>and I check the SYS.AUX_STATS$ table:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select '' savtime,sname,pname,pval1,pval2 from sys.aux_stats$ where pval1 is not null or pval2 is not nul
l order by 1,2 desc,3;

SAVTIME              SNAME            PNAME           PVAL1 PVAL2
-------------------- ---------------- ---------- ---------- --------------------
                     SYSSTATS_MAIN    CPUSPEEDNW       2725
                     SYSSTATS_MAIN    IOSEEKTIM          10
                     SYSSTATS_MAIN    IOTFRSPEED       4096
                     SYSSTATS_INFO    DSTART                06-10-2015 17:25
                     SYSSTATS_INFO    DSTOP                 06-10-2015 17:25
                     SYSSTATS_INFO    FLAGS               0
                     SYSSTATS_INFO    STATUS                COMPLETED

</pre>
<p>Good ! I still have the previous values here. The new stats have not been published.</p>
<p>&nbsp;</p>
<p>The pending stats are stored in the history table, with a date in the future:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select savtime,sname,pname,pval1,pval2 from sys.wri$_optstat_aux_history where pval1 is not null or pval2
 is not null and savtime&gt;sysdate-30/24/60/60 order by 1,2 desc,3;

SAVTIME              SNAME            PNAME           PVAL1 PVAL2
-------------------- ---------------- ---------- ---------- --------------------
01-dec-3000 01:00:00 SYSSTATS_MAIN    CPUSPEEDNW       2725
01-dec-3000 01:00:00 SYSSTATS_MAIN IOSEEKTIM 10
01-dec-3000 01:00:00 SYSSTATS_MAIN IOTFRSPEED 204800
01-dec-3000 01:00:00 SYSSTATS_INFO    DSTART                06-10-2015 17:29
01-dec-3000 01:00:00 SYSSTATS_INFO    DSTOP                 06-10-2015 17:29
01-dec-3000 01:00:00 SYSSTATS_INFO    FLAGS               1
01-dec-3000 01:00:00 SYSSTATS_INFO    STATUS                COMPLETED

</pre>
<p>That&#8217;s perfect. It seems that I can gather system statistics without publishing them. And I don&#8217;t care about the Y3K bug yet.</p>
<p>&nbsp;</p>
<h3>12c use pending stats = true</h3>
<p>First, I&#8217;ll check that a session can use the pending stats if chosen explicitly:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; alter session set optimizer_use_pending_statistics=true;

Session altered.

</pre>
<p>the I run the query:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set autotrace trace explain
SQL&gt; select * from DEMO DEMO2;

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 80500 |    28M|  1308   (1)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| DEMO | 80500 |    28M|  1308   (1)| 00:00:01 |
--------------------------------------------------------------------------

</pre>
<p>Cost is lower. This is exacly what I expected with my new &#8211; unpublished &#8211; statistics. Good. I don&#8217;t know what it&#8217;s lower than in 11g. Maybe the formula has changed. This is another place for comments <img src="../wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /></p>
<p>&nbsp;</p>
<h3>12c use pending stats = false</h3>
<p>Ok I checked that the published statistics are the same as before, but let&#8217;s try to use them:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; alter session set optimizer_use_pending_statistics=false;

Session altered.

</pre>
<p>and once again run the same query:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set autotrace trace explain

SQL&gt; select * from DEMO DEMO3;

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

----------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost  |
----------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 80500 |    28M|  1541 |
|   1 |  TABLE ACCESS FULL| DEMO | 80500 |    28M|  1541 |
----------------------------------------------------------

Note
-----
   - cpu costing is off (consider enabling it)

</pre>
<p>Oh. There is a problem here. &#8216;cpu costing is off&#8217; means that there are no system statistics. The cost has been calculated as it were in old versions whithout system statistics. This is bad. I have gathered pending statistics, not published, but all sessions have their costing changed now.</p>
<p>&nbsp;</p>
<h3>10053</h3>
<p>Just a look at the 10053 trace show that I have a problem:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">-----------------------------
SYSTEM STATISTICS INFORMATION
-----------------------------
System Stats are INVALID.
...
  Table: DEMO  Alias: DEMO3
    Card: Original: 80500.000000  Rounded: 80500  Computed: 80500.000000  Non Adjusted: 80500.000000
  Scan IO  Cost (Disk) =   1541.000000
  Scan CPU Cost (Disk) =   0.000000
  Total Scan IO  Cost  =   1541.000000 (scan (Disk))
                       =   1541.000000
  Total Scan CPU  Cost =   0.000000 (scan (Disk))
                       =   0.000000
  Access Path: TableScan
    Cost:  1541.000000  Resp: 1541.000000  Degree: 0
      Cost_io: 1541.000000  Cost_cpu: 0
      Resp_io: 1541.000000  Resp_cpu: 0
  Best:: AccessPath: TableScan
         Cost: 1541.000000  Degree: 1  Resp: 1541.000000  Card: 80500.000000  Bytes: 0.000000

</pre>
<p>It seems that with pending statistics the optimizer can&#8217;t simply get the published values, and falls back as if there were no system statistics. This is a bug obviously. I&#8217;ve not used the undocumented new functions. They were used in the background, but it&#8217;s totally supported to set PUBLISH to FALSE and the gather system statistics. The behavior should be either the same as in 11g &#8211; publishing the gathered stats &#8211; or gathering into pending stats only and session continue to use the published ones by default.</p>
<p>&nbsp;</p>
<h3>Conclusion</h3>
<p>In 11g, be careful, system statistic changes are always published.</p>
<p>In 12c, don&#8217;t gather system statistics when PUBLISH is set to false. We can expect that nice new feature in further versions, but for the moment it messes up everything. I&#8217;ll not open an SR yet but hope it&#8217;ll be fixed in future versions.</p>
<h3>update</h3>
<p>Further investigations done by Stefan Koehler on this twitter conversation:</p>
<blockquote class="twitter-tweet" data-width="550"><p lang="en" dir="ltr">My latest blog post is about pending system statistics. <a href="https://t.co/yJ0NSfmS6g">https://t.co/yJ0NSfmS6g</a></p>
<p>&mdash; Franck Pachot (@FranckPachot) <a href="https://twitter.com/FranckPachot/status/608727297672228864">June 10, 2015</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>&nbsp;</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-23720"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1512">
				<div id="div-comment-1512" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1512">
			June 26, 2015 at 11 h 59 min</a>		</div>

		<p>I&#8217;ve opened a SR for that and, thanks to the kind support engineer who reproduced the issue, A bug has been opened:
Bug 21326597 : 12C PENDING SYSTEM STATS ARE NOT BEHAVING AS EXPECTED.
One more reason I blog: it&#8217;s easier to post the tstcase on a blog and link to it from MOS as MOS do not have monospaced fonts.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-15131"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1512' onclick='return addComment.moveForm( "div-comment-1512", "1512", "respond", "2371" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
