This was first published on <a href=https://blog.dbi-services.com/database-cloud-service-performance-network>https://blog.dbi-services.com/database-cloud-service-performance-network</a> (2015-09-13)
								<h1 class="entry-title">DataBase Cloud Service performance – Network</h1>
		<div class="content-inner">
			
						
						
		   
			<p>In previous posts, I&#8217;ve installed <a href="http://blog.dbi-services.com/slob-in-the-cloud-how-to-check-cloud-services-performance/" title="SLOB in the Cloud: how to check Cloud Services performance">SLOB on the Cloud Services</a>, measured <a href="http://blog.dbi-services.com/database-cloud-service-performance-iops/" title="DataBase Cloud Service performance – IOPS">IOPS</a> and <a href="http://blog.dbi-services.com/database-cloud-service-performance-cpu/" title="DataBase Cloud Service performance – CPU">CPU</a>.
There&#8217;s another resource that is even more important in a cloud environment: network.
<span id="more-3785"></span></p>
<h1>Tuneling port 1521 over ssh</h1>
<p>I&#8217;ve create a virtual instance by default where only ssh is opened:
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/09/CaptureCloudNetwork.jpg" rel="lightbox[3785]"><img src="../wp-insides/uploads/sites/2/2015/09/CaptureCloudNetwork.jpg" alt="CaptureCloudNetwork" width="1012" height="385" class="alignnone size-full wp-image-3786" /></a>
I don&#8217;t want to open other port, so I&#8217;m using it with ssh tunneling. Let&#8217;s see how to tunnel port 1521:
<pre>
ssh -i ~/.ssh/cloud-fr/id_rsa -L9011:localhost:1521 140.86.3.101
</pre>
This connects to my VM on the cloud and forwards the port 1521 (my listener port on that VM) to my local host (my laptop) port 9011.
Which mean that I can connect to my database from my laptop:
<pre>
$ tnsping //localhost:9011

TNS Ping Utility for 64-bit Windows: Version 12.1.0.1.0 - Production on 12-SEP-2015 17:34:44

Copyright (c) 1997, 2013, Oracle.  All rights reserved.

Used parameter files:
F:\ora\product\12.1.0\client_1\network\admin\sqlnet.ora

Used HOSTNAME adapter to resolve the alias
Attempting to contact (DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=))(ADDRESS=(PROTOCOL=TCP)(HOST=127.0.0.1)(PORT=9011)))
OK (90 msec)
</pre>
Note that the time to ping is 90 milliseconds here. I&#8217;m in Switzerland and I&#8217;m connecting to the European cloud (in Amsterdam).
If I do the same to the US cloud I have to cross the Atlantic:
<pre>
Attempting to contact (DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=))(ADDRESS=(PROTOCOL=TCP)(HOST=127.0.0.1)(PORT=9061)))
OK (240 msec)
</pre>
But we will see that later.</p>
<p>I don&#8217;t want to type the above ssh line everytime I want to connect to the cloud, so I use put the following in my ~/.ssh/config file:
<pre>
Host test-cloud-fr
        HostName 140.86.3.101
        Port 22
        User oracle
        IdentityFile    ~/.ssh/cloud-fr/id_rsa
        LocalForward    9011 test-perf:1521
        LocalForward    9012 test-perf:5500
</pre>
Then a simple &#8216;ssh test-cloud-fr&#8217; will connect the the right IP address, with the oracle user, using the right rsa private key and forwarding the listener and the EM express ports.</p>
<p>If you connect with SQL Developer, you don&#8217;t need to do that. Check Jeff Smith blog about <a href="http://www.thatjeffsmith.com/archive/2015/07/connecting-to-the-oracle-cloud-database-as-a-service-dbaas/trackback">Connecting to the Oracle Cloud</a>.</p>
<h1>Latency</h1>
<p>If you put your database in the cloud, you will put the application server there as well.
But if you are in client/server with the client on your desktop, or if you are a developer and connect from your PC, then latency can be a concern.
Here I&#8217;m selecting 90000 rows from the European cloud (the one with a 90 ms latency) to my local sqlplus:
<pre>
SQL&gt; set time on timing on autotrace trace stat
09:07:25 SQL&gt; select * from dba_objects;

91718 rows selected.

Elapsed: 00:05:15.72

Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
      13000  consistent gets
          0  physical reads
          0  redo size
    4439199  bytes sent via SQL*Net to client
      67754  bytes received via SQL*Net from client
       6116  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
      91718  rows processed

09:12:46 SQL&gt;
</pre>
5 minutes is a lot, but that can be improved a lot. SQL Plus default fetchsize is 15 which is very low. This is why there are 6116 roundtrips (=91718/15) and it takes on average 51 ms per roundtip.
But if we increase the fetchsize:
<pre>
09:12:46 SQL&gt; set arraysize 5000
09:12:54 SQL&gt; /

91718 rows selected.

Elapsed: 00:00:07.01

Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
       6991  consistent gets
          0  physical reads
          0  redo size
    3870546  bytes sent via SQL*Net to client
        698  bytes received via SQL*Net from client
         20  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
      91718  rows processed

09:13:04 SQL&gt;
</pre>
Now getting 100000 rows in 7 seconds is correct.
Remember that all default fetchsize (SQL Plus, jdbc, hibernate, etc) are too low.
It is even more important with remote databases over WAN, such databases in the cloud.</p>
<h1>Latency under the Atlantic</h1>
<p>I have run a tnsping from US cloud to EU cloud every second during one week, and the same in the opposite way. Here is the result:</p>
<table>
<tr>
<td>
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/09/CaptureLatency2.jpg" rel="lightbox[3785]"><img src="../wp-insides/uploads/sites/2/2015/09/CaptureLatency2-300x207.jpg" alt="CaptureLatency2" width="300" height="207" class="alignnone size-medium wp-image-3791" /></a>
</td>
<td>
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/09/CaptureLatency1.jpg" rel="lightbox[3785]"><img src="../wp-insides/uploads/sites/2/2015/09/CaptureLatency1-300x206.jpg" alt="CaptureLatency1" width="300" height="206" class="alignnone size-medium wp-image-3792" /></a></p>
<tr>
</table>
<p>The latency is quite stable around 170 and 180 milliseconds. Rarely over 200ms.
Here are the only 3 peaks observed during that week:
<pre>
Mon Sep  7 15:15:01 EDT 2015 US-&gt;FR OK (1880 msec)
Fri Sep 11 15:00:18 EDT 2015 US-&gt;FR OK (410 msec)
Wed Sep  9 19:00:16 EDT 2015 EU-&gt;US OK (530 msec)
</pre></p>
<p>If it stays like that, the latency is acceptable for a DataGuard in ASYNC.
Oracle will provide Data Guard service, but if you want to put a Data Guard between US and EU it&#8217;s possible in maximum performance.</p>
<h1>Bandwith under the Atlantic</h1>
<p>Finally, here is a small test to measure the bandwidth between the European Cloud Services and the US one
I copy a big file with scp:
<pre>
[oracle@test-cloud-us ~]$ scp test-cloud-fr:/u02/IOPS.dbf /dev/null
IOPS.dbf                            6% 5004MB   8.0MB/s 2:27:59 ETA
</pre>
8MB/s. Here doing the same but with compression:
<pre>
[oracle@test-cloud-us ~]$ scp -C test-cloud-fr:/u02/IOPS.dbf /dev/null
IOPS.dbf                            7% 5564MB  17.4MB/s 1:08:02 ETA
</pre>
But this is only to give an idea.</p>
<h1>So what?</h1>
<p>The DBaaS is just a remote database. Latency is always something to consider: avoid to do unnecessary roundtrips when fetching data.
When you will consider to move your databases to the cloud, you will have to think about how to transfer it. There are several options to consider to minimize downtime: Physical replication (Data Guard or Dbvisit standby), Logical replication (Golden Gate or Dbvisit replicate), data virtualization (Delphix), etc.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-37860" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/09/CaptureCloudNetwork.jpg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
