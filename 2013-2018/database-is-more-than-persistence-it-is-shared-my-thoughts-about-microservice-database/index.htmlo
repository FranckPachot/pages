This was first published on <a href=https://blog.dbi-services.com/database-is-more-than-persistence-it-is-shared-my-thoughts-about-microservice-database>https://blog.dbi-services.com/database-is-more-than-persistence-it-is-shared-my-thoughts-about-microservice-database</a> (2017-10-22)
								<h1 class="entry-title">Database is more than persistence. It is shared. My thoughts about Microservice Database.</h1>
		<div class="content-inner">
			
						
						
		   
			<p>The development teams often see the database as a &#8216;persistence layer&#8217; only. And sometimes it is mentioned that the database is always the cause of the problems, especially when implementing continuous integration and trying to be agile. Then cames the idea to have this &#8216;persistence layer&#8217; in an isolated environment, such as a docker container, with the database for each developer. However, this overlooks the real cause of the problems, which is not the persistence function of the database, but the fact that it is shared. And when you share something, in a multi-user environment, you reach another level of complexity. And if you are not prepared for that, you perceive it as a problem.</p>
<p>This philosophical blog post contains some cool words which, in my opinion, must be carefully considered when dealing database: agile, persistence, stateless, docker, microservices, stateless, NoSQL, containers, lake, cloud,&#8230;</p>
<p><span id="more-19170"></span>
When I hear about &#8216;persistence layer&#8217; it always reminds me a meeting a few years ago where the architects of a new application draw on the whiteboard something that they could have called microservices a few years later. Dedicated web services reading data, processing it, and writing the result to the &#8216;persistence layer&#8217;. And when the data was only a transient interface between two of those services, they&#8217;ve written &#8216;temporary persistence&#8217; on the whiteboard diagram. When you come with two antonyms to define something, there is probably something wrong in the design. </p>
<h3>Commitment</h3>
<p>In order to understand what&#8217;s beyond persistence, you should think about what happens when you:
<pre>SQL&gt; commit work;
Commit complete.</pre></p>
<p>First, the commit statement closes a transaction that has been started by the first DML. That&#8217;s the first purpose of a database management system: process transactions. This is already something that is not very clear for some development architects. They came with stateless services, just because thinking about transactions is not easy when there is no one-to-one relationship between the database session and the end-user (as in client/server on dedicated terminal). So they designed stateless services. Then they encountered issues such as lost updates as soon as they had more than one user. And then implemented optimistic locking in their application server, not always in the right layer. I recommend <a href="https://www.youtube.com/watch?v=onYjxRcToto" target="_blank">this talk from Vlad Mihalcea</a> about transactions.</p>
<p>Second, the commit statement ensures that changes are persistent and durable. The changes are written to disk, to backups, and to standby databases. This could be as simple as a write call, but is a bit more complex for performance reasons: random writes done on cache, written to disk asynchronously, redo transaction log written sequentially, synced on commit. Here, the developer do not need to care about the underlying mechanisms, beyond just trying to change only what is needed and commit only when needed.</p>
<p>Third, the commit marks the changes as publicly visible. Because the data is shared among multiple users. This is why developing and testing on your own personal database is limited to unit tests. As soon as you have to work on implementing a real use-case, you must work on a database shared by different services. I have seen enterprises going early on agile Database as a Service for agile development where each developer was working on his own copy (thin clone) of the database. They are now asking for common environments where multiple developers can work and test their different part of the application. Back to this pre-agile idea, and back to the same problem: the database is shared. </p>
<p>Finally, I think that some developers like to see the database as only a &#8216;persistence layer&#8217; just because it is easier. You can be lazy and let the database system and the database administrators manage the durability of the data. The non-optimal performance will be compensated by software and hardware. And ignoring the two other properties of a database system is just walking away from the complexity. NoSQL to ignore transactions and consistencies, and containers to ignore the sharing concern.</p>
<h3>Impedance Mismatch</h3>
<p>This is not new. &#8216;Object Oriented&#8217; was the buzzword before &#8216;buzzword&#8217; itself was a buzzword. And OO development was ok until it had to manipulate data from the database. They called &#8216;impedance mismatch&#8217; the problems encountered when trying to match the object-oriented model with the relational model. And they built frameworks to do this matching as if it were simple, such as matching the Object Identity concept with the Primary Key concept. And my experience is that this was nice to build good Proof or Concepts, but failed in production on consistency, performance, and scalability. Object Oriented development is good for non-shared transient objects. A GUI is based on objects, such as a window or a text field, where the object identity is the address in memory. If you restart the application, it is another object, with different address memory. And the GUI on your colleague computer is again another object. It is not persistent but transient. And it is not shared but all different. Applying this model to data doesn&#8217;t work. You can simulate persistency with an Object-Relational mapping (ORM) but sharing will be a problem. Those ORM usually work on proxy cached objects in the application server, trying to re-invent the management of concurrent changes, without using the database system which is built for that.</p>
<h3>RDBMS</h3>
<p>The current shift from &#8216;database technology&#8217; to &#8216;developer community&#8217; is probably a good idea, but only if we do not do the same errors such as using the database as a black box to persist objects. We must keep in mind the reasons why Relational Database Management Systems were built for.</p>
<p>Before RDBMS, data was modeled hierarchically. This was good for performance (because data is clustered) but was good for only one use-case. Other use-cases had to replicate the data into another physical design. The relational modeling stores data in a way it can be used by all use-cases. For example, You can look at the orders from one customer, or for the orders on one product. The business entities are in different tables and are joined dynamically when queried. This is a data point of view. The developer builds something different because the developer works on one use-case. This was the trend for XML a few years ago, and JSON now, bringing back the hierarchical model that failed decades ago. Very good to work on your use-case, but very bad when data is shared with other use cases. You have good Proof of Concept and good unit test. But integration will be impossible. I think that we will see the same with microservices: each one designed for its own usage without thinking about other (including future) use-cases.</p>
<p>Before RDBMS, data definition was included in the code for each use-case. A COBOL program had a data division describing the structure of the data that will be accessed by the program. This was not good for shared databases because one structural change had to change all programs. And this is why the relational model was introduced with physical and logical independence. The logical model is designed for the application, and it is the common interface between the developers and the database administrators. Here again, I&#8217;ve seen some application architects going backward, using ORM mapping used in the same way the COBOL data division was used in the past.</p>
<h3>Microservice Database</h3>
<p>Today, developers are running their code in containers. This has the same properties as the OO development I described before: isolated and transient. Docker starts a few processes in its own image of the disk. This is perfect. But, like they did with OO, they try to bring this idea to the database. And that will fail again because, except in early stage of development, you need a database that is shared and persistent.</p>
<p>In my opinion, running the Oracle Database in a Docker container gives a wrong message to the developer community. A database involves a lot of resources and is highly coupled with the OS. My lab databases on my laptop are VirtualBox VMs. Easy to build, easy to start, and easy to share. I&#8217;ve tested database on docker 3 years ago to see how we can build data virtualization, and thin clones for development, with a standby database on Docker. I&#8217;ve written <a href="https://www.doag.org/formes/pubfiles/6939790/docs/Publikationen/DOAGNews/2015/03-2015/2015-03-News-Franck_Pachot-Data-virtualization-playing-with-Oracle-12c-on-Docker-containers-E.pdf" target="_blank">an article about that for DOAG</a>. The technology has evolved but I think that it is not a good idea except for the fun of trying something new.</p>
<p>Today, we have containers on the database itself, with multitenant pluggable databases and application containers. You can provision a pluggable database for each docker container running the application. And you have easy ways to copy, clone, refresh or have common data. This is ok for development.</p>
<p>Application containers have been introduced for SaaS: each application tenant has its own pluggable database. The data in the PDB is still shared by all application use-cases, and metadata (and some reference tables) is shared in application root by several applications.</p>
<p>However, we also see in 12<i>c</i>R2, and probably more in 18<i>c</i>, some cross-PDB DML which allows queries and modification among several pluggable databases. It is not yet stable, using database links for modifications (see <a href="../12cr2-cross-container-dml-insert-into-container/index.html" target="_blank">here</a>). But I can imagine that it will be fixed in 18<i>c</i> or later being able to update different PDBs within the same transaction.</p>
<p>And then, I foresee how this will be perceived by some developer architects (those ignoring that the database must be shared). They will build microservices, with small application servers running in a Docker container. And they will map one PDB for each service, doing something like a Microservice Database. Some will store data in XML, others in JSON, and some in relational tables. All those will be consolidated into a multi-tenant database to be managed easily. And my fear is that we will see a large bowl of spaghetti to exchange data between those Microservice PDBs using database links, common views, cross-PDB DML, and maybe some logical replication.</p>
<p>In my opinion, microservices can be an interesting design for future applications, but trying to map the same idea to the database will be a failure if developers don&#8217;t realize that the database is not there only to persist data but also to share it. But that&#8217;s just my own current opinion and I&#8217;ve no idea about the future. Maybe all this data modified by microservices will be shared in real time in a big Data Lake universally available on the cloud, and all IT problems about concurrency and latency will be solved.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-191710"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 4 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-9043">
				<div id="div-comment-9043" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/35802a7d1a816f8f27aa12550ea5dfa2?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">thierry gascard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-9043">
			October 23, 2017 at 9 h 02 min</a>		</div>

		<p>Hello Franck,
I full agree. So nice and clever, thank you for this nice post.
Have a good day
Thierry
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-90441"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-9043' onclick='return addComment.moveForm( "div-comment-9043", "9043", "respond", "19170" )' aria-label='Reply to thierry to thierry gascard'>Reply to thierry</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-9060">
				<div id="div-comment-9060" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/a2a19e1fb1fdd173d1a39b0e73390c09?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Foued</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-9060">
			October 24, 2017 at 17 h 38 min</a>		</div>

		<p>Thank you for sharing those thoughts.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-90611"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-9060' onclick='return addComment.moveForm( "div-comment-9060", "9060", "respond", "19170" )' aria-label='Reply to Foued to Foued'>Reply to Foued</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-9069">
				<div id="div-comment-9069" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/16a53f75bfba95f9de98919bb5ad4cf5?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://stevenfeuersteinonplsql.blogspot.com' rel='external nofollow' class='url'>Steven Feuerstein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-9069">
			October 25, 2017 at 13 h 40 min</a>		</div>

		<p>I very much enjoyed this post. Especially the way you laid out the implications of commit, which we probably don&#8217;t think about very often.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-90701"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-9069' onclick='return addComment.moveForm( "div-comment-9069", "9069", "respond", "19170" )' aria-label='Reply to Steven to Steven Feuerstein'>Reply to Steven</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-9071">
				<div id="div-comment-9071" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/ba77413ffe0bb48d9da467d649464a6c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.oracle.com' rel='external nofollow' class='url'>Thomas Teske</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-9071">
			October 25, 2017 at 15 h 01 min</a>		</div>

		<p>Dear Franck,</p>
<p>I remember such discussions &#8211; they are very much a reality of the last 20 years. I&#8217;d like to draw the discussion into yet another direction.</p>
<p>We should ask, why micro-services and continuous deployment are in strong demand. One might go as far as saying: these are required because it can be done. So lets describe, what the benefit is. Micro-services allow a short development-cycle. Complexity is low and you can deploy fast because automation kicks in. That is a great advantage over a patch or upgrade of a legacy application, which is monolithic.</p>
<p>Continuous deployment and containers provide some simple and powerful idea: automation and elasticity. Code is running on a platform having features that were unheard until now. Elasticity means here: grow and shrink as per rules that are defined. That is the catch: you somehow need to define them. Do you? In a perfect world you don&#8217;t describe more than a scetch of an SLA and everything runs without human intervention.</p>
<p>What is the trouble: although many software vendors provide functionality to support elasticity: they all do it in a proprietary way. That hurts a lot. You love having a simple REST interface to say &#8220;scale yourself up Scottie the limit is 100 instances or 100 USD cost per hour&#8221;.</p>
<p>Back to reality: RDBMS can scale a lot because people started thinking about sharing. If that is not embraced, than the scalability is somewhat limited.</p>
<p>RDBMS provide to place code very close to data. That is a BIG thing, that for example SAP R/3 had missed. Now we&#8217;ve got DATA SERVICES &#8211; guess why? Efficiency and abstraction. So this makes perfect sense to one of the most respected application vendors. No think again: why does Oracle work on #MLE? Check out: Oracle Multilingual Engine at <a href="http://www.oracle.com/technetwork/database/multilingual-engine/documentation/index.html" rel="nofollow">http://www.oracle.com/technetwork/database/multilingual-engine/documentation/index.html</a> we&#8217;ve got good reasons to believe that this is yet another great idea.
Why: it offers choice. Architects and developers seeks choice. Another example for this: hardware and software being co-engineered &#8211; its about efficiency and significantly better chances to be truly elastic.</p>
<p>Closing remark: any development team thinking of &#8220;transient&#8221; data is welcome to check the advantages of a RDBMS being fed by data. it does not hurt at all having the data although it has been initially transient only. It provides flexibility and to change data management rules later on without risking anything. That is true developer freedom. Use it wisely!
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-90721"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-9071' onclick='return addComment.moveForm( "div-comment-9071", "9071", "respond", "19170" )' aria-label='Reply to Thomas to Thomas Teske'>Reply to Thomas</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
