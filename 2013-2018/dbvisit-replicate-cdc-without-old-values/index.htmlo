This was first published on <a href=https://blog.dbi-services.com/dbvisit-replicate-cdc-without-old-values>https://blog.dbi-services.com/dbvisit-replicate-cdc-without-old-values</a> (2015-10-07)
								<h1 class="entry-title">Dbvisit replicate CDC without old values</h1>
		<div class="content-inner">
			
						
						
		   
			<p>In a previous <a href="http://blog.dbi-services.com/oracle-cdc-for-datawarehouse-dbvisit-replicate-as-an-alternative/">post</a> I presented how Dbvisit replicate can capture changes and write them in an audit table with old and new values.
Here is how to do it we you want only the new values &#8211; with same column names.
<span id="more-4256"></span>
What I want to get here is a table with:</p>
<ul>
<li>same column names as source</li>
<li>they will contain new values for inserts and update, and old value for delete</li>
<li>additional column names for operation, timestamp, and SCN</li>
</ul>
<p>Here is the part of the setup wizard where I set the new table name (DEMO is audited to DEMO$AUDIT) and declare that I don&#8217;t want old values for update:</p>
<p><pre>
Rename SCHEMA name for DEMO.DEMO (empty means no rename): [] DEMO

Rename TABLE name for DEMO.DEMO (empty means no rename): [] DEMO$AUDIT

Filter the data to be replicated? If yes, use single condition for ALL DML operations or use CUSTOM conditions for each operation? (NO/ALL/CUSTOM) [NO]

Configure change data capture for change auditing or real-time BI? (NO/YES) [NO] yes

Capture DELETE operations? (YES/NO) [YES]

Capture UPDATE operations - old values? (YES/NO) [YES] no

Capture UPDATE operations - new values? (YES/NO) [YES]

Capture INSERT operations? (YES/NO) [YES]
The columns at the target table can be called the same as on the source table, or they can be prefixed to indicate whether they contain old or new values.
Prefix for columns with OLD values: []

Prefix for columns with NEW values: []
Dbvisit Replicate can include additional information into the target table; this can be used to identify type of change, when it occurred, who initiated the change etc.

Add basic additional information about the changes? (SCN, time, operation type) (YES/NO) [YES]

Add more transactional information? (transaction id, commit time) (YES/NO) [NO]
</pre></p>
<p>I can choose the additional columns and name them (here prefixed with AUDIT$):</p>
<p><pre>
Add auditing columns? (login user, machine, OS user...) (YES/NO) [NO]
Setup wizard chose following default names for the columns; you can use them or choose own names. Note that empty answer confirms the proposed default; use "-" (minus) to remove the column from the CDC.
OPERATION: Operation code (U/I/D) (opcol)
SCN: SCN at source (scn)
DATE_CHANGE: Date and time of the change (timestamp_change)

Accept these settings? (YES/NO) [YES] no
&nbsp;                                                                                                                                                                                                                           Operation code (U/I/D) [OPERATION] AUDIT$OP
&nbsp;                                                                                                                                                                                                                           SCN at source [SCN] AUDIT$SCN
&nbsp;                                                                                                                                                                                                                           Date and time of the change [DATE_CHANGE] AUDIT$DATE
Setup wizard chose following default names for the columns; you can use them or choose own names. Note that empty answer confirms the proposed default; use "-" (minus) to remove the column from the CDC.
AUDIT$OP: Operation code (U/I/D) (opcol)
AUDIT$SCN: SCN at source (scn)
AUDIT$DATE: Date and time of the change (timestamp_change)
</pre></p>
<p>Now let&#8217;s do some SQL on the source table.</p>
<h3>SQLcl</h3>
<p>I connect with SQLcl because a new release is there and I want to test:
<pre>
SQLcl: Release 4.2.0.15.278.1216 RC on Tue Oct 06 23:11:11 2015

23:13:24 SQL&gt; set sqlformat ansiconsole
23:13:24 SQL&gt; alter session set nls_date_format='hh24:mi:ss';
</pre></p>
<h3>insert</h3>
<p>I do some insters and commit:
<pre>
23:14:30 SQL&gt; select * from DEMO;
23:14:33 SQL&gt; select * from DEMO$AUDIT;
23:14:33 SQL&gt; insert into DEMO values (1,'A');
1 row inserted.
23:14:39 SQL&gt; insert into DEMO values (2,'B');
1 row inserted.
23:15:48 SQL&gt; insert into DEMO values (3,'C');
1 row inserted.
23:15:48 SQL&gt; commit;
Commit complete.
</pre>
and check the replication from dbvrep console LIST PROGRESS:
<pre>
--------------------------------------------------------------------------------------------------------------------------------------------
DEMO.DEMO/DEMO.DEMO$AUDIT:    100%  Mine:3/3             Unrecov:0/0         Applied:3/3         Conflicts:0/0       Last:06/10/2015 23:15:52/OK
--------------------------------------------------------------------------------------------------------------------------------------------
</pre>
The 3 records are applied. Let&#8217;s check the audit table:
<pre>
23:16:44 SQL&gt; select * from DEMO$AUDIT;

<u>ID  TEXT  U  AUDIT$OP  AUDIT$DATE  AUDIT$SCN</u>
1   A        I         23:14:39    5956571
2   B        I         23:14:39    5956571
3   C        I         23:15:48    5957146
</pre>
I have the new values with the &#8216;I&#8217; operation code. You have the timestamp and SCN of the insert.</p>
<h3>update</h3>
<p><pre>
23:16:44 SQL&gt; update DEMO set text='a' where id=1;
1 row updated.
23:16:44 SQL&gt; commit;
Commit complete.
</pre></p>
<h3>delete</h3>
<p><pre>
23:17:48 SQL&gt; delete from DEMO where id=2;
1 row deleted.
23:17:48 SQL&gt; commit;
Commit complete.
</pre>
LIST PROGRESS
<pre>
--------------------------------------------------------------------------------------------------------------------------------------------
DEMO.DEMO/DEMO.DEMO$AUDIT:    100%  Mine:5/5             Unrecov:0/0         Applied:5/5         Conflicts:0/0       Last:06/10/2015 23:17:53/OK
--------------------------------------------------------------------------------------------------------------------------------------------
</pre>
And here is the audit table:
<pre>
23:19:13 SQL&gt; select * from DEMO$AUDIT;

<u>ID  TEXT  U  AUDIT$OP  AUDIT$DATE  AUDIT$SCN</u>
1   A        I         23:14:39    5956571
2   B        I         23:14:39    5956571
3   C        I         23:15:48    5957146
1   a        U         23:16:44    5957635
2   B        D         23:17:48    5958194
</pre>
All my operations are there. We logged all changes. </p>
<h3>truncate</h3>
<p>Finally I wanted to test a truncate. Knowing what is in the redo records, I don&#8217;t expect to see a &#8216;D&#8217; operation for each table rows. What I would like is a &#8216;T&#8217;runcate operation record, but this is not what we have:
<pre>
23:19:13 SQL&gt; truncate table DEMO;
Table DEMO truncated.
</pre>
LIST PROGRESS
<pre>
--------------------------------------------------------------------------------------------------------------------------------------------
DEMO.DEMO/DEMO.DEMO$AUDIT:    100%  Mine:5/5             Unrecov:0/0         Applied:5/5         Conflicts:0/0       Last:06/10/2015 23:17:53/OK
--------------------------------------------------------------------------------------------------------------------------------------------
</pre>
No new record here&#8230;</p>
<p><pre>
23:20:09 SQL&gt; select * from DEMO$AUDIT;

</pre></p>
<p>No rows! The truncate has not been audited but replicated as a truncate on the audit table.
I&#8217;ll check with Dbvisit support if it&#8217;s the expected feature or not. And will update this blog to let you know.</p>
<h3>Update Oct. 9, 2015</h3>
<p>It never takes too long with Dbvisit support, so here is the answer.
Because truncate is DDL, it is replicated as-is. But you can expect in future version to get something like the &#8216;T&#8217; operation as suggested here, so that truncates are tracked.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-42570"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
