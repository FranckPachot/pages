This was first published on <a href=https://blog.dbi-services.com/dbvisit-replicate-redoreadmethod>https://blog.dbi-services.com/dbvisit-replicate-redoreadmethod</a> (2015-04-09)
								<h1 class="entry-title">Dbvisit replicate REDO_READ_METHOD</h1>
		<div class="content-inner">
			
						
						
		   
			<p>A frequent question about replication is the overhead in the source, because in a lot of cases the source is production. Dbvisit replicate comes with the possibility to do the minimum on the source: only the FETCHER process is there to read de redo logs and sends it to the MINE process wich can be on another server.
But maybe even that &#8211; reading those critical online redo logs &#8211; is worrying you. That&#8217;s not a reason to avoid to do a PoC with the production as source. Let&#8217;s see how we can use the &#8216;archived logs only&#8217;.
When you don&#8217;t need real time replication &#8211; which reads redo from the online redo logs &#8211; you can configure Dbvisit replicate to read only the archived logs. This is for MINER, or for FETCHER when configured with that 3-tier architecture. Configuring FETCHER is as easy as replying &#8216;yes&#8217; to the setup wizard:</p>
<pre class="brush: sql; gutter: true; first-line: 1">Following databases are described:
1: ttorcl_src (Oracle)
2: ttorcl_trg (Oracle)
       Select source database: [1] 1
       Select target database: [2] 2
       Will DDL replication be enabled? [yes] yes
       Use fetcher to offload the mining to a different server? (yes/no) [no] yes</pre>
<p>and of course you will have one more process to configure:</p>
<pre class="brush: sql; gutter: true; first-line: 1">Following processes are defined:
1: FETCHER on ttorcl_src
  Host: source, SMTP: no, SNMP: no
2: MINE on ttorcl_src
  Host: target, SMTP: no, SNMP: no
3: APPLY on ttorcl_trg
  Host: target, SMTP: no, SNMP: no</pre>
<p>I&#8217;ve put the FETCHER on the source and the MINE and APPLY on the target.
By default this configuration will read the online redo logs, so let&#8217;s change that before starting the processes:</p>
<pre class="brush: sql; gutter: true; first-line: 1">dbvrep&gt; set REDO_READ_METHOD=ARCHONLY
Variable REDO_READ_METHOD set to ARCHONLY for process *.</pre>
<p>This is very simple. The setup wizard has setup all information about where the archived logs are, so we have nothing else to do here.
Let&#8217;s start the processes and see how it replicates:</p>
<p><a class="easyblog-thumb-preview" title="Capture001.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture001.JPG" rel="lightbox[611]"><img title="b2ap3_thumbnail_Capture001.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture001.JPG" alt="b2ap3_thumbnail_Capture001.JPG" /></a></p>
<p>The message is &#8216;FETCHER is running.&#8217; without anything else. Because FETCHER is doing only minimal job, it doesn&#8217;t read the redo in the archived logs and doesn&#8217;t display anything about the sequence# or SCN.
Of course we have a gap here: the last log switch occured at 06:01:33 and we are at 06:02:31 as seen in the swingbench pane. MINER is at sequence# 386 &#8211; which is the current one &#8211; but at SCN 0 which just means that it is waiting for that redo to come.
This is the configuration where the overhead on source is minimized. Of course it may be sufficient for your needs if you can live with a 5 or 10 minutes gap. You can parameter the maximum time between two switches but you probably don&#8217;t want to checkpoint too often.
Ok, now you want to test what is the overhead if you read online redo logs. It is very easy to do. Just try it and you will see. this is the goal of the post: show how to switch easily between two modes.
I set the READ_READ_METHOD back to REDOFIRST and then stop and restart the FETCHER:</p>
<pre class="brush: sql; gutter: true; first-line: 1">dbvrep&gt; set REDO_READ_METHOD=REDOFIRST
dbvrep&gt; ! shutdown FETCHER
dbvrep&gt; ! /u01/app/oracle/dbvrep_XE/dbvrep_XE-run-source.sh</pre>
<p><a class="easyblog-thumb-preview" title="Capture002_20150409-183358_1.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture002_20150409-183358_1.JPG" rel="lightbox[611]"><img title="b2ap3_thumbnail_Capture002_20150409-183358_1.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture002_20150409-183358_1.JPG" alt="b2ap3_thumbnail_Capture002_20150409-183358_1.JPG" /></a></p>
<p>What has changed here is that the FETCHER status on the top shows the current sequence# of the redo. Of course, it has to know the sequence in order to send the right redo to the MINE process.
But look at the MINE process: still at SCN 0 and I have a gap.
We need to restart the MINE process as well:</p>
<p><a class="easyblog-thumb-preview" title="Capture003_20150409-183407_1.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture003_20150409-183407_1.JPG" rel="lightbox[611]"><img title="b2ap3_thumbnail_Capture003_20150409-183407_1.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture003_20150409-183407_1.JPG" alt="b2ap3_thumbnail_Capture003_20150409-183407_1.JPG" /></a></p>
<p>I&#8217;ve shutdown the MINE from the dbvrep command line and I&#8217;ve restarted it from the bottom pane. I&#8217;ve just run the &#8216;run-target.sh&#8217; script. I&#8217;ve a warning about the APPLY which is still running and the MINE is started.
Now look at the message status: each process knows the SCN and it is advancing. I&#8217;ve no gap. This is <strong><span style="color: #eb7d00">real-time apply</span></strong>.
Those screenshot comes from the &#8216;<a href="https://dbvisit.atlassian.net/wiki/display/REPA11XE/RepAttack+11g+XE+Home">repattack</a>&#8216; environment I have used to to a demo and some test to a customer this morning. Don&#8217;t hesitate to test it. It&#8217;s easy to setup. On your laptop for a demo. And then on production source to validate how it works with your data and workload.</p>
<h3>Conclusion</h3>
<p>A Proof of Concept for replication must be done on the real context. We want to see the behaviour of the replication on the real data, and with the real rate of DML that is occuring on the source. And that is very difficult to reproduce on test environement. Because if you are able to reproduce the production load on a test environment, then you probably already have a replication solution&#8230;
The fear you have to do the PoC directly on the production should not prevent you to do it. It&#8217;s non-intrusive. It&#8217;s read only. And it can be configured with very limited processing on the source.
Configure a FETCHER. Start with an &#8216;archived log only&#8217; setup. Then switch to the &#8216;online redo log&#8217; mode and observe. It&#8217;s easy to do. It&#8217;s easy to go back to the &#8216;archivelog only&#8217; mode. It&#8217;s easy to stop the fetcher in case the server is overloaded. It&#8217;s safe.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-6120" data-img="http://blog.dbi-services.com/images/easyblog_images/139/b2ap3_thumbnail_Capture001.JPG"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
