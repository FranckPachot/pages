This was first published on <a href=https://blog.dbi-services.com/fixed-table-automatic-statistic-gathering-in-12c>https://blog.dbi-services.com/fixed-table-automatic-statistic-gathering-in-12c</a> (2016-04-04)
								<h1 class="entry-title">Fixed table automatic statistic gathering in 12c</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Before 12c, the fixed stats statistics were not gathered automatically. In 12c this has changed: even when you have never gathered fixed objects statistics you can see that you have statistics for X$ tables. That may be better than having no statistics at all, but it doesn&#8217;t replace manual gathering at the right time.
<span id="more-7893"></span></p>
<h3>Documentation</h3>
<p>First you may have a doubt because the <a href="http://www.oracle.com/technetwork/database/bi-datawarehousing/twp-bp-for-stats-gather-12c-1967354.pdf" target="_blank">Best Practices for Gathering Optimizer Statistics with Oracle Database 12c</a> white paper, which is by the way excellent, states the following: <em>The automatic statistics gathering job does not gather fixed object statistics.</em> </p>
<p>Actually, this was probably written before the new behavior has been implemented. <a href="http://docs.oracle.com/database/121/TGSQL/tgsql_stats.htm#GUID-ADC86F77-3B71-4BB7-986A-2DD283F0E212" target="_blank">12c Documentation</a> is clear about that: <i>Oracle Database automatically gathers fixed object statistics as part of automated statistics gathering if they have not been previously collected.</i></p>
<p>When a table has no statistics, the optimizer usually do dynamic sampling. It&#8217;s not the case with fixed tables. Without statistics it uses pre-defined values. Note that SQL Plan Directives generated for predicates on fixed tables seem to be only of reason &#8216;JOIN CARDINALITY MISESTIMATE&#8217; or &#8216;GROUP BY CARDINALITY MISESTIMATE&#8217; and I&#8217;ve not seen any &#8216;SINGLE TABLE CARDINALITY MISESTIMATE&#8217; for them yet.</p>
<p>I&#8217;ve checked statistics on fixed objects with the following query on multiple databases in 11g and 12c:
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/04/CaptureFixedStats20301.png" rel="lightbox[7893]"><img src="../wp-insides/uploads/sites/2/2016/04/CaptureFixedStats20301.png" alt="CaptureFixedStats20301" width="644" height="319" class="alignnone size-full wp-image-7894" /></a>
Here is the code:
<pre>
column database_creation format a18
column last_analyzed format a18
select dbid,to_char(created,'dd.mm.yyyy hh24:mi') database_creation,version,(select to_char(max(last_analyzed),'dd.mm.yyyy hh24:mi') last_analyzed from dba_tab_statistics where object_type='FIXED TABLE') last_analyzed from v$database,v$instance;
</pre></p>
<p>I know that dbms_stats.gather_fixed_objects_stats has never been run manually on those databases. Here is the result:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/04/CaptureFixedStats20302.png" rel="lightbox[7893]"><img src="../wp-insides/uploads/sites/2/2016/04/CaptureFixedStats20302.png" alt="CaptureFixedStats20302" width="608" height="508" class="alignnone size-full wp-image-7895" /></a></p>
<p>The 11g databases have no statistics for fixed objects. The 12c have statistics seem to have been collected on the first maintenance window that came after the database creation.</p>
<p>Here is a full sample on many databases:</p>
<p><pre>
      DBID DATABASE_CREATION  VERSION           LAST_ANALYZED
3512849711 04.03.2015 14:27   12.1.0.2.0        04.03.2015 22:02
2742730342 27.02.2015 16:25   12.1.0.2.0        27.02.2015 22:01
 947204019 04.03.2015 10:38   11.2.0.4.0
3119262236 23.04.2015 08:45   11.2.0.4.0
3086459761 07.09.2015 10:29   11.2.0.4.0
3834994345 05.05.2015 16:58   11.2.0.4.0
2416611527 23.11.2015 15:09   11.2.0.4.0
1308353219 02.06.2015 08:48   12.1.0.2.0        02.06.2015 22:02
2748602325 02.03.2016 10:56   12.1.0.2.0
2100385935 29.03.2016 10:08   12.1.0.2.0
2693495113 29.07.2015 16:41   12.1.0.2.0        29.07.2015 22:03
1838239625 02.05.2013 10:40   12.1.0.2.0        11.08.2015 11:01
2459965412 06.02.2015 12:36   12.1.0.2.0        06.02.2015 22:01
1973550543 25.09.2015 10:05   12.1.0.2.0        25.09.2015 22:03
2777782141 15.09.2015 10:05   12.1.0.2.0        15.09.2015 22:03
1972863322 20.03.2015 09:33   12.1.0.2.0        07.05.2015 12:14
2598026599 30.04.2015 13:38   12.1.0.2.0        30.04.2015 22:02
 392835176 02.12.2014 09:12   12.1.0.2.0        21.10.2015 22:05
3648145067 26.11.2014 12:38   12.1.0.2.0        18.12.2014 22:00
1427432880 08.01.2015 16:52   12.1.0.2.0        10.03.2015 11:16
3916227032 10.12.2014 10:47   12.1.0.2.0        10.12.2014 22:01
3410982685 13.05.2015 15:00   12.1.0.2.0        13.05.2015 22:03
3818933859 02.12.2015 07:50   11.2.0.4.0
4043114408 20.04.2015 12:06   12.1.0.2.0        20.04.2015 22:01
1021147402 04.01.2016 15:04   12.1.0.2.0
3248561100 05.05.2015 16:31   12.1.0.2.0        12.06.2015 22:02
</pre></p>
<p>Only few exceptions because some databases have the automatic job disabled.</p>
<h3>Conclusion</h3>
<p>We know it for a long time, CBO needs statistics. And it&#8217;s a good idea to gather them when they are not present. However, this is not a reason to do nothing manually. When run at 22:00 (the default beginning of the maintenance window) it&#8217;s probable that many X$ tables do not have the same number of rows than during high activity. Especially when it&#8217;s just after the database has been created and nothing has run yet. Session and processes structures have probably few rows. Memory structures are probably small. Our recommendation is to run dbms_stats.gather_fixed_objects_stats at a time where you have significant activity. Then no need to run it again frequently. If you scaled-up some resource configuration (mode memory, more CPU, higher connection pool) then you may run it again. And don&#8217;t worry, there are some critical tables that are skipped by the gathering process and still use some default.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-78940" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/04/CaptureFixedStats20301.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-4160">
				<div id="div-comment-4160" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/75234dd34f80230790f957f674492496?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://dba24.pl' rel='external nofollow' class='url'>Maciej Tokar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4160">
			August 3, 2016 at 14 h 38 min</a>		</div>

		<p>Another interesting post Franck, thanks. I have been reading SQL Tuning guide thoroughly lately and it brings a lot of details on how it all works together.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-41611"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4160' onclick='return addComment.moveForm( "div-comment-4160", "4160", "respond", "7893" )' aria-label='Reply to Maciej to Maciej Tokar'>Reply to Maciej</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
