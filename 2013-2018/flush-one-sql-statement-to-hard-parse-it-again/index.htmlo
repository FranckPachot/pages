This was first published on <a href=https://blog.dbi-services.com/flush-one-sql-statement-to-hard-parse-it-again>https://blog.dbi-services.com/flush-one-sql-statement-to-hard-parse-it-again</a> (2015-01-29)
								<h1 class="entry-title">Flush one SQL statement to hard parse it again</h1>
		<div class="content-inner">
			
						
						
		   
			<p>If you want a statement to be hard parsed on its next execution, you can flush the shared pool, but you don&#8217;t want all the cursors to be hard parsed. Here is how to flush only one statement, illustrated with the case where it can be useful.
During the performance training, here is how I introduce Adaptive Cursor Sharing, here is how I show the bind variable peeking problem that is well known by everyone that was DBA at the times of 9iR2 upgrades.</p>
<p>I&#8217;ve a customer table with very few ones born before 30&#8217;s and lot of ones born in 70&#8217;s. Optimal plan is index access for those from 1913 and full table scan for those born in 1971.</p>
<p>I&#8217;ve an histogram on that column so the optimizer can choose the optimal plan, whatever the value is. But I&#8217;m a good developer and I&#8217;m using bind variables in order to avoid to parse and waste shared pool memory for each value.</p>
<p>Here is my first user that executes the query for the value 1913</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; execute :YEAR:=1913;
PL/SQL procedure successfully completed.

SQL&gt; select cust_gender,count(*) from CUSTOMERS where cust_year_of_birth=:YEAR group by cust_gender;

C   COUNT(*)
- ----------
M          4
F          1

</pre>
<p>Here is the execution plan:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select * from table(dbms_xplan.display_cursor(format=&gt;'iostats last +peeked_binds'));

PLAN_TABLE_OUTPUT
-------------------------------------------------------------------------------------------------
SQL_ID  dpxj8c5y81bdr, child number 0
-------------------------------------
select cust_gender,count(*) from CUSTOMERS where
cust_year_of_birth=:YEAR group by cust_gender

Plan hash value: 790974867

------------------------------- ------------ --------------------------------------
| Id  | Operation               | Name       | Starts | E-Rows | A-Rows | Buffers |
------------------------------- ------------ --------------------------------------
|   0 | SELECT STATEMENT        |            |      1 |        |      2 |       7 |
|   1 |  HASH GROUP BY          |            |      1 |      2 |      2 |       7 |
|   2 |   TABLE ACCESS BY INDEX | CUSTOMERS  |      1 |      5 |      5 |       7 |
|*  3 |    INDEX RANGE SCAN     | DEMO_CUST_ |      1 |      5 |      5 |       2 |
------------------------------- ------------ --------------------------------------
</pre>
<p>And thanks to the &#8216;+peeked_binds&#8217; I know that it has been optimized for 1913</p>
<pre class="brush: sql; gutter: true; first-line: 1">Peeked Binds (identified by position):
--------------------------------------
   1 - :1 (NUMBER): 1913

Predicate Information (identified by operation id):
---------------------------------------------------
   3 - access("CUST_YEAR_OF_BIRTH"=:YEAR)
</pre>
<p>I&#8217;ve the right plan, optimal for my value.</p>
<p>But I&#8217;ve used bind variables in order to share my cursor. Others will execute the same with other values. They will soft parse only and share my cursor. Look at it:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; execute :YEAR:=1971;
PL/SQL procedure successfully completed.

SQL&gt; select cust_gender,count(*) from CUSTOMERS where cust_year_of_birth=:YEAR group by cust_gender;

C   COUNT(*)
- ----------
M        613
F        312
</pre>
<p>Look at the plan, it&#8217;s the same:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select * from table(dbms_xplan.display_cursor(format=&gt;'iostats last +peeked_binds'));

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------
SQL_ID  dpxj8c5y81bdr, child number 0
-------------------------------------
select cust_gender,count(*) from CUSTOMERS where
cust_year_of_birth=:YEAR group by cust_gender

Plan hash value: 790974867

------------------------------- --------------- --------------------------------------
| Id  | Operation               | Name          | Starts | E-Rows | A-Rows | Buffers |
------------------------------- --------------- --------------------------------------
|   0 | SELECT STATEMENT        |               |      1 |        |      2 |     228 |
|   1 |  HASH GROUP BY          |               |      1 |      2 |      2 |     228 |
|   2 |   TABLE ACCESS BY INDEX | CUSTOMERS     |      1 |      5 |    925 |     228 |
|*  3 |    INDEX RANGE SCAN     | DEMO_CUST_YEA |      1 |      5 |    925 |       4 |
------------------------------- --------------- --------------------------------------

Peeked Binds (identified by position):
--------------------------------------
   1 - :1 (NUMBER): 1913

Predicate Information (identified by operation id):
---------------------------------------------------
   3 - access("CUST_YEAR_OF_BIRTH"=:YEAR)
</pre>
<p>The plan is optimized for 1913, estimating 5 rows (E-Rows) but now returning 925 rows (A-Rows). That may be bad. Imagine a nested loop planned for few rows but finally running on million of rows&#8230;</p>
<p>The goal of this post is not to show Adaptive Cursor Sharing that may solve the issue once the problem has occured. And Adaptive Cursor Sharing do not work in all contexts (see <a href="https://support.oracle.com/epmos/faces/BugDisplay?id=8357294">Bug 8357294</a>: ADAPTIVE CURSOR SHARING DOESN&#8217;T WORK FOR STATIC SQL CURSORS FROM PL/SQL)</p>
<p>The goal is to answer to a question I had during the workshop: Can we flush one cursor in order to have it hard parsed again ? It&#8217;s a good question and It&#8217;s a good idea to avoid to flush the whole shared pool!</p>
<p>This is not new (see <a href="http://yong321.freeshell.org/computer/SharedPoolPurging.html">here</a>, here, here, here, here,&#8230;). But here is the query I use to quickly flush a statement with its sql_id.</p>
<p>I have the following cursor in memory:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select child_number,address,hash_value,last_load_time from v$sql where sql_id='dpxj8c5y81bdr';

CHILD_NUMBER ADDRESS          HASH_VALUE LAST_LOAD_TIME
------------ ---------------- ---------- -------------------
           0 00000000862A0E08 2088807863 2015-01-29/14:56:46
</pre>
<p>and I flush it with dbms_shared_pool.purge:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; exec for c in (select address,hash_value,users_executing,sql_text from v$sqlarea where sql_id='dpxj8c5y81bdr') loop sys.dbms_shared_pool.purge(c.address||','||c.hash_value,'...'); end loop;

PL/SQL procedure successfully completed.
</pre>
<p>I&#8217;ve 3 remarks about it:</p>
<p>1. <del datetime="2017-08-01T13:37:52+00:00">If the cursor is currently running, the procedure will wait</del> (updated JUL-17 it seems that in current version it doesn&#8217;t wait and just don&#8217;t flush).
2. In 10g you have to set the following event for your session:</p>
<pre class="brush: sql; gutter: true; first-line: 1">alter session set events '5614566 trace name context forever';</pre>
<p>
3. The &#8216;&#8230;&#8217; is anything you want which is not a P,Q,R,T which are used for Procedures, seQences, tRigger, Type. Anything else is for cursors. Don&#8217;t worry, this is in the <a href="https://docs.oracle.com/database/121/ARPLS/d_shared_pool.htm#ARPLS73475">doc</a>.</p>
<p>Ok, the cursor is not there anymore:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select child_number,address,hash_value,last_load_time from v$sql where sql_id='dpxj8c5y81bdr';
no rows selected
</pre>
<p>And the next execution will optimize it for its peeked bind value:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; execute :YEAR:=1971;
PL/SQL procedure successfully completed.

SQL&gt; select cust_gender,count(*) from CUSTOMERS where cust_year_of_birth=:YEAR group by cust_gender;

C   COUNT(*)
- ----------
M          4
F          1

SQL&gt; select * from table(dbms_xplan.display_cursor(format=&gt;'iostats last +peeked_binds'));

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------
SQL_ID  dpxj8c5y81bdr, child number 0
-------------------------------------
select cust_gender,count(*) from CUSTOMERS where
cust_year_of_birth=:YEAR group by cust_gender

Plan hash value: 1577413243

-----------------------------------------------------------------------------
| Id  | Operation          | Name      | Starts | E-Rows | A-Rows | Buffers |
-----------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |           |      1 |        |      2 |     233 |
|   1 |  HASH GROUP BY     |           |      1 |      2 |      2 |     233 |
|*  2 |   TABLE ACCESS FULL| CUSTOMERS |      1 |    925 |      5 |     233 |
-----------------------------------------------------------------------------

Peeked Binds (identified by position):
--------------------------------------
   1 - :1 (NUMBER): 1971

Predicate Information (identified by operation id):
---------------------------------------------------
   2 - filter("CUST_YEAR_OF_BIRTH"=:YEAR)

</pre>
<p>Here is the cursor that have been re-loaded, re-parsed, and re-optimized:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select child_number,address,hash_value,last_load_time from v$sql where sql_id='dpxj8c5y81bdr';

CHILD_NUMBER ADDRESS          HASH_VALUE LAST_LOAD_TIME
------------ ---------------- ---------- -------------------
           0 00000000862A0E08 2088807863 2015-01-29/14:56:49
</pre>
<p>That&#8217;s the right plan. A full table scan when I want to read lot of rows.</p>
<p>Don&#8217;t take it wrong. This is not a solution. It&#8217;s just a quick fix when a plan has gone wrong because the first execution was done by a special value. We flush the plan and expect that the following execution is done with a regular value.
You probably have the sql_id as you have seen a long running query with a bad plan. Here is the way to flush all its children &#8211; ready to copy/paste in case of emergency:</p>
<pre class="brush: sql; gutter: true; first-line: 1">set serveroutput on
begin
 for c in (select address,hash_value,users_executing,sql_text from v$sqlarea where sql_id='&amp;sql_id') 
 loop 
  dbms_output.put_line(c.users_executing||' users executing '||c.sql_text);
  sys.dbms_shared_pool.purge(c.address||','||c.hash_value,'...'); 
  dbms_output.put_line('flushed.');
 end loop;
end;
/
</pre>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-5730"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 3 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1373">
				<div id="div-comment-1373" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/e9b2c2c7ba2fb990c453bb5a7d020ed7?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Brian Peasland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1373">
			January 30, 2015 at 15 h 08 min</a>		</div>

		<p>I&#8217;ve used this method quite successfully in the past. In Oracle RAC, this will have to be done in each instance if desired.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-13741"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1373' onclick='return addComment.moveForm( "div-comment-1373", "1373", "respond", "572" )' aria-label='Reply to Brian to Brian Peasland'>Reply to Brian</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1374">
				<div id="div-comment-1374" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/dcb2e86a53722c024069148a6b9ec050?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Martin Berger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1374">
			February 1, 2015 at 17 h 48 min</a>		</div>

		<p>Franck,
might it make sense to
1) create a startup-trigger to parse the statement with &#8220;most suitable&#8221; binds and
2) afterwards pin this cursor using dbms_shared_pool.keep ?
Adaptive Cursor sharing should still be possible to do it&#8217;s job, but a (for most executions) reasonable cursor would exist and you could have a safty net for Bug:8357294 ?
Martin
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-13751"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1374' onclick='return addComment.moveForm( "div-comment-1374", "1374", "respond", "572" )' aria-label='Reply to Martin to Martin Berger'>Reply to Martin</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1375">
				<div id="div-comment-1375" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1375">
			February 1, 2015 at 20 h 45 min</a>		</div>

		<p>Hi Martin,
I&#8217;m not sure I would like to implement that kind of workaround.
My recommendation for that issue is rather to avoid gathering histograms when using bind variables. Either you want histograms and then use literals, or use bind variables and no histograms.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-13761"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1375' onclick='return addComment.moveForm( "div-comment-1375", "1375", "respond", "572" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
