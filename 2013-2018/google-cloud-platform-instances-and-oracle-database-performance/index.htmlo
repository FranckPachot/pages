This was first published on <a href=https://blog.dbi-services.com/google-cloud-platform-instances-and-oracle-database-performance>https://blog.dbi-services.com/google-cloud-platform-instances-and-oracle-database-performance</a> (2017-03-12)
								<h1 class="entry-title">Google Cloud Platform instances and Oracle Database</h1>
		<div class="content-inner">
			
						
						
		   
			<p>When it comes to choose a cloud instance to run Oracle Database, you want to be able to run your workload on the minimum CPU cores. This is why in a <a href="../amazon-aws-instances-and-oracle-database-performance/index.html" target="_blank">previous post</a> I measured how many logical reads per seconds can be achieved with a <a href="https://kevinclosson.net/slob/" target="_blank">SLOB</a> workload, on AWS which is often the first considered, and will probably do it on Azure in the future. I did the same on the <a href="../oracle-public-cloud-2-ocpu-for-1-proc-license/index.html" target="_blank">Oracle Cloud</a> which is the only one where Oracle make it easy to run an license the Oracle Database. </p>
<p><img style='float:right' src="../wp-insides/uploads/sites/2/2017/03/CaptureGCPlogoPNG.png" alt="CaptureGCPlogoPNG" width="336" height="61" class="alignnone size-full wp-image-15225" />Today, I&#8217;ve seen that the Google Cloud offers a 1 year trial (1 year instead of 3 months) with 300$ free credits where you are sure that your credit card will not be debited before you accept it. Of course I wanted to play with it and tested the IaaS instance types with same method: SLOB.
<span id="more-15196"></span></p>
<h3>Licencing No-Go</h3>
<p>I said &#8216;play with it&#8217; because you cannot consider Google Cloud as a platform for Oracle Database. Not because of the Google Cloud: it is on the top 3 cloud vendors with AWS and Azure. But just because Oracle doesn&#8217;t want to:</p>
<ul>
<li>It is not an &#8216;authorized cloud&#8217; where Oracle accepts the virtual cores as a metric</li>
<li>It is not running with an hypervisor where Oracle accepts the virtual cores as a metric</li>
<li>It is not the Oracle Cloud where Oracle accepts to count the virtual cores, and even apply the core factor</li>
</ul>
<p>So, the sad truth is that if you want to run an Oracle Database on the Google Cloud, you may have to pay Oracle Licences to cover the whole physical infrastructure of Google data center&#8230; This is clearly a No-Go for processor metrics licenses. You may think about NUP+ licensing where the metric is not the processors, but the number of users. This was possible for Standard Edition for 11g (and for 12.1.0.1 but this is out of support now). But with 12.1.0.2 they changed the Standard Edition rules and, even when the metric is the number of users, you have to count the number of servers. This is again a No-Go for a public cloud environment.</p>
<p>So let&#8217;s play in the hope that one day the rules will change. For the moment, they think that this strategy will push the current Oracle Database users to the Oracle Cloud. They may realize one day that it increases the counterflow of users going to Open Source databases to run away from those arbitrary licensing rules. </p>
<h3>Machine types</h3>
<p>There are 3 types of processors available for Europe (datacenter in Brussels) Sandy Bridge, Ivy Bridge and Haswell. The regions are detailed in <a href="https://cloud.google.com/compute/docs/regions-zones/regions-zones#available">regions-zones</a> documentation and there is more detail in <a href="https://cloud.google.com/compute/docs/machine-types#predefined_machine_types">machine_types</a>.</p>
<h3>Ivy Brige</h3>
<p>Here I choose europe-west1-c and created an VM running RHEL7 on 4 vCPU Ivy Brige:</p>
<p><a href="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Ivy.png" rel="lightbox[15196]"><img src="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Ivy.png" alt="CaptureGCP00Ivy" width="878" height="478" class="alignnone size-full wp-image-15218" /></a></p>
<p>Note that the price is the same for all kind of processors within the same region.</p>
<h3>SLOB</h3>
<p>Here is cached SLOB (UPDATE_PCT=0 RUN_TIME=300 SCALE=80M WORK_UNIT=64)</p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               1.0              30.3      0.00      4.74
              DB CPU(s):               1.0              29.4      0.00      4.59
      Redo size (bytes):          14,254.9         433,831.2
  Logical read (blocks):         674,052.6      20,513,983.3</pre></p>
<p>This is 674 kLIOPS per vCPU.</p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               2.0              25.0      0.00      7.24
              DB CPU(s):               2.0              24.6      0.00      7.11
  Logical read (blocks):       1,377,553.4      17,267,173.0</pre></p>
<p>This is 689 kLIOPS per vCPU. We are running on two cores</p>
<p>Now, let&#8217;s see if those 4 VCPUs are threads or cores.</p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               3.0               1.6      0.00     12.10
              DB CPU(s):               2.9               1.6      0.00     11.93
  Logical read (blocks):       1,493,775.4         815,084.0</pre></p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               4.0              54.6      0.00     13.80
              DB CPU(s):               4.0              54.0      0.00     13.64
  Logical read (blocks):       1,780,041.3      24,329,604.1</pre></p>
<p>This is 498 kLIOPS per vCPU with 3 threads and 445 kLIOPS per vCPU with 4 threads. We are obviously running on 2 hyper-threaded cores, where hyper-threading here gives only 30% additional LIOPS.</p>
<p>When going further, the performance will decrease:</p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               5.0              48.5      0.00     15.81
              DB CPU(s):               3.0              29.0      0.00      9.46
  Logical read (blocks):       1,460,029.2      14,233,024.3</pre></p>
<p>It is interesting to see that when running 5 sessions on 4 vCPU then actually 3 threads only are used on average.</p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               6.0              72.1      0.00     16.24
              DB CPU(s):               3.0              36.5      0.00      8.22
  Logical read (blocks):       1,458,749.6      17,651,628.4</pre></p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               7.0              72.5      0.00     20.42
              DB CPU(s):               3.0              31.5      0.00      8.86
  Logical read (blocks):       1,445,423.3      15,073,622.1</pre></p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               8.0              82.9      0.00     18.93
              DB CPU(s):               3.0              31.4      0.00      7.17
  Logical read (blocks):       1,436,355.2      14,986,038.9</pre></p>
<p>Those 8 runs are visible on the CPU usage graph from the VM dashboard where maximum CPU usage is when running 4 sessions on those 4 threads.</p>
<p><a href="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Ivy0011.png" rel="lightbox[15196]"><img src="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Ivy0011.png" alt="CaptureGCP00Ivy001" width="1271" height="591" class="alignnone size-full wp-image-15241" /></a></p>
<p>Here is the CPU description that we can see from lscpu and /proc/cpuinfo where we can see that we are virtualized with KVM:</p>
<p><a href="../wp-insides/uploads/sites/2/2017/03/InkedCaptureGCP00Ivy002_LI.jpg" rel="lightbox[15196]"><img src="../wp-insides/uploads/sites/2/2017/03/InkedCaptureGCP00Ivy002_LI.jpg" alt="InkedCaptureGCP00Ivy002_LI" width="887" height="952" class="alignnone size-full wp-image-15235" /></a></p>
<p>For tty output I usually prefer to paste the text rather than a screenshot, but I wanted to show the ssh screen that you get on your browser with a simple click. This is very convenient. We are really in easy and fast provisioning here.</p>
<h3>Haswell</h3>
<p>Just to compare, here is the same running on the Haswell machine type.</p>
<p><a href="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Haswel.png" rel="lightbox[15196]"><img src="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Haswel.png" alt="CaptureGCP00Haswel" width="852" height="467" class="alignnone size-full wp-image-15237" /></a></p>
<p><pre>Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               1.0              25.4      0.00      5.53
              DB CPU(s):               1.0              24.4      0.00      5.32
  Logical read (blocks):         598,274.2      15,275,586.5

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               2.0              27.3      0.00      8.46
              DB CPU(s):               2.0              26.8      0.00      8.29
  Logical read (blocks):       1,155,681.9      15,814,666.6

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               3.0              34.7      0.00     12.34
              DB CPU(s):               3.0              34.2      0.00     12.18
  Logical read (blocks):       1,300,659.1      15,052,978.1

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               4.0              54.6      0.00     13.80
              DB CPU(s):               3.9              53.8      0.00     13.61
  Logical read (blocks):       1,541,843.0      21,098,158.6</pre></p>
<h3>Sandy Brige</h3>
<p>here is the same running on the Sandy Brige machine type.</p>
<p><a href="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Sandy.png" rel="lightbox[15196]"><img src="../wp-insides/uploads/sites/2/2017/03/CaptureGCP00Sandy.png" alt="CaptureGCP00Sandy" width="847" height="606" class="alignnone size-full wp-image-15238" /></a></p>
<p><pre>
Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               1.0              25.2      0.00      2.16
              DB CPU(s):               1.0              25.0      0.00      2.14
  Logical read (blocks):         668,393.8      16,935,651.8

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               2.0              23.1      0.00     11.13
              DB CPU(s):               2.0              22.6      0.00     10.86
  Logical read (blocks):       1,204,487.9      13,938,751.4

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               3.0              37.5      0.00     13.65
              DB CPU(s):               3.0              36.9      0.00     13.43
  Logical read (blocks):       1,383,602.0      17,334,975.8

Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               4.0              50.0      0.00     16.23
              DB CPU(s):               3.9              49.3      0.00     15.98
  Logical read (blocks):       1,656,216.2      20,782,477.0
</pre></p>
<h3>So what?</h3>
<p>Whether you like it or not, you cannot run Oracle Database on the Google Cloud because Oracle licensing rules are set to make life difficult for running Oracle Database outside of the Oracle Cloud. For performance, it is still the Oracle IaaS that shows the best performance for <a href="../oracle-public-cloud-2-ocpu-for-1-proc-license/index.html" target="_blank">this test</a>. But of course, there are lot of other points to consider. You don&#8217;t run only the database, but application should be located in the same data center.</p>
<p>The Google Cloud Platform looks good and I&#8217;ll probably use my Google Cloud trial to test Spanner, and maybe the new PostgreSQL service. I love Oracle Database technology. But the customers going to a public cloud will tend migrate to database systems which can run on any virtualized environments without certification, support and licensing risks.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-151970" data-img="https://blog.dbi-services.com/wp-insides/uploads/sites/2/2017/03/CaptureGCPlogoPNG.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-10789">
				<div id="div-comment-10789" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/b75a4cb645082d2672c2e5860dcf8c21?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://hiteshgondalia.wordpress.com' rel='external nofollow' class='url'>Hitesh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-10789">
			May 6, 2018 at 8 h 38 min</a>		</div>

		<p>Thanks for sharing good information
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-107901"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-10789' onclick='return addComment.moveForm( "div-comment-10789", "10789", "respond", "15196" )' aria-label='Reply to Hitesh to Hitesh'>Reply to Hitesh</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
