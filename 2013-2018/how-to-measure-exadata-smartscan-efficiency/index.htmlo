This was first published on <a href=https://blog.dbi-services.com/how-to-measure-exadata-smartscan-efficiency>https://blog.dbi-services.com/how-to-measure-exadata-smartscan-efficiency</a> (2014-09-23)
								<h1 class="entry-title">How to measure Exadata SmartScan efficiency</h1>
		<div class="content-inner">
			
						
						
		   
			<p>A thread on <a href="https://community.oracle.com/thread/3609219?sr=inbox&amp;ru=986988">OTN Forum</a> about Exadata came to the following question: &#8220;But how can I monitor if it is effectively used or not?&#8221;. This is a common question. There are 3 exclusive features coming with Exadata, and instance statistics can show their usage. Even better: two of them can even be checked on your current (non-Exadata) system. And that is good to foresee how Exadata can improve your workload.</p>
<p>Let&#8217;s find how to measure the following feature efficiency:</p>
<ul>
<li>Have reads eligible to SmartScan</li>
<li>Avoid I/O with Storage Index</li>
<li>Avoid transfert with offloading</li>
</ul>
<h3>Have reads eligible to SmartScan</h3>
<p>First of all, SmartScan occurs only on direct-path reads. If you don&#8217;t see &#8216;cell smart table scan&#8217; and &#8216;cell smart index scans&#8217; in your Top timed events, then SmartScan can do nothing for you. And you see that as &#8216;direct path read&#8217; wait event when you are not in Exadata.</p>
<p>If those direct-path reads are not a significant part of your DB Time, then you have something else to do before going to Exadata. You should leverage direct-path reads: full table scans, parallel query, etc.</p>
<p>Then when you are on Exadata and &#8216;cell smart table scan&#8217; and &#8216;cell smart index scans&#8217; are used, then you can check the proportion of reads that are actually using SmartScan.</p>
<p>SmartScan input is: &#8216;cell physical IO bytes eligible for predicate offload&#8217;. This is the amount of reads (in bytes) that are going to the SmartScan code. You have the total amount of reads as &#8216;physical read total bytes&#8217; so you can compare it to know which part of your reads is subject to SmartScan.</p>
<p>If &#8216;cell physical IO bytes eligible for predicate offload&#8217; / &#8216;physical read total bytes&#8217; is small, then you have something to tune here. You want to do direct-path reads and you want to see &#8216;TABLE ACCESS STORAGE&#8217; in the execution plan.</p>
<p>Not yet in Exadata? The Performance Analyzer can simulate it. The statistic is &#8216;cell simulated physical IO bytes eligible for predicate offload.&#8217;</p>
<h3>Avoid I/O with Storage Index</h3>
<p>When you know that SmartScan is used or can be used on a significant part of your reads, then the first thing you want to do is to avoid physical I/O. Among the &#8216;cell physical IO bytes eligible for predicate offload&#8217;, some reads will not necessitate disc I/O at all, thanks to Storage Indexes. You have the volume in &#8216;cell physical IO bytes saved by storage index&#8217;. Just compare that with the eligible volume and you know the amount of disk reads that have been saved by Storage Indexes. That is the most efficient optimization of SmartScan: you don&#8217;t have to read them, you don&#8217;t have to uncompress them, you don&#8217;t have to filter them, you don&#8217;t have to transfer them&#8230;</p>
<h3>Avoid transfert with offloading</h3>
<p>Then there is the proper offloading. The previous (Storage Indexes) addressed I/O elimination. This is the key feature for performance. Offloading addresses the transfer from storage to database servers. This is the key feature for scalability.</p>
<p>In the last decade, we replaced lot of direct attached disks with SAN. That was not for performance reasons. That was for maintainability and scalability. Having a shared storage system helps to allocate disk space when needed, get good performance by striping, get high availability by mirroring. The only drawback is the transfer time that is higher than direct attached disks.</p>
<p>Exadata still has the scalable architecture of the SAN, but releases the transfer bottleneck with offloading (in addition fo the fast interconnect which is very efficient). What can be filtered early on storage cells do not have to be transferred: columns not in the select clause, rows outside of the where (or join) clause predicates.</p>
<p>And you can measure it as well. When you measure it on non-Exadata with the performance analyzer, you compare the SmartScan output, which is the &#8216;cell simulated physical IO bytes returned by predicate offload&#8217;, to the SmartScan input &#8216;cell simulated physical IO bytes returned by predicate offload&#8217;. And this is a good estimation of the efficiency you can expect when going to Exadata.</p>
<p>When you are on Exadata, that may be different. Compressed data have to be uncompressed in order to apply the predicates and projection at the storage cells. Then the predicate/projection offloading input is: &#8216;cell IO uncompressed bytes&#8217;. and you compare that to &#8216;cell physical IO interconnect bytes returned by smart scan&#8217;</p>
<h3>Summary</h3>
<p>If you want to see Exadata SmartScan efficiency, just check an AWR report and compare the following:</p>
<table border="0">
<tbody>
<tr>
<td>
<pre>cell physical IO bytes eligible
 for predicate offload</pre>
</td>
<td><strong><span style="color: #ff9900">      /
</span></strong></td>
<td>
<pre>physical read total bytes
</pre>
</td>
<td>    <span style="color: #ff9900"> Goal:</span>
<span style="color: #ff9900">     high %</span></td>
</tr>
<tr>
<td>
<pre>cell physical IO bytes saved
 by storage index</pre>
</td>
<td>    <strong>
<span style="color: #ff9900">      /</span>  </strong>&nbsp;</td>
<td>
<pre>cell physical IO bytes eligible
 for predicate offload</pre>
</td>
<td><span style="color: #ff9900">     Goal:</span>
<span style="color: #ff9900">     high %</span></td>
</tr>
<tr>
<td>
<pre>cell physical IO interconnect bytes
 returned by smart scan</pre>
<pre></pre>
</td>
<td>     <strong><span style="color: #ff9900"> /</span></strong>
&nbsp;
</td>
<td>
<pre>cell IO uncompressed bytes

</pre>
</td>
<td>    <span style="color: #ff9900">  Goal:
</span><span style="color: #ff9900">      small %</span><em>
</em></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>You probably wonder why I don&#8217;t use the &#8216;smart scan efficiency ratio&#8217; that we find at different places? They are often wrong for two reasons:</p>
<ul>
<li>They compare &#8216;cell physical IO interconnect bytes returned by smart scan&#8217; to &#8216;cell physical IO interconnect bytes&#8217;. But the latter includes the writes as well, and because of ASM mirroring, writes are multipled when measured at interconnect level.</li>
<li>The &#8216;cell physical IO interconnect bytes returned by smart scan&#8217; can&#8217;t be compared with &#8216;physical read total bytes&#8217; because the former has some data uncompressed.</li>
</ul>
<p>For that reason, we cannot use only a single ratio that covers all the SmartScan features.</p>
<p>This is why I always check the 3 pairs above in order to get a relevant picture. And two of them are available with the simulation mode (I&#8217;ll blog about it soon).</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-4940"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
