This was first published on <a href=https://blog.dbi-services.com/index-on-truncdate-do-you-still-need-old-index>https://blog.dbi-services.com/index-on-truncdate-do-you-still-need-old-index</a> (2015-03-15)
								<h1 class="entry-title">Index on trunc(date) &#8211; do you still need old index?</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Sometimes we have to index on ( trunc(date) ) because a SQL statement uses predicate on it instead of giving a range from midnight to midnight. When you do that you probably keep the index on the column. That&#8217;s two indexes to maintain for DML. Do we need it?</p>
<p>I&#8217;ll show a feature that appeared in 11.2.0.2 (info from <a href="https://www.freelists.org/post/oracle-l/Functionbased-indexes-and-trunc">oracle-l</a>) so let&#8217;s set the optimizer to behave as before that feature.</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; alter session set optimizer_features_enable='11.2.0.1';
Session altered.
</pre>
<p>I create the following table with a date column;</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; create table DEMO as select prod_id,prod_name,prod_eff_from +rownum/0.3 prod_date from sh.products,(select * from dual connect by 1000˂=level);
Table created.
</pre>
<p>and I have an index on the date column:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; create index PROD_NAME on DEMO(prod_name);
Index created.

SQL&gt; create index PROD_DATE on DEMO(prod_date);
Index created.
</pre>
<p>The index on the name is for another blog post&#8230;</p>
<h3> trunc(date)=&#8230;</h3>
<p>It&#8217;s quite common to encounter a query that TRUNC the column in order to search for a date &#8211; whatever the time component is. We all know that it is better to use a BETWEEN because applying a function an indexed column prevents the index access:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set autotrace trace explain
SQL&gt; select * from DEMO where trunc(prod_date)=date'2015-01-01';

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

---------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)|
---------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |     1 |    49 |     2   (0)|
|*  1 |  TABLE ACCESS FULL| DEMO |     1 |    49 |     2   (0)|
---------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(TRUNC(INTERNAL_FUNCTION("PROD_DATE"))=TO_DATE('
              2015-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
</pre>
<p>&nbsp;</p>
<p>But sometimes we can&#8217;t change the query and just have to find a workaround. And function based indexes are a gread help for that:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; create index PROD_DATE_TRUNC on DEMO( trunc(prod_date) );
Index created.
</pre>
<p>and that index can be used for the query above:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select * from DEMO where trunc(prod_date)=date'2015-01-01';

Execution Plan
----------------------------------------------------------
Plan hash value: 1760965557

------------------------------------------------------------------------------------
| Id  | Operation                   | Name            | Rows  | Bytes | Cost (%CPU)|
------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                 |     1 |    58 |     1   (0)|
|   1 |  TABLE ACCESS BY INDEX ROWID| DEMO            |     1 |    58 |     1   (0)|
|*  2 |   INDEX RANGE SCAN          | PROD_DATE_TRUNC |     1 |       |     1   (0)|
------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(TRUNC(INTERNAL_FUNCTION("PROD_DATE"))=TO_DATE(' 2015-01-01 00:00:00',
              'syyyy-mm-dd hh24:mi:ss'))
</pre>
<p>The TRUNC(INTERNAL_FUNCTION(&#8220;PROD_DATE&#8221;)) is still there but now it&#8217;s an access predicate instead of a filter predicate. Our new index has been used.</p>
<h3> date &gt; &#8230; and date &lt; &#8230;</h3>
<p>Ok. But now i&#8217;ve two indexes instead of one. It&#8217;s an overhead when inserting, deleting, and updating that date column. If I&#8217;m sure that we query only with the trunc function I can drop it.</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; drop index PROD_DATE;
Index dropped.
</pre>
<p>But what happens if a query was well written, using a range instead of trunc:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select * from DEMO where prod_date &gt;= date'2015-01-01' and prod_date ˂ date'2015-01-02';

Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |     1 |    49 |     2   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| DEMO |     1 |    49 |     2   (0)| 00:00:01 |
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("PROD_DATE"&gt;=TO_DATE(' 2015-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss') AND "PROD_DATE"˂TO_DATE(' 2015-01-02 00:00:00',
              'syyyy-mm-dd hh24:mi:ss'))
</pre>
<p>A full table scan. Does that mean that I have to maintain two indexes? That was in 11.2.0.2 but let&#8217;s see the behaviour after the next patchset:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; alter session set optimizer_features_enable='11.2.0.2';
Session altered.

SQL&gt; select * from DEMO where prod_date &gt;= date'2015-01-01' and prod_date ˂ date'2015-01-02';

Execution Plan
----------------------------------------------------------
Plan hash value: 1760965557

-----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                 |     1 |    58 |     1   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS BY INDEX ROWID| DEMO            |     1 |    58 |     1   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | PROD_DATE_TRUNC |     1 |       |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("PROD_DATE"&gt;=TO_DATE(' 2015-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss')
              AND "PROD_DATE"˂TO_DATE(' 2015-01-02 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   2 - access(TRUNC(INTERNAL_FUNCTION("PROD_DATE"))&gt;=TRUNC(TO_DATE(' 2015-01-01
              00:00:00', 'syyyy-mm-dd hh24:mi:ss')) AND TRUNC(INTERNAL_FUNCTION("PROD_DATE"))˂=TRUNC(
              TO_DATE(' 2015-01-02 00:00:00', 'syyyy-mm-dd hh24:mi:ss')))
</pre>
<p>Since 11.2.0.2 we don&#8217;t need to keep the old index. The one with the trunc() can be used.</p>
<h3>use the time part</h3>
<p>However, something is missing now. If we want to select or filter the full date with time, we have to go to the table because the time part is not in our new index:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select prod_date from DEMO where prod_date &gt;= date'2015-01-01' and prod_date ˂ date'2015-01-02';

Execution Plan
----------------------------------------------------------
Plan hash value: 1760965557

-----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                 |     1 |    18 |     1   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS BY INDEX ROWID| DEMO            |     1 |    18 |     1   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | PROD_DATE_TRUNC |     1 |       |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("PROD_DATE"&gt;=TO_DATE(' 2015-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss')
              AND "PROD_DATE"˂TO_DATE(' 2015-01-02 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   2 - access(TRUNC(INTERNAL_FUNCTION("PROD_DATE"))&gt;=TRUNC(TO_DATE(' 2015-01-01
              00:00:00', 'syyyy-mm-dd hh24:mi:ss')) AND TRUNC(INTERNAL_FUNCTION("PROD_DATE"))˂=TRUNC(
              TO_DATE(' 2015-01-02 00:00:00', 'syyyy-mm-dd hh24:mi:ss')))
</pre>
<p>That TABLE ACCESS BY INDEX ROWID is usually what is expensive in an index access. In that case, do we need to keep the old index?</p>
<p>No, a better solution is to add the date &#8211; without a trunc &#8211; in our new index:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; drop index PROD_DATE_TRUNC;
Index dropped.

SQL&gt; create index PROD_DATE_TRUNC on DEMO( trunc(prod_date) , prod_date );
Index created.
</pre>
<p>and now we don&#8217;t need to go to the table:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select prod_date from DEMO where prod_date &gt;= date'2015-01-01' and prod_date ˂ date'2015-01-02';

Execution Plan
----------------------------------------------------------
Plan hash value: 547246927

------------------------------------------------------------------------------------
| Id  | Operation        | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT |                 |     1 |    18 |     1   (0)| 00:00:01 |
|*  1 |  INDEX RANGE SCAN| PROD_DATE_TRUNC |     1 |    18 |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - access(TRUNC(INTERNAL_FUNCTION("PROD_DATE"))&gt;=TRUNC(TO_DATE('
              2015-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss')) AND "PROD_DATE"&gt;=TO_DATE('
              2015-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss') AND
              TRUNC(INTERNAL_FUNCTION("PROD_DATE"))˂=TRUNC(TO_DATE(' 2015-01-02
              00:00:00', 'syyyy-mm-dd hh24:mi:ss')) AND "PROD_DATE"˂TO_DATE(' 2015-01-02
              00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
       filter("PROD_DATE"&gt;=TO_DATE(' 2015-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss') AND "PROD_DATE"˂TO_DATE(' 2015-01-02 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss'))
</pre>
<p>And there is one index only to maintain.</p>
<h3>Conclusion</h3>
<p>From 11.2.0.2 an index on trunc(date) is sufficient for access through predicates on the date without time part &#8211; even if we don&#8217;t use the trunc() in the predicate. If we need to get the time part without having the overhead of reading the table, then we can add the column without function in the function based index. No need to maintain bot indexes.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-6010"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 5 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1404">
				<div id="div-comment-1404" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/d440e310649df7a978e1d3a65e3223cb?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Rainer Stenzel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1404">
			March 31, 2015 at 6 h 11 min</a>		</div>

		<p>Hello Frank,
thank you for this revelation and publication. Do you already know of broader appliance of this substitution/unification technique e.g. UPPER or DECODE ?
Best regards
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14051"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1404' onclick='return addComment.moveForm( "div-comment-1404", "1404", "respond", "600" )' aria-label='Reply to Rainer to Rainer Stenzel'>Reply to Rainer</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1405">
				<div id="div-comment-1405" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/dc43e6499ba6196ef99509ef5a7f3120?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Mohamed Houri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1405">
			March 31, 2015 at 7 h 16 min</a>		</div>

		<p>Hi Frank</p>
<p>Yes that&#8217;s an interesting point you have pointed out. I did the same experiment using an index on a virtual column and a query predicate on the column that serves for the virtual column definition
<a href="https://hourim.wordpress.com/2013/10/25/index-on-a-virtual-column-would-it-help-others/" rel="nofollow">https://hourim.wordpress.com/2013/10/25/index-on-a-virtual-column-would-it-help-others/</a>
There is a special extension for the TRUNC function that seems not have been extended to other SQL functions.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14061"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1405' onclick='return addComment.moveForm( "div-comment-1405", "1405", "respond", "600" )' aria-label='Reply to Mohamed to Mohamed Houri'>Reply to Mohamed</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1406">
				<div id="div-comment-1406" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1406">
			March 31, 2015 at 8 h 16 min</a>		</div>

		<p>Hi,
Thanks for the comments.
As Mohamed shows in his blog post, the TRUNC optimization is also available for numbers.
There is the same kind of optimization for SUBSTR and I&#8217;ll post about it soon. That was planned &#8211; reason why I&#8217;ve an index on PROD_NAME. Thanks for the reminder <img src="../wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" />
Regards,
Franck
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14071"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1406' onclick='return addComment.moveForm( "div-comment-1406", "1406", "respond", "600" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1407">
				<div id="div-comment-1407" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1407">
			March 31, 2015 at 10 h 01 min</a>		</div>

		<p>Here is the post about SUBSTR: <a href="http://www.dbi-services.com/index.php/blog/entry/index-on-truncdate-do-you-still-need-old-index-1" rel="nofollow">http://www.dbi-services.com/index.php/blog/entry/index-on-truncdate-do-you-still-need-old-index-1</a>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14081"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1407' onclick='return addComment.moveForm( "div-comment-1407", "1407", "respond", "600" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-2919">
				<div id="div-comment-2919" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/cab94fa7266bb46702d171929c859395?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.pythian.com/blog/author/kutrovsky/' rel='external nofollow' class='url'>Christo Kutrovsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2919">
			February 29, 2016 at 23 h 32 min</a>		</div>

		<p>Hi Franck &#8211; great post. I was super excited about this feature, but then discovered the Optimizer makes something strange with the costing if the index on trunc(date) is a bitmap index. In my test case the cost was was 100 times higher than a full table scan &#8211; so Oracle did not use the bitmap index.</p>
<p>With identical data &#8211; a column with the content of trunc(date) &#8211; Oracle uses the bitmap index, although the cost is still significantly higher (10517 ) than a b-tree index (750).</p>
<p>Test case if you can&#8217;t reproduce on your data set:
<pre>
create table ckk nologging as
select rownum id, mod(rownum,5) mod5_id, mod(rownum,5000) mod5000_id, sysdate dt_fixed, sysdate - rownum/24/60 dt_dec, sysdate + rownum/24/60 dt_pos, sysdate + ora_hash(rownum,65,535)/24 dt_rand, sysdate+mod(rownum,10) dt_mod10, rpad('x',3500,'x') filler, trunc(sysdate + rownum/24/60) trunc_dt_pos
from (select rownum r from dual connect by level &lt;= 10000) r1, (select rownum r from dual connect by level &lt;= 1000)
;
</pre>
I create multiple indexes for testing &#8211; set them invisible.
<pre>
create /*+ parallel(24) */  index ckk2$dt_pos_nc2 on ckk2(trunc(dt_pos)) invisible;--26000
create /*+ parallel(24) */  bitmap index ckk2$dt_pos_B2 on ckk2(trunc(dt_pos)) ;-- 2300

create /*+ parallel(24) */  index ckk2$dt_pos_nc on ckk2(trunc_dt_pos) invisible;--26000
create /*+ parallel(24) */  bitmap index ckk2$dt_pos_B on ckk2(trunc_dt_pos) ;-- 2300
</pre></p>
<p>Then following query goes Full Table Scan &#8211; unless you hint it:
<pre>
select /*+INDEX_COMBINE(T) */ sum(mod5_id) from ckk2 t where dt_pos = to_date(&#039;2035-02-13 15:33:12&#039;,&#039;yyyy-mm-dd hh24:mi:ss&#039;)
</pre>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-29201"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2919' onclick='return addComment.moveForm( "div-comment-2919", "2919", "respond", "600" )' aria-label='Reply to Christo to Christo Kutrovsky'>Reply to Christo</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
