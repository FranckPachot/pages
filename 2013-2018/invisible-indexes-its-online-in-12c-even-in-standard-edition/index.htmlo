This was first published on <a href=https://blog.dbi-services.com/invisible-indexes-its-online-in-12c-even-in-standard-edition>https://blog.dbi-services.com/invisible-indexes-its-online-in-12c-even-in-standard-edition</a> (2015-09-14)
								<h1 class="entry-title">Invisible indexes: it&#8217;s online in 12c &#8211; even in Standard Edition</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Do you think that online operations are available only on Enterprise Edition?
That changed in 12c, there is an operation that is online (without the need for the ONLINE keyword) and available in Standard Edition and a very important feature for performance tuning: invisible indexes.
<span id="more-3839"></span></p>
<h1>Example</h1>
<p>I&#8217;ll show it from the SCOTT schema where I&#8217;ve added an index on EMP(HIREDATE):
<pre>
SQL&gt; info+ EMP
TABLE: EMP
         LAST ANALYZED:
         ROWS         :
         SAMPLE SIZE  :
         INMEMORY     :DISABLED
         COMMENTS     :

Columns
NAME         DATA TYPE           NULL  DEFAULT    LOW_VALUE   HIGH_VALUE   NUM_DISTINCT   HISTOGRAM
----------  -------------------  ----  ---------  ----------- -----------  -------------  ---------
*EMPNO       NUMBER(4,0)         No
 ENAME       VARCHAR2(10 BYTE)   Yes
 JOB         VARCHAR2(9 BYTE)    Yes
 MGR         NUMBER(4,0)         Yes
 HIREDATE    DATE                Yes                  .....       .....
 SAL         NUMBER(7,2)         Yes
 COMM        NUMBER(7,2)         Yes
 DEPTNO      NUMBER(2,0)         Yes

Indexes
INDEX_NAME          UNIQUENESS  STATUS  FUNCIDX_STATUS  COLUMNS   COLUMN_EXPRESSION
------------------  ----------  ------  --------------  --------  -----------------
SCOTT.PK_EMP        UNIQUE      VALID                   EMPNO
SCOTT.EMP_HIREDATE  NONUNIQUE   VALID                   HIREDATE
</pre>
If you don&#8217;t know where that &#8216;info+&#8217; is coming from, then you should read about <a href="http://www.thatjeffsmith.com/archive/2015/01/sqlcl-commands-info-info-the-new-desc/trackback">sqlcl</a>.</p>
<h1>It&#8217;s always good to remove unnecessary indexes</h1>
<p>Ok, imagine that you think that this EMP_HIREDATE index is not useful. Do you drop it? Or the fear of unexpected regression wins against the will to clean up. If you drop it and you see a regression, then you will have to create it back. It can take a lot of time on a big table. Do you choose to create it offline, blocking everybody, but trying to have the index back as quickly as possible?
How long will it take? Are you sure that you have enough temp space?</p>
<p>Well, since 11g you have a very nice feature: invisible index. It&#8217;s still maintained but invisible to the optimizer. Just make the index invisible and if you see any regression you can bring it back in seconds. But are you sure of that? </p>
<p>In 11g, ALTER INDEX VISIBLE requires an exclusive lock. It can be quick and nobody see it. But imagine that you have a lot of DML activity on the table, and on tables linked to it by referential integrity. That DML activity acquires Row-X locks. Your ALTER INDEX VISIBLE will wait. But it requests an exclusive lock. Then all new sessions that wants to have activity on those tables will be blocked. This is not good. Especially in that situation: if you want to bring back the index as visible, that&#8217;s probably because you had some performance problems. It not the right time to add lock issues&#8230;</p>
<h1>12c</h1>
<p>In 12c, new feature, it&#8217;s online. which means that we don&#8217;t need any Share or Exclusive lock.
Let&#8217;s prove it.
I&#8217;m tracing sql_trace and enqueues
<pre>
SQL&gt; alter session set events='10046 trace name context forever, level 1 : 10704 trace name context forever, level 3' tracefile_identifier='InvisibleIndex';
Session altered.
</pre>
I have some queries using the index:
<pre>
SQL&gt; select count(*) from EMP where HIREDATE&gt;sysdate-1;

COUNT(*)
--------
0

SQL&gt; select * from table(dbms_xplan.display_cursor);

PLAN_TABLE_OUTPUT
SQL_ID  gy8sag39zkrxr, child number 0
-------------------------------------
select count(*) from EMP where HIREDATE&gt;sysdate-1

Plan hash value: 3798098543

----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |       |       |     1 (100)|          |
|   1 |  SORT AGGREGATE   |              |     1 |     9 |            |          |
|*  2 |   INDEX RANGE SCAN| EMP_HIREDATE |     1 |     9 |     1   (0)| 00:00:01 |
----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------
   2 - access("HIREDATE"&gt;SYSDATE@!-1)
</pre>
the query is here:
<pre>
SQL&gt; select sql_id,child_number,invalidations,plan_hash_value from V$SQL where plan_hash_value=3798098543;

SQL_ID         CHILD_NUMBER  INVALIDATIONS  PLAN_HASH_VALUE
-------------  ------------  -------------  ---------------
gy8sag39zkrxr  0             0              3,798,098,543
</pre>
But I didn&#8217;t noticed it and think the index is not useful.
I minimize the risks: I make it invisible.
<pre>
SQL&gt; alter index EMP_HIREDATE invisible;

Index EMP_HIREDATE altered.
</pre>
Now future queries are doing a full table scan:
<pre>
SQL&gt; select count(*) from EMP where HIREDATE&gt;sysdate-1;

COUNT(*)
--------
0

SQL&gt; select * from table(dbms_xplan.display_cursor);

PLAN_TABLE_OUTPUT
SQL_ID  gy8sag39zkrxr, child number 0
-------------------------------------
select count(*) from EMP where HIREDATE&gt;sysdate-1

Plan hash value: 2083865914

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |       |       |     3 (100)|          |
|   1 |  SORT AGGREGATE    |      |     1 |     9 |            |          |
|*  2 |   TABLE ACCESS FULL| EMP  |     1 |     9 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------
   2 - filter("HIREDATE"&gt;SYSDATE@!-1)
</pre>
We see that the cursor has been invalidated:
<pre>
SQL&gt; select sql_id,child_number,invalidations,plan_hash_value from V$SQL where sql_id='gy8sag39zkrxr';

SQL_ID         CHILD_NUMBER  INVALIDATIONS  PLAN_HASH_VALUE
-------------  ------------  -------------  ---------------
gy8sag39zkrxr  0             1              2,083,865,914
</pre>
If I have any issue with that, I can bring back the index visible:
<pre>
SQL&gt; alter index EMP_HIREDATE visible;
&amp;nbsp
Index EMP_HIREDATE altered.
</pre>
and after running the query again, I can check that the cursor has been invalidated again and is now using the range scan:
<pre>
SQL&gt; select sql_id,child_number,invalidations,plan_hash_value from V$SQL where sql_id='gy8sag39zkrxr';

SQL_ID         CHILD_NUMBER  INVALIDATIONS  PLAN_HASH_VALUE
-------------  ------------  -------------  ---------------
gy8sag39zkrxr  0             2              3,798,098,543
</pre></p>
<h3>It&#8217;s online</h3>
<p>Nothing new here if you know the 12c new features (and if you don&#8217;t we have a <a href="http://www.dbi-services.com/trainings/oracle-12c-new-features-workshop/">training</a> for that). But let&#8217;s stop the trace and grep the &#8216;get lock&#8217; from the dump:
<pre>
SQL&gt; alter session set events='10046 trace name context off : 10704 trace name context off ';

Session altered.
</pre>
I need the OBJECT_ID of my table in hexadecimal to find it in the dump:
<pre>
SQL&gt; column object_id new_value object_id
SQL&gt; select object_name,to_char(object_id,'FM0XXXXXXX') object_id from dba_objects where owner='SCOTT';

OBJECT_NAME   OBJECT_ID
------------  ---------
PK_DEPT       0001677D
DEPT          0001677C
EMP           0001677E
PK_EMP        0001677F
BONUS         00016780
SALGRADE      00016781
EMP_HIREDATE  00016782
</pre>
Get the tracefile
<pre>
SQL&gt; column tracefile new_value tracefile
SQL&gt; select tracefile from v$process where addr=(select paddr from v$session where sid=sys_context('USERENV','SID'));

TRACEFILE
------------------------------------------------------------------------
/u01/app/oracle/diag/rdbms/se2/SE2/trace/SE2_ora_6710_InvisibleIndex.trc

SQL&gt; host mv &amp;tracefile last.trc
</pre>
and filter what I&#8217;m looking for: &#8216;get lock&#8217; for my tables:
<pre>
host grep -A 0 -E 'ksqgtl [*]{3} TM-000167|ksqrcl: TM-000167|ksqcnv: TM-000167|^alter' last.trc
ksqgtl *** TM-0001677E-00000000-00000003-00000000 mode=2 flags=0x400 timeout=0 ***
alter index EMP_HIREDATE invisible
ksqrcl: TM-0001677E-00000000-00000003-00000000
ksqgtl *** TM-0001677E-00000000-00000003-00000000 mode=2 flags=0x400 timeout=0 ***
alter index EMP_HIREDATE visible
ksqrcl: TM-0001677E-00000000-00000003-00000000
</pre>
This is the proof that both statements require only the lowest table lock: mode=2 is Row-S which is compatible with all concurrent DML.
this is an only operation. But there is more.</p>
<h3>It&#8217;s available in SE</h3>
<p>Yes, I&#8217;m in Standard Edition here:
<pre>
SQL&gt; exit
Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production
</pre></p>
<h1>11g</h1>
<p>If you want to see the behaviour in 11g:
<pre>
ksqgtl *** TM-0001bf64-00000000 mode=6 flags=0x401 timeout=0 ***
alter index EMP_HIREDATE invisible
ksqgtl *** TM-0001bf64-00000000 mode=6 flags=0x401 timeout=0 ***
alter index EMP_HIREDATE visible
</pre>
mode=6 is exclusive lock. You don&#8217;t want to do that when DML is running, especially when you already have a problem to fix &#8211; and this is the goal of ALTER INDEX VISIBLE.</p>
<h1>DROP INDEX ONLINE</h1>
<p>Still in the 12c new features, you can drop an index online, requiring only a Row-S lock on the table instead of eXclusive lock.
Here is the 10704 trace:
<pre>
drop index EMP_HIREDATE online
ksqgtl *** TM-0001677E-00000000-00000003-00000000 mode=2 flags=0x400 timeout=0 ***
ksqrcl: TM-0001677E-00000000-00000003-00000000
ksqrcl: TM-0001677E-00000000-00000003-00000000
</pre>
And you know what? I&#8217;m still in Standard Edition.</p>
<h1>So what?</h1>
<p>We can get rid of indexes that are not needed. We can make them invisible for a while and then drop them.
And we can do it online, even it Standard Edition.
However, be careful. Indexes are not used only by the optimizer. They serve as a structure to lock a range of values when you delete from a parent table, in order to prevent any current insert to become orphans. If you make the index invisible, they are still used for that. When you drop them, a table lock will be needed for those cases. More about that at <a href="https://www.doag.org/konferenz/konferenzplaner/b.php?id=473721&amp;locS=1&amp;q=pachot">#DOAG2015</a> or at <a href="http://www.tech15.ukoug.org/default.asp?p=12861&amp;dlgact=shwprs&amp;prs_prsid=10654&amp;day_dayid=93">#TECH15</a>. </p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-38400"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-411">
				<div id="div-comment-411" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/576eeb27294350be454def4152c8d059?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://Sejustloveit.com' rel='external nofollow' class='url'>Ann</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-411">
			September 14, 2015 at 19 h 17 min</a>		</div>

		<p>Nice test, and yes it looks like it&#8217;s there. Index online rebuild is not ok according the license document, so inevitable getting some odd feelings about this
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-4121"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-411' onclick='return addComment.moveForm( "div-comment-411", "411", "respond", "3839" )' aria-label='Reply to Ann to Ann'>Reply to Ann</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
