This was first published on <a href=https://blog.dbi-services.com/modern-software-architecture-what-is-a-database>https://blog.dbi-services.com/modern-software-architecture-what-is-a-database</a> (2016-09-25)
								<h1 class="entry-title">Modern software architecture &#8211; what is a database?</h1>
		<div class="content-inner">
			
						
						
		   
			<p>This blog post is focused at developers and software architects. I&#8217;m probably not writing at the right place. You&#8217;re on an infrastructure experts blog and the author is an Oracle DBA. So what can you learn from someone working on that 30 years old technology talking about that old SQL language ? You run with modern languages, powerful frameworks, multi-layer architecture, micro-services, distributed database and of course all open-source. You hate your DBA because he is the major slow-down for your agile development. You don&#8217;t want SQL. You don&#8217;t want databases. You don&#8217;t want DBA.
<span id="more-11081"></span>
How can I encourage you to read this blog post? I was not always an DBA. I started as a developer, more than 20 years ago. And believe me, it was not prehistory at all. Object-Oriented design, Rapid Application Development, Automatic programming (remember C.A.S.E.?), visual programming (have you ever seen an IDE like IBM Visual Age?), query generation (early days of Business-Objects). All these evolved with more and more languages, frameworks, layers, micro-services, XML, SOA, JSON, REST,&#8230; but only one technology remained: the critial persistent data is still in a relational database and accessed by SQL. </p>
<h3>What is a database</h3>
<p>Most of developers think that a database is there to store and retrieve data. I&#8217;m sorry but that&#8217;s wrong. That may have been right a long time ago, with key-value storage and hierarchical databases, but that&#8217;s too old for me. When I started to work, databases were already doing far more than that. Let me explain. With those prehistoric databases, you retrieved data in the same way you stored it. You insert with a key, you fetch with that key. It is easy to explain to modern developers because they &#8220;invented&#8221; it few years ago, calling it CRUD (Create Read Update Delete). First argument of those CRUD methods is a key value. And you store unformatted data as XML or JSON associated to that value. If this is the only feature that you need, then for sure you don&#8217;t want a database.</p>
<p>Relational database management systems (RDBMS) are doing a lot more than that. First, you can query data in a completely different way than you inserted it. And this is the real life-cycle of data. For example, You take orders, one by one, with customer and product information for each of them. Of course you can update and read it with the order ID that has been generated, but that&#8217;s only a small use case and probably not the most critical. Warehouse users will query (and update) orders by product. Delivery users will query (and update) orders by customer. Marketing users will query by channels and many other dimensions. Finance will join with accounting. With a persistence only system, you have to code all that. Of course if you declared the mapping of associations, you can navigate through them. But the user requirement is to get a set of orders, or a quantity of products in stock, or a subset of customers, which is different from navigating through orders one by one. With a database, you dont need to code anything. With a proper data model what you inserted can be manipulated without its key value. All data that you have inserted can be accessed from any different point of view. And you don&#8217;t have to code anything for that. Imagine a Data Access Object with &#8216;QueryBy methods covering any combination of columns and operators. </p>
<p>A database system does not only store data, it processes data and provide a service to manipulate data.</p>
<h3>SQL</h3>
<p>SQL is not a language to code how to get the information. SQL only describes what you want. It&#8217;s a question you ask to a data service. Same idea as Uber where you enter your destination and desired car and the service manages everything for you: the path, the communication, the paiement, the security. You may not like the SQL syntax, but it can be generated. I&#8217;m not talking about generating CRUD statements here, but generating SQL syntax from a SQL semantic expressed in Java or example. There&#8217;s a very good example for that: <a href="https://blog.dbi-services.com/modern-software-architecture-what-is-a-database/www.jooq.org/" target="_blank">jOOQ</a> (look at the exemples there).</p>
<p>I understand that you can hate SQL for it&#8217;s syntax. SQL was build for pre-compilers, not for execution time parsing of text, and I&#8217;ll come back on that later with static SQL. But you can&#8217;t say that SQL semantic is not modern. It&#8217;s a 4th generation language that saves all the procedural coding you have to do with 3rd generation languages. SQL is a declarative language build on a mathematics theory. It goes far beyond the for() loops and if()else.</p>
<p>In SQL you describe the result that you want. How to retrieve the data is done by the database system. The optimizer builds the procedural code (know as the execution plan) and the execution engine takes care of everything (concurrency, maintaining redundant structures for performance, caching, multithreading, monitoring, debugging, etc). Do you really want to code all that or do you prefer to rely on a data service that does everything for you?</p>
<p>You know why developers don&#8217;t like SQL? Because SQL has not been designed for programmers. It was for users. The goal was that a non-programmer can ask its question to the system (such as &#8220;give me the country of the top customers having bought a specific product in last 3 months&#8221;) without the need of a developer. There was no GUI at that time, only Command Line Interface, and SQL was the User Friendly Interface to the database. Today we have GUIs and we don&#8217;t need SQL. But it is there so programmers build tools or framework to generate SQL from a programming language. Sure it is ridiculous and it would be better to have a programming language that directly calls the SQL semantic without generating plain old English text. We need a Structured Query Language (SQL) we just don&#8217;t need it to be in English. </p>
<h3>Set vs loops</h3>
<p>So why do people prefer to code everything in procedural language (3GL)? Because this is only what they learned. If at school you learned only loops and comparisons, then you are going to access data in loops. If you learned to think about data as sets, then you don&#8217;t need loops. Unfortunately, the set concepts are teached in mathematics classes but not in IT.</p>
<p>Imagine you have to print &#8220;Hello World&#8221; 5 times. Which pseudo-code so you prefer?</p>
<p><pre>
print("Hello World\n")
print("Hello World\n")
print("Hello World\n")
print("Hello World\n")
print("Hello World\n")
</pre></p>
<p>or</p>
<p><pre>
print ( "Hello World\n" + "Hello World\n" + "Hello World\n" + "Hello World\n" + "Hello World\n" )
</pre></p>
<p>I&#8217;ve put that in pseudo-code. I don&#8217;t want to play with String and StringBuffer here. But the idea is only to explain that if you have to process a set of things it is more efficient to process them as a set rather than one-by-one. That works for everything. And this is where databases rocks: they process sets of rows. If you have to increment the column N by one in every row of your table T, you don&#8217;t need to start a loop and increment the column row-by-row. Just ask your RDBMS data service to do it: &#8216;/* PLEASE */ UPDATE T set N=N+1&#8242;. The &#8220;please&#8221; is in comment because everything that is not there to describe the result is not part of SQL. You have to use hints to force the way to do it, but they are written as comments because SQL do not allow any way to tell how to do it. This was a joke of course, the &#8220;please&#8221; is not mandatory because we are talking to a machine.</p>
<h3>ACID</h3>
<p>I&#8217;m not sure you get all the magic that is behind:
<pre>
UPDATE T set N=N+1;
</pre></p>
<p>it&#8217;s not a simple loop as:
<pre>
for each row in T
 set N=N+1
</pre></p>
<p>The RDBMS does more than that. Imagine that there is a unique index on the column N. How many lines of code do you need to do that N=N+1 row by row and be sure that at any point you don&#8217;t have duplicates? Imagine that after updating half of the rows you encounter someone else currently updating the same row. You have to wait for his commit. But then, if he updated the value of N, do you increment the past value or the new one? You can&#8217;t increment the old one or his modification will be lost. But if you increment the new one, your previous incremented rows are inconsistent because they were based on a previous state of data.
I was talking about having an index. You have to maintain this index as well. You have to be sure that what is in cache is consistent with what is in disk. That modifications made in the cache will not be lost in case of server failure. And if you run in a cluster, those caches must be synchronized. </p>
<p>Coding the same as this &#8220;UPDATE T set N=N+1&#8243; in a procedural language is not easy and can become very complex in a multi-user environment. </p>
<p>Maybe you have all the tools you need to generate that code. But if you code it you have to test it. Are your tests covering all concurrency cases (sessions updating or reading same rows, or different rows from same table,&#8230;). What is already coded within the database has already been tested. It&#8217;s a service and you just have to use it.</p>
<h3>Static SQL</h3>
<p>I claimed above that SQL is there to be pre-compiled. Yes, SQL is witten in plain text, like most of programming languages, and must be parsed, optimized, compiled. It&#8217;s not only for performance. The main reason is that you prefer to get errors at compile time than at runtime. If you put SQL in text strings in your code it will remain text until execution time when it will be prepared. And only then you will get errors. The second reason is that when the SQL is parsed, it is easy to find the dependencies. Want to see all SQL statements touching to a specific column? Do you prefer to do guess on some text search or to methodically follow dependencies?</p>
<p> Yes, SQL is there to be static and not dynamic. That claim may look strange for an Oracle DBA because all statements are dynamic in Oracle. Even at the time of precompilers (such as Pro*C) the statements were parsed but were put as text in the binary. And at first execution, they are parsed again and optimized. If you want the execution plan to be defined at deployment time, you have to use Outlines or SQL Plan Baselines. There is no direct way to bind the execution plan at deployment time in Oracle. In my opinion the static SQL as it is known on DB2 for example is really missing in Oracle. OLTP Software Vendors would love to ship the optimized execution plans with their application. Imagine that all SQL statements in an OLTP application are parsed and optimized, compiled as bound procedures, similar to stored procedures, with procedural access (the execution plan) and you just have to call them. For reporting, DSS, BI you need the plans to adapt to the values and volume of data, but for OLTP you need stability. And from the application, you just call those static SQL like a data service.</p>
<p>Talking about procedural execution stored in the database, I&#8217;m coming to stored procedures and PL/SQL of course.</p>
<h3>Stored Procedures</h3>
<p>When you code in your 3GL language, do you have functions that update global variables (BASIC is the first language I learned and this was the idea) or do you define classes which encapsulate the function and the data definition? The revolution of Object Oriented concepts was to put data and logic at the same place. It&#8217;s better for code maintainability with direct dependency procedural code and data structures. It&#8217;s better for security because data is accessible only through provided methods. And it&#8217;s better for performance because procedural code access data at the same place.</p>
<p>Yes Object Oriented design rocks and this why you need to put business logic in the database. Putting the data on one component and running the code on another component of an information system is the worst you can do. Exactly as if in your Object Oriented application you store the object attributes on one node and run the methods on another one. And this is exactly what you do with the business logic outside of the database. Your DAO objects do not hold the data. The database does. Your objects can hold only a copy of the data, but the master copy where are managed concurrency management, high availability and persistance is in the database.</p>
<p>We will talk about the language later, this is only about the fact that the procedural code run in the same machine and the same processes than the data access.
There are a lot of myths about running business logic in the database. Most of them come from ignorance. Until last Monday I believed that one argument against running business logic in the database was unbeatable: You pay Oracle licences on the number of CPU, so you don&#8217;t want to use the database CPUs to run something that can run on a free server. I agreed with that without testing it, and this is where myths come from.</p>
<p>But Toon Koppelaars has tested it and he proved that you use more database CPU when you put the business logic outside of the database. I hope his presentation from Oak Table World 2016 will be available soon. He proved that by analyzing exactly what is running in the database, using linux perf and flame graphs: https://twitter.com/ChrisAntognini/status/778273744242352128</p>
<p>All those rountrips from remote compute server, all those row-by-row processing coming from that design have an higher footprint on the database CPUs that directly running the same on the database server.</p>
<h3>PL/SQL</h3>
<p>Running business logic on the database server can be done with any language. You can create stored procedures in Java. You can code external procedures in C. But those languages have not been designed for data manipulation. It is sufficient to call SQL statements but not when you need procedural data access. PL/SQL is a language made for data processing. It&#8217;s not only for stored procedure. But it&#8217;s the only language that is coupled with your data structure. As I said above, it&#8217;s better to think in sets with SQL. But it may be sometimes complex. With PL/SQL you have a procedural language which is intermediate between row-by-row and sets because it has some bulk processing capabilities.</p>
<p>In pseudo-code the Hello World above is something like that:</p>
<p><pre>
forall s in ["Hello World\n","Hello World\n","Hello World\n","Hello World\n","Hello World\n"] print(s)
</pre></p>
<p>It looks like a loop but it is not. The whole array is passed to the print() function and loop is done at lower level.</p>
<p>In PL/SQL you can also use pipeline functions where rows are processed with a procedural language but as a data stream (like SQL does) rather than loops and calls.</p>
<p>I&#8217;ll go to other advantages of PL/SQL stored procedures but here again there is one reason frequently raised to refuse PL/SQL. You can find more developers in .Net or Java than in PL/SQL. And because they are rare, they are more expensive. But there is a counter argument I heard this week at Oracle Open World (but I don&#8217;t remember who raised that point unfortunately). PL/SQL is easy to learn. Really easy. You have begin &#8211; exception &#8211; end blocks, you declare all variables, you can be modular with procedures and inline procedures, you separate signature and body, you have very good IDE, excellent debugger and easy profiler,&#8230; and you can run it on Oracle XE which is free. So, if you have a good Java developer he can write efficient PL/SQL in a few days. By good developer, I mean someone who understands multi-user concurrency problems, bulk processing, multi-threading, etc.</p>
<p>There are less PL/SQL developers than Java developers because you don&#8217;t use PL/SQL. It&#8217;s not the opposite. If you use PL/SQL you will find developers and there are many software vendors that code their application in PL/SQL. Of course PL/SQL is not free (except in Oracle XE) but it runs on all platforms and on all editions.</p>
<h3>Continuous Integration and Deployment, dependency and versioning</h3>
<p>I come back quickly to the advantages of using a language that is coupled with your data.</p>
<p>PL/SQL stored procedures are compiled and all dependencies are stored. With one query on DBA_DEPENDENCIES you can know which tables your procedure is using and which procedures use a specific table. If you change the data model, the procedures that have to be changed are immediately invalidated. I don&#8217;t know any other language that does that. You don&#8217;t want to break the continuous integration build every time you change something in a table structure? Then go to PL/SQL.</p>
<p>Let&#8217;s go beyond continuous integration. How do you manage database changes in continuous deployment? Do you know that with PL/SQL you can modify your data model online, with your application running and without breaking anything? I said above that procedures impacted by the change are invalidated and the must be adapted to be able to be compiled. But this is only for the new version. You can deploy a new version of those procedures while the previous version is running. You can test this new version and only when everything is ok you switch the application to the new version. The feature is called Edition Based Redefinition (EBR) it exists since 11g in all Oracle editions. It&#8217;s not known and used enough, but all people I know that use it are very happy with it.</p>
<p>In development environment and continuous integration, it is common to say that the database always cause problem. Yes it is true but it&#8217;s not inherent to the database but the data. Data is shared and durable and this is what makes it complex. The code can be deployed in different places, and can be re-deployed if lost. Data can be updated at only one place and visible to all users. Upgrading to a new version of application is easy: you stop the old version and start the new version. For data it is different: you cannot start from scratch and you must keep and upgrade the previous data.</p>
<h3>Object-Relational impedance</h3>
<p>I&#8217;m probably going too far in this blog post but the fact that data is shared and durable is the main reason why we cannot apply same concepts to data objects (business objects) and presentation objects (GUI components). Application objects are transient. When you restart the application, you create other objects. The identity of those objects is an address in memory: it&#8217;s different on other systems and it&#8217;s different once application is restarted. Business objects are different. When you manipulate a business entity, it must have the same identity for any users, and this identity do not change when application is restarted, not even when application is upgraded. All other points given as &#8220;object-relational impedance&#8221; are minor. But the sharing and durability of business object identity is the reason why you have to think differently.</p>
<h3>Where to put business logic?</h3>
<p>If you&#8217;re still there, you&#8217;ve probably understood that it makes sense to run the data logic in the database, with declarative SQL or procedural PL/SQL stored procedures, working in sets or at least in bulk, and with static SQL as much as possible, and versioned by EBR.</p>
<p>Where to put business logic then? Well, business logic is data logic for most of it. But you&#8217;ve always learned that business logic must be in the application tier. Rather than taking reasons given one by one and explain what&#8217;s wrong with them, let me tell you how came this idea of business logic outside of the database. The idea came from my generation: the awesome idea of client/server.</p>
<p>At first, data was processed on the servers and only the presentation layer was on the user side (for example ISAM was very similar with what we do with thin web pages). And this worked very well, but it was only green text terminals. Then came PCs and Windows 3.11 and we wanted graphical applications. So we built applications on our PCs. But that was so easy that we implemented all business logic there. Not because it&#8217;s a better architecture, but because anyone can build his application without asking to the sysops. This was heaven for developers and a nightmare for operations to deploy those applications on all the enterprise PCs.
But this is where offloading business logic started. Application written with nice IDEs (I did this with Borland Paradox and Delphi) connecting directly to the database with SQL. Because application was de-correlated from the database everything was possible. We even wanted to have applications agnostic of the database, running in any RDBMS. Using standard SQL and standard ODBC. Even better: full flexibility for the developer by using only one table with Entity-Value-Attribute.</p>
<p>Actually, the worst design anti-patterns have been invented at that time and we still see them in current applications &#8211; totally unscalable.</p>
<p>When finally the deployment of those client/server applications became a nightmare, and because internet was coming with http, html, java, etc. we went to 3-tier design. Unfortunately, the business logic remained offloaded in the application server instead of being part again of the database server.</p>
<p>I mentioned ODBC and it was another contributor to that confusion. ODBC looks like a logical separation of the application layer and the database layer. But that&#8217;s wrong. ODBC is not a protocol. ODBC is an API. ODBC do not offer a service: it is a driver running on both layers and that magically communicates through network: code to process data on one side and data begin on the other.</p>
<p>A real data service encapsulates many SQL statements and some procedural code. And it is exactly the purpose of stored procedures. This is how all data applications were designed before that client/server orgy and this is how they should be designed today when we focus on centralization and as micro-services applications.</p>
<h3>So what?</h3>
<p>This blog post is already too long. It comes from 20 years experience as developer, application DBA, and operation DBA. I decided to write this when coming back from the Oracle Open World where several people are still advocating for the right design, especially Toon Koppelaars about Thick Database at Oak Table World and the amazing panel about &#8220;Thinking clearly about application architecture&#8221; with Toon Koppelaars, Bryn Llewellyn, Gerald Venzl, Cary Millsap, Connor McDonald</p>
<blockquote class="twitter-tweet" data-width="550"><p lang="en" dir="ltr">The dream of every software architect should be to attend that panel w/ <a href="https://twitter.com/ToonKoppelaars">@ToonKoppelaars</a> <a href="https://twitter.com/BrynLite">@BrynLite</a> <a href="https://twitter.com/GeraldVenzl">@GeraldVenzl</a> <a href="https://twitter.com/CaryMillsap">@CaryMillsap</a> <a href="https://twitter.com/connor_mc_d">@connor_mc_d</a> <a href="https://t.co/npLzpnktMK">pic.twitter.com/npLzpnktMK</a></p>
<p>&mdash; Franck Pachot (@FranckPachot) <a href="https://twitter.com/FranckPachot/status/779016100453298176">September 22, 2016</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Beside the marketing stuff, I was really impressed by the technical content around the Oracle Database this year at OOW16.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-110820"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 3 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-4640">
				<div id="div-comment-4640" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/0908b6561e88e4d921496dd81127be53?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://oracle.ninja' rel='external nofollow' class='url'>Dejan Topalovic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4640">
			September 25, 2016 at 1 h 08 min</a>		</div>

		<p>Hi Franck!
Many thanks for this great article!
I started also as a developer and can remember, how I blamed the DBA:&#8221;The database is slow! Please, do something!&#8221; &#8230; I was young and unexperienced&#8230;
Now, many years later and with some experience in my hands as an Oracle DBA, I understand how I was wrong. I learned to have patience with all developers blaming the database and I &#8220;teached&#8221; them every time how to use the database properly.
8 of 10 developers are thankful and since then, they are making better applications. Unfortunately, 2 of 10 are often too egoistic or stubborn  to admit, that database is not (always) the cause of their issues, but the application they developed!</p>
<p>I will use this article as the reference to any developer complaining about database performance. <img src="../wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /></p>
<p>Kind regards
Dejan
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-46411"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4640' onclick='return addComment.moveForm( "div-comment-4640", "4640", "respond", "11081" )' aria-label='Reply to Dejan to Dejan Topalovic'>Reply to Dejan</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4658">
				<div id="div-comment-4658" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/6c43bcbd04861948195a1e938b0b38cb?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Clemens Bleile</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4658">
			September 25, 2016 at 18 h 48 min</a>		</div>

		<p>Thanks Franck!!!
Toon&#8217;s presentation can actually already be downloaded here:
<a href="https://static.rainfocus.com/oracle/oow16/sess/1464808304988001Fkrf/ppt/CON6460.pdf" rel="nofollow">https://static.rainfocus.com/oracle/oow16/sess/1464808304988001Fkrf/ppt/CON6460.pdf</a>
See also my Blog, where I commented on that topic at the end of the blog:
<a href="http://blog.dbi-services.com/oracle-open-world-2016-day-4-and-5/" rel="nofollow">http://blog.dbi-services.com/oracle-open-world-2016-day-4-and-5/</a>
Clemens
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-46591"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4658' onclick='return addComment.moveForm( "div-comment-4658", "4658", "respond", "11081" )' aria-label='Reply to Clemens to Clemens Bleile'>Reply to Clemens</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-4717">
				<div id="div-comment-4717" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/786bada554dca213e569365370e824a2?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Toon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4717">
			September 28, 2016 at 9 h 00 min</a>		</div>

		<p>I did two presentations, one at OOW, which approached the topic in a broad manner, and one at OTW (Oaktable World), where I went into much more detail.</p>
<p>Above url is the OOW presentation.</p>
<p>The OTW presentation can be downloaded from my blog at: <a href="http://thehelsinkideclaration.blogspot.co.uk/2016/09/noplsql-vs-thickdb-which-one-requires.html" rel="nofollow">http://thehelsinkideclaration.blogspot.co.uk/2016/09/noplsql-vs-thickdb-which-one-requires.html</a>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-47181"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4717' onclick='return addComment.moveForm( "div-comment-4717", "4717", "respond", "11081" )' aria-label='Reply to Toon to Toon'>Reply to Toon</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
