This was first published on <a href=https://blog.dbi-services.com/multitenant-internals-how-object-links-are-parsedexecuted>https://blog.dbi-services.com/multitenant-internals-how-object-links-are-parsedexecuted</a> (2016-08-07)
								<h1 class="entry-title">Multitenant internals: how object links are parsed/executed</h1>
		<div class="content-inner">
			
						
						
		   
			<p>I had a <a href="http://blog.dbi-services.com/oracle-12c-cdb-metadata-a-object-links-internals/#comment-4178" title="comment" target="_blank">comment</a> on object links internals when creating a sharing=object view on GV$SESSION. Before posting about this specific case, I realized that I&#8217;ve never explained how a query on an object link is run on the CDB$ROOT container.
<span id="more-10143"></span></p>
<h3>Data link testcase</h3>
<p>Here is how I create the DEMOT table and DEMOV view as object link.
<pre>
14:48:58 SQL&gt; connect / as sysdba
Connected.
14:48:59 SQL&gt; alter session set container=CDB$ROOT;
Session altered.
14:48:59 SQL&gt; alter session set "_oracle_script"=true;
Session altered.
14:48:59 SQL&gt; create table DEMOT as select rownum id, rownum num from xmltable('10 to 1000000');
Table created.
SQL&gt; exec dbms_stats.gather_table_stats('','DEMOT');
14:49:00 SQL&gt; create view DEMOV sharing=object as select * from DEMOT;
View created.
14:49:00 SQL&gt; alter session set container=PDB;
Session altered.
14:49:00 SQL&gt; create table DEMOT as select rownum id, rownum num from xmltable('1 to 1');
Table created.
SQL&gt; exec dbms_stats.gather_table_stats('','DEMOT');
14:49:01 SQL&gt; create view DEMOV sharing=object as select * from DEMOT;
View created.
14:49:01 SQL&gt; alter session set "_oracle_script"=false;
Session altered.
</pre></p>
<p>And I run the following query two times (easier to look at trace without hard parsing)
<pre>
14:49:02 SQL&gt; select id from DEMOV where num&lt;=100;
...
100 rows selected.
</pre></p>
<h3>SQL_TRACE</h3>
<p>I&#8217;ll detail the sql_trace of the last run.</p>
<p>First, the query is parsed in our PDB:
<pre>
PARSING IN CURSOR #140360238365672 len=35 dep=0 uid=0 oct=3 lid=0 tim=687080512770 hv=237558885 ad='10cf55ae8' sqlid=' duy45bn72jr35'
select id from DEMOV where num&lt;=100
END OF STMT
PARSE #140360238365672:c=0,e=86,p=0,cr=0,cu=0,mis=0,r=0,dep=0,og=1,plh=3055399777,tim=687080512769
EXEC #140360238365672:c=0,e=61,p=0,cr=0,cu=0,mis=0,r=0,dep=0,og=1,plh=3055399777,tim=687080512872
</pre></p>
<p>There was no hard parse for this second parse call (mis=0 means no &#8216;Misses in library cache during parse&#8217;). Execution occurred but no fetch yet.</p>
<p>At that point, the session switches to CDB$ROOT container (you have to trust me as there is no information about it in the trace file in 12.1)
<pre>
PARSING IN CURSOR #140360238643592 len=99 dep=1 uid=0 oct=3 lid=0 tim=687080513015 hv=2967959178 ad='107be5590' sqlid=' 3b9x1rasffxna'
SELECT /*+ RESULT_CACHE (SYSOBJ=TRUE) */ ID,NUM FROM "SYS"."DEMOV" "DEMOV" WHERE "DEMOV"."NUM"&lt;=100
END OF STMT
PARSE #140360238643592:c=0,e=33,p=0,cr=0,cu=0,mis=0,r=0,dep=1,og=4,plh=3598352655,tim=687080513014
EXEC #140360238643592:c=0,e=16,p=0,cr=0,cu=0,mis=0,r=0,dep=1,og=4,plh=3598352655,tim=687080513084
FETCH #140360238643592:c=0,e=32,p=0,cr=0,cu=0,mis=0,r=100,dep=1,og=4,plh=3598352655,tim=687080513137
STAT #140360238643592 id=1 cnt=100 pid=0 pos=1 obj=0 op=&#039;RESULT CACHE  cgn1rxw6ycznac8fyzfursq2z6 (cr=0 pr=0 pw=0 time=12 us)&#039;
STAT #140360238643592 id=2 cnt=0 pid=1 pos=1 obj=98422 op=&#039;TABLE ACCESS FULL DEMOT (cr=0 pr=0 pw=0 time=0 us)&#039;
</pre></p>
<p>We have here a recursive query (dep=1) that is run on the view in CDB$ROOT. It&#8217;s not the same query as ours: FROM clause is our sharing=object view, WHERE clause is the predicates that applies on it, and SELECT clause the columns that we need (ID was in my SELECT clause and NUM was in my WHERE  clause). The query is parsed, executed, the 100 rows are fetched and interestingly the result goes to result cache. Yes, if you query V$RESULT_CACHE_OBJECTS in a CDB you will see lot of objects:</p>
<blockquote class="twitter-tweet" data-width="550"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/multitenant?src=hash">#multitenant</a> object links uses result cache internally. AWR views are object links. <a href="https://t.co/V5IMW2qQx2">pic.twitter.com/V5IMW2qQx2</a></p>
<p>&mdash; Franck Pachot (@FranckPachot) <a href="https://twitter.com/FranckPachot/status/762195342804738048">August 7, 2016</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>If you look at the FETCH line above, you see that the second execution was a result cache hit (cr=0)</p>
<p>So, the rows we require from the object link are fetched, then the execution of our query continues in our PDB:</p>
<p><pre>
FETCH #140360238365672:c=0,e=235,p=0,cr=0,cu=0,mis=0,r=1,dep=0,og=1,plh=3055399777,tim=687080513194
FETCH #140360238365672:c=0,e=11,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080513375
FETCH #140360238365672:c=0,e=10,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080513586
FETCH #140360238365672:c=0,e=9,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080513776
FETCH #140360238365672:c=0,e=9,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080513983
FETCH #140360238365672:c=0,e=9,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080514188
FETCH #140360238365672:c=0,e=8,p=0,cr=0,cu=0,mis=0,r=15,dep=0,og=1,plh=3055399777,tim=687080514375
</pre></p>
<p>Up there 91 rows were fetched. We can see in the trace that the recursive cursor is closed there (session switches to CDB$ROOT for that):
<pre>
CLOSE #140360238643592:c=0,e=3,dep=1,type=0,tim=687080514584
</pre>
And our session is back on PDB container where the remaining rows are fetched and our cursor closed:
<pre>
FETCH #140360238365672:c=0,e=40,p=0,cr=0,cu=0,mis=0,r=9,dep=0,og=1,plh=3055399777,tim=687080514610
STAT #140360238365672 id=1 cnt=100 pid=0 pos=1 obj=0 op='FIXED TABLE FULL X$OBLNK$ (cr=0 pr=0 pw=0 time=263 us cost=0 size=13000 card=500)'
CLOSE #140360238365672:c=0,e=3,dep=0,type=0,tim=687080516173
</pre></p>
<p>As I&#8217;ve explained at DOAGDB16 and SOUG Day (next session is planned for <a href="http://www.tech16.ukoug.org/default.asp?p=14778&amp;dlgact=shwprs&amp;prs_prsid=11878&amp;day_dayid=108" target="_blank">UKOUG TECH16</a>), following metadata and object links is done by the session switching from PDB to CDB$ROOT.</p>
<h3>TKPROF</h3>
<p>Here is the tkprof of the full trace with two executions</p>
<h4>Our query on PDB</h4>
<p><pre>
SQL ID:  duy45bn72jr35 Plan Hash: 3055399777

select id
from
 DEMOV where num&lt;=100

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        2      0.00       0.00          0          0          0           0
Execute      2      0.00       0.00          0          0          0           0
Fetch       16      0.00       0.00          0          0          0         200
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total       20      0.00       0.00          0          0          0         200

Misses in library cache during parse: 1
Optimizer mode: ALL_ROWS
Parsing user id: SYS
Number of plan statistics captured: 2

Rows (1st) Rows (avg) Rows (max)  Row Source Operation
---------- ---------- ----------  ---------------------------------------------------
       100        100        100  FIXED TABLE FULL X$OBLNK$ (cr=1040 pr=1034 pw=0 time=42636 us cost=0 size=13000 card=500)
</pre></p>
<p>The number of executions and row count is correct, but there&#8217;s no logical reads here because all block reads occurred through the recursive query. The execution plan shows are full table scan on X$OBLNK$ which is how object link access path are displayed in 12.1</p>
<h4>Query on CDB$ROOT</h4>
<p><pre>
SQL ID:  3b9x1rasffxna Plan Hash: 3598352655

SELECT /*+ RESULT_CACHE (SYSOBJ=TRUE) */ ID,NUM
FROM
 "SYS"."DEMOV" "DEMOV" WHERE "DEMOV"."NUM"&lt;=100

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        2      0.00       0.00          0          0          0           0
Execute      2      0.00       0.00          0          0          0           0
Fetch        2      0.03       0.08       2068       2074          0         200
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        6      0.03       0.08       2068       2074          0         200

Misses in library cache during parse: 1
Optimizer mode: CHOOSE
Parsing user id: SYS   (recursive depth: 1)
Number of plan statistics captured: 2

Rows (1st) Rows (avg) Rows (max)  Row Source Operation
---------- ---------- ----------  ---------------------------------------------------
       100        100        100  RESULT CACHE  cgn1rxw6ycznac8fyzfursq2z6 (cr=1037 pr=1034 pw=0 time=662 us)
       100         50        100   TABLE ACCESS FULL DEMOT (cr=1037 pr=1034 pw=0 time=522 us)
</pre></p>
<p>Here is where the work to get rows from the view is, in CDB$ROOT. Only two fetches there (one per execution). As we have seen in the row trace, all rows from the object link were fetched before we issue any fetch call from our query. I did same test with more rows selected and it seems that the fetch size is 200 rows: when 200 rows are fetched from CDB$ROOT, session switches back to PDB to fetch those rows (15 by 15 with the default sqlplus arraysize) and comes again to CDB$ROOT for next 200 rows. This means that they are probably buffered.</p>
<p>Actually there&#8217;s a hidden parameter to define that: &#8220;_cdb_view_prefetch_batch_size&#8221; is set to 200 by default.</p>
<p>Note that the 2000 logical reads are from the first execution only because the second one found the result in result cache.</p>
<h3>V$SQL</h3>
<p>From SQL_TRACE, the work done in the other container is not included in statement statistics. This makes tuning more difficult as we are used to see recursive work cumulated in the top level statement.</p>
<p>From CDB$ROOT here is what we can see from the shared pool (V$SQL) about the queries I&#8217;ve seen in the SQL_TRACE. I query V$SQL with the PLAN_HASH_VALUE (&#8216;phv&#8217; in the SQL_TRACE dump).</p>
<p><pre>
14:49:02 SQL&gt; select con_id,sql_id,rows_processed,plan_hash_value,executions,parse_calls,fetches,buffer_gets,sql_text from v$sql where  plan_hash_value in (3598352655,3055399777) order by last_active_time;

    CON_ID SQL_ID        ROWS_PROCESSED PLAN_HASH_VALUE EXECUTIONS PARSE_CALLS    FETCHES BUFFER_GETS SQL_TEXT
---------- ------------- -------------- --------------- ---------- ----------- ---------- ----------- --------------------------------------------------------------------------------
         4 duy45bn72jr35            200      3055399777          2           2         16        2721 select id from DEMOV where num&lt;=100
         4 bynmh7xm4bf54              0      3598352655          0           1          0          61 SELECT * FROM NO_OBJECT_LINK(&quot;SYS&quot;.&quot;DEMOV&quot;)
         1 3b9x1rasffxna            200      3598352655          2           2          2        2080 SELECT /*+ RESULT_CACHE (SYSOBJ=TRUE) */ ID,NUM FROM &quot;SYS&quot;.&quot;DEMOV&quot; &quot;DEMOV&quot; WHERE
</pre></p>
<p>For the two queries we have seen above, the number of executions and fetches matches what we have seen in the trace. However, buffer_gets from the user query includes the logical reads from the recursive query.</p>
<p>But there&#8217;s more here. A statement is there with the same PLAN_HASH_VALUE than the internal query. It&#8217;s the query on the shared=object view, with the undocumented NO_OBJECT_LINK() function. It is parsed but not executed. This parse occurred in PDB just before switching to CDB$ROOT. This parse occurend only one time when our query was hard parsed. It has the same plan hash value than the internal query because the plan is the same: full table scan on the table.</p>
<p>My understanding of that is that when hard parsing our query and executing the recursive query on CDB$ROOT, the optimizer checks the view definition in the current container (the PDB) by parsing it without following object links (reason for the NO_OBJECT_LINK).</p>
<h3>NO_OBJECT_LINK</h3>
<p>Here is the parsing of that query with NO_OBJECT_LINK that occurs in the PDB:</p>
<p><pre>
PARSING IN CURSOR #140360238422472 len=43 dep=1 uid=0 oct=3 lid=0 tim=687080413554 hv=1715845284 ad='108fc0230' sqlid=' bynmh7xm4bf54'
SELECT * FROM NO_OBJECT_LINK("SYS"."DEMOV")
END OF STMT
PARSE #140360238422472:c=3000,e=2948,p=0,cr=61,cu=0,mis=1,r=0,dep=1,og=4,plh=3598352655,tim=687080413553
CLOSE #140360238422472:c=0,e=3,dep=1,type=0,tim=687080413614
</pre></p>
<p>There is no where clause here. I guess that the goal is just to validate the view in the PDB before executing the full query on CDB$ROOT.</p>
<p>Note that query in the CDB$ROOT do not use the NO_OBJECT_LINK here in 12.1 but could have use it to ensure that there are no further links.</p>
<h3>Execution plans</h3>
<p>With all those recursive queries, how the cardinalities are estimated? DEMOT has no rows in PDB and 1000000 rows in CDB$ROOT. Statistics gathered and I query only 100 rows (they are evenly distributed between low and high value);</p>
<p>The query that is only parsed in PDB:
<pre>
PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------
SQL_ID  bynmh7xm4bf54, child number 0
-------------------------------------
SELECT * FROM NO_OBJECT_LINK("SYS"."DEMOV")
Plan hash value: 3598352655
---------------------------------------------------------------------------
| Id  | Operation         | Name  | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |       |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS FULL| DEMOT |     1 |     6 |     2   (0)| 00:00:01 |
---------------------------------------------------------------------------
</pre></p>
<p>The query that is run in CDB$ROOT:
<pre>
PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------
SQL_ID  3b9x1rasffxna, child number 0
-------------------------------------
SELECT /*+ RESULT_CACHE (SYSOBJ=TRUE) */ ID,NUM FROM "SYS"."DEMOV"
"DEMOV" WHERE "DEMOV"."NUM"&lt;=100
Plan hash value: 3598352655
-------------------------------------------------------------------------------------------------
| Id  | Operation          | Name                       | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |                            |       |       |   568 (100)|          |
|   1 |  RESULT CACHE      | 9cv1sbwyz16651fgh17234v67g |       |       |            |          |
|*  2 |   TABLE ACCESS FULL| DEMOT                      |   100 |  1000 |   568   (2)| 00:00:01 |
-------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
   2 - filter(&quot;NUM&quot;&lt;=100)
</pre></p>
<p>Estimation is ok here.</p>
<p>And my user query:
<pre>
PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------
SQL_ID  duy45bn72jr35, child number 0
-------------------------------------
select id from DEMOV where num&lt;=100
Plan hash value: 3055399777
------------------------------------------------------------------
| Id  | Operation        | Name     | Rows  | Bytes | Cost (%CPU)|
------------------------------------------------------------------
|   0 | SELECT STATEMENT |          |       |       |     1 (100)|
|*  1 |  FIXED TABLE FULL| X$OBLNK$ |   500 | 13000 |     0   (0)|
------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
   1 - filter(&quot;NUM&quot;&lt;=100)
</pre></p>
<p>Here, this estimation is not accurate at all, seems to have an hardcoded value of 500.</p>
<h3>Conclusion</h3>
<p>Lot of interesting things here. Object link (that you can call data links as well) are processed in a very special way. But don&#8217;t worry. Remember that you are not allowed to create them yourself. And there are only very few oracle maintained object links: some PDB information that must be available when PDB are not opened, AWR information that is consolidated in root, some audit reference tables,&#8230;</p>
<p>It interesting to see (and think about all consequences) that result cache is used here for internal optimization. Even when you don&#8217;t use result cache for your application, you should have a look at it and maybe size it differently than default. In a future post I&#8217;ll create a sharing=object view on V$ fixed views and result cache will be even more fun.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-101440"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
