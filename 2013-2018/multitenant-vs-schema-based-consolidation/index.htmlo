This was first published on <a href=https://blog.dbi-services.com/multitenant-vs-schema-based-consolidation>https://blog.dbi-services.com/multitenant-vs-schema-based-consolidation</a> (2015-06-30)
								<h1 class="entry-title">Multitenant vs. schema based consolidation</h1>
		<div class="content-inner">
			
						
						
		   
			<p>If you want to install multiple instances of a software, for example you host the ERP for several companies or subsidiaries, you have 3 solutions:</p>
<ul>
<li>have one database and multiple schema</li>
<li>have multiple databases</li>
<li>have one database and multiple pluggable databases</li>
</ul>
<p>Of course, this is exactly the reason for pluggable databases: multitenant. You have good isolation but still share resources. A lot of reasons have been given why multiple schema &#8211; or schema based consolidation &#8211; is not a good solution. I don&#8217;t agree with most of them. But there is one very good reason that I&#8217;ll show later and it&#8217;s about cursor sharing.</p>
<h3>schema based consolidation</h3>
<p>Let&#8217;s take the Oracle <a href="http://www.oracle.com/technetwork/database/multitenant-wp-12c-1949736.pdf">white paper</a> presenting multitenancy.</p>
<p><strong>Name collision might prevent schema-based consolidation</strong></p>
<p>Yes some applications have a fixed schema name. If your ERP must be installed in SYSERP schema, then you cannot install several ones in the same database.</p>
<p>However, you should challenge your application provider for that before changing all your infrastructure and buying expensive options. Maybe I&#8217;m too optimistic here, but I  think it&#8217;s something from the past. I remember a telco billing software I&#8217;ve installed 15 years ago. The schema was &#8216;PB&#8217;. It had nothing to do with the software name or the vendor name. But when I asked if I can change, answer was No. That schema name was hard-coded everywhere. It got it when the main developer came to visit us&#8230; his name was Pierre B.</p>
<p>About public synonyms, and public database links&#8230; please just avoid them.</p>
<p><strong>Schema-based consolidation brings weak security</strong></p>
<p>Same idea. If your application requires a &#8216;SELECT ANY PRIVILEGE&#8217; then don&#8217;t do it. In 12c you have privilege analysis that can help to identify the minimal rights you need to grant.</p>
<p>&nbsp;</p>
<p><strong>Per application backend point-in-time recovery is prohibitively difficult</strong></p>
<p>I don&#8217;t see the point. Currently multitenant do not give us more options because pluggable database point in time recovery, nor flashback pluggable database, is currently possible in-place. But I know it&#8217;s planned for the future. You can already read about it at <a href="http://www.google.com/patents/US20140095452">http://www.google.com/patents/US20140095452</a></p>
<p>Of course, when using schema-based consolidation you should used different tablespaces and you have TSPITR.</p>
<p>&nbsp;</p>
<p><strong>Resource management between application backends is difficult</strong></p>
<p>Well you don&#8217;t need pluggable database to use services. Multitenant is just an easy way to force the application to use specific services.</p>
<p>&nbsp;</p>
<p><strong>Patching the Oracle version for a single application backend is not possible</strong></p>
<p>Yes, plugging a PDB into a different version CDB can be faster for those applications that have lot of objects. But it is not as easy as the doc says. The PDB dictionary must be patched. It&#8217;s still a good think when the system metadata is a lot smaller than the application metadata</p>
<p>&nbsp;</p>
<p><strong>Cloning a single application backend is difficult</strong></p>
<p>Cloning a PDB is easy. Right.</p>
<p>Finally, multitenant is nice because of pluggable databases. Do you know that all occurrence of &#8216;multitenant&#8217; in 12c code or documentation was &#8216;pluggable database&#8217; one month before the release?</p>
<p>But wait a minute, I&#8217;m not talking about test environments here. I&#8217;m talking about consolidating the similar production databases. And all the plug/unplug has the same problem as transportable tablespaces: source must be made read-only.</p>
<p>&nbsp;</p>
<h3>Cursor sharing in schema based consolidation</h3>
<p>&nbsp;</p>
<p>Time to show you what is the big advantage of multitenant.</p>
<p>&nbsp;</p>
<p>10 years ago I worked on a database that had 3000 schemas. Well we had 5 databases like that. You can think of them as specialized datamarts: same code, same data model, but different data, used by application services provided to different customers. A total of 45TB was quite nice at that time.</p>
<p>That was growing very fast and we had 3 issues.</p>
<p>Issue one was capacity planning. The growth was difficult to predict. We had to move those schemas from one database to another, from one Storage system to another&#8230; It was 10g &#8211; no online datafile move at that time. Transportable tablespaces was there, but see next point.</p>
<p>The second issue was the number of files. At first, each datamart had its set of tablespaces. But &gt;5000 datafiles on a database was too much for several reasons. One of the reason was RMAN. I remember a duplicate with skip tablespace took 2 days to initialize&#8230;</p>
<p>Then we have consolidated several datamarts into same tablespaces. When I think about it, the multitenant database we can have today (12c) would not have been an easy solution. Lot of pluggable databases mean lot of datafiles. I hope those RMAN issues have been fixed. But there are other ones. Did you ever try to query DBA_EXTENTS on a &gt;5000 datafiles database? I had to when we had some block corruption on the SAN (you know, because of issue 1 we did lot of online reorg of the filesystems, and SAN software had a bug) This is where I made my <a href="https://blog.dbi-services.com/an-alternative-to-dbaextents-optimized-for-lmt">alternative to DBA_EXTENTS</a>.</p>
<p>Then the third issue was cursor sharing.</p>
<p>Let me give you an example</p>
<p>I create the same table in two schemas (DEMO1 and DEMO2) of same database.</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; connect demo1/demo@//192.168.78.113/PDB1
Connected.
SQL&gt; create table DEMO as select * from dual;

Table created.

SQL&gt; select * from DEMO;

D
-
X

SQL&gt; select prev_sql_id from v$session where sid=sys_context('userenv','sid');

PREV_SQL_ID
-------------
0m8kbvzchkytt

SQL&gt;
SQL&gt; connect demo2/demo@//192.168.78.113/PDB1
Connected.
SQL&gt; create table DEMO as select * from dual;

Table created.

SQL&gt; select * from DEMO;

D
-
X
</pre>
<p>I&#8217;m in multitenant here because of the second test I&#8217;ll do, but it&#8217;s the same pluggable database PDB1.</p>
<p>You see that I&#8217;ve executed exactly the same statement &#8211; SELECT * FROM DEMO &#8211; in both connections. Same statement but on different tables. Let&#8217;s look at the cursors:</p>
<p><a class="easyblog-thumb-preview" title="CaptureShared1.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureShared1.JPG" rel="lightbox[2440]"><img title="b2ap3_thumbnail_CaptureShared1.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_CaptureShared1.JPG" alt="b2ap3_thumbnail_CaptureShared1.JPG" /></a></p>
<p>The optimization tried to share the same cursor. The parent cursor is the same because the sql text is the same. Then it follows the child list in order to see if a child can be shared. But semantic verification sees that it&#8217;s not the same &#8216;DEMO&#8217; table and it had to hard parse.</p>
<p>The problem is not hard parse. It&#8217;s not the same table, then it&#8217;s another cursor. Only the name is the same.</p>
<p>Imagine what happened on my database where I had 3000 identical queries on different schemas. We didn&#8217;t have &#8216;perf flame graphs&#8217; at that time, or we would have seen a large flame over <span style="color: #333333;font-size: 12px">kkscsSearchChildList</span>.</p>
<p>Looking at thousand of child cursors in the hope to find one that can be shared is very expensive. And because it&#8217;s the same parent cursor, there is a high contention on the latch protecting the parent.</p>
<p>The solution at that time was to add a comment into the sql statements with the name of the datamart, so that each one is a different sql text &#8211; different parent cursor. But that was a big change of code with dynamic SQL.</p>
<h3>Cursor sharing in multitenant consolidation</h3>
<p>So, in 12c if I run the same query on different pluggable databases. After the previous test where I had two child cursors in the PDB1 (CON_ID=5) I have run the same in PDB2 (CON_ID=4) and here is the view of parent and child cursors from the CDB:</p>
<p><a class="easyblog-thumb-preview" title="CaptureShared2.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureShared2.JPG" rel="lightbox[2440]"><img title="b2ap3_thumbnail_CaptureShared2.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_CaptureShared2.JPG" alt="b2ap3_thumbnail_CaptureShared2.JPG" /></a></p>
<p>We have the two child cursors from the previous test and we have a new child for CON_ID=4</p>
<p>The child number may be misleading but the search for shareable cursor is done only for the current container, so the same query when run from another pluggable database did not try to share a previous cursor. We can see that because there is not an additional &#8216;reason&#8217; in V$SQL_SHARED_CURSOR.</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select con_id,sql_id,version_count from v$sqlarea where sql_id='0m8kbvzchkytt';

    CON_ID SQL_ID        VERSION_COUNT
---------- ------------- -------------
         5 0m8kbvzchkytt             3
         4 0m8kbvzchkytt             3
</pre>
<p>The V$SQLAREA is also misleading because VERSION_COUNT aggregates the versions across containers.</p>
<p>But the real behavior is visible in V$SQL_SHARED_CURSOR above and if you run that with a lot of child cursor you will see the difference in CPU time, latching activity, etc.</p>
<h3>Conclusion</h3>
<p>I&#8217;m not talking about pluggable databases here. Pluggable database do not need the multitenant option as you can plug/unplug database in single-tenant. Pluggable database is a nice evolution of transportable database.</p>
<p>When it comes to multitenant &#8211; having several pluggable database in the same container, in order to have several &#8216;instances&#8217; of your software without demultiplicating the instances of your RDBMS &#8211; then here is the big point: <strong>consolidation scalability</strong>.</p>
<p>You can add new pluggable databases, and run same application code on them, without increasing contention, because most of the instance resources are isolated to one container.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-24410" data-img="http://blog.dbi-services.com/images/easyblog_images/139/b2ap3_thumbnail_CaptureShared1.JPG"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 4 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1532">
				<div id="div-comment-1532" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/0c0057c229b4f3490a4995e029298d65?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Johnnyq72</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1532">
			June 30, 2015 at 18 h 47 min</a>		</div>

		<p>Thanks Franck, for sharing this. It clears up again a number of things and blows some of the &#8220;marketing smoke&#8221; away!
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-15331"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1532' onclick='return addComment.moveForm( "div-comment-1532", "1532", "respond", "2440" )' aria-label='Reply to Johnnyq72 to Johnnyq72'>Reply to Johnnyq72</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1533">
				<div id="div-comment-1533" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1533">
			June 30, 2015 at 19 h 41 min</a>		</div>

		<p>Hi Jan, thanks for your feedback.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-15341"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1533' onclick='return addComment.moveForm( "div-comment-1533", "1533", "respond", "2440" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-2180">
				<div id="div-comment-2180" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/6d86558966064f0e910d6df80e4707b1?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://otipstricks.blogspot.com/' rel='external nofollow' class='url'>Andy Black</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2180">
			December 18, 2015 at 19 h 11 min</a>		</div>

		<p>This is a great, well thought out post.  I&#8217;ve had this discussion twice this month with people who requested a pluggable.  When I asked them why&#8230;they eventually requested a schema.  There&#8217;s a great use case for Multitenant that you mentioned initially, but its not every installation, everywhere.  At US$17,500.00/Processor+Software Update License and Support (First Year) US$3,850.00&#8230;you really need a strong case for this feature before standardizing on it.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-21811"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2180' onclick='return addComment.moveForm( "div-comment-2180", "2180", "respond", "2440" )' aria-label='Reply to Andy to Andy Black'>Reply to Andy</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-2181">
				<div id="div-comment-2181" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2181">
			December 18, 2015 at 20 h 09 min</a>		</div>

		<p>Hi Andy,
Thanks for your feedback.
Note that some points here are from 12.1 and we can expect them to be improved in 12.2 (patching, moving, etc)
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-21821"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2181' onclick='return addComment.moveForm( "div-comment-2181", "2181", "respond", "2440" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
