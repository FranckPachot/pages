This was first published on <a href=https://blog.dbi-services.com/nulls-in-composite-keys>https://blog.dbi-services.com/nulls-in-composite-keys</a> (2016-07-12)
								<h1 class="entry-title">Nulls in composite keys</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Comparison of NULL can be misleading and it&#8217;s even worse for unique constraint validation. Having partial nulls in a composite key can be tricky because the SQL ANSI specification is not very easy to understand, and implementation can depend on the RDBMS. Here is an example with composite unique key and foreign key on Oracle.
<span id="more-9696"></span></p>
<h3>Unique constraint</h3>
<p>I create a table with a composite unique constraint:
<pre>SQL&gt; create table TABLE1 (a char, b char, unique(a,b));
Table TABLE1 created.</pre></p>
<p>I can insert a row with a=&#8217;X&#8217; and b=&#8217;X':
<pre>SQL&gt; insert into TABLE1 values ('X','X');
1 row inserted.</pre></p>
<p>I cannot insert the same row:
<pre>SQL&gt; insert into TABLE1 values ('X','X');
*
ERROR at line 1:
ORA-00001: unique constraint (SYS.SYS_C0015464) violated
</pre></p>
<p>I insert another row with same value for column a but different value for column b:
<pre>SQL&gt; insert into TABLE1 values ('X','Y');
1 row inserted.</pre></p>
<p>And another row with same value for column a but a null for column b:
<pre>SQL&gt; insert into TABLE1 values ('X',null);
1 row inserted.</pre></p>
<p>However, I cannot insert the same a second time:
<pre>SQL&gt; insert into TABLE1 values ('X',null);
*
ERROR at line 1:
ORA-00001: unique constraint (SYS.SYS_C0015464) violated
</pre></p>
<p>If you look at <a href="https://docs.oracle.com/database/121/SQLRF/clauses002.htm#SQLRF52180" target="_blank">documentation</a>, this is documented as:
<em> Because of the search mechanism for unique key constraints on multiple columns, you cannot have identical values in the non-null columns of a partially null composite unique key constraint.</em></p>
<p>It looks like an implementation reason (the search mechanism is the index that enforces the unique constraint). What is documented in <a href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt" target="_blank">SQL-92</a>?
<em>A unique constraint is satisfied if and only if no two rows in a table have the same non-null values in the unique columns. </em></p>
<p>How to interpret this? We cannot insert two (&#8216;X&#8217;,null) because that would be two rows with same non-null value (a=&#8217;X&#8217;) and the Oracle implementation is compilent. </p>
<p>Or is it? We can also read the definition as the unique constraint being violated only when we find rows that have non-null values and they are the same. This is what <a href="http://sqlfiddle.com/#!9/e67a2e/1" target="_blank">MySQL</a> and <a href="http://sqlfiddle.com/#!15/bee51/2" target="_blank">PostgresSQL</a> do: accept duplicates when there is at least one null.
This is also what I found more intuitive: I usually consider NULL as a value that is not known at insert time but that will be assigned a value later during the lifecycle of the row. Thus, I expect to be able to insert rows where there is a null and check the constraint only when all columns have a value.</p>
<p>It is probably an implementation choice from Oracle which stores nulls as a zero-length string and then cannot have two identical entries in a unique index.</p>
<p>Now inserting a row where a is null and b is null:
<pre>SQL&gt; insert into TABLE1 values (null,null);
1 row inserted.</pre></p>
<p>And because that do not violate the rule whatever the way we read it (non-null values are not the same as there are no non-null values at all here) I can insert a second one:
<pre>SQL&gt; insert into TABLE1 values (null,null);
1 row inserted.</pre></p>
<p>This is <a href="https://docs.oracle.com/database/121/SQLRF/clauses002.htm#SQLRF52180" target="_blank">documented</a> as
<em>Unless a NOT NULL constraint is also defined, a null always satisfies a unique key constraint</em></p>
<p>About implementation, there is no problem because full null entries are not stored in the index. They are stored in bitmap indexes, but bitmap indexes cannot be used to enforce a unique constraint.</p>
<p>In summary, here is what can be stored on a table where (a,b) is unique but nullable:</p>
<p><pre>SQL&gt; select rownum,TABLE1.* from TABLE1;

    ROWNUM A B
---------- - -
         1 X X
         2 X Y
         3 X
         4
         5
</pre> </p>
<h3>Foreign key</h3>
<p>Now that I have a unique key, I can reference it:
<pre>SQL&gt; create table TABLE2 (a char, b char, foreign key(a,b) references TABLE1(a,b));
Table TABLE2 created.</pre></p>
<p>Yes. You don&#8217;t need to reference the primary key. Any unique key, even with nullable columns, can be referenced.</p>
<p>I can insert a row where parent exists:
<pre>SQL&gt; insert into TABLE2 values('X','X');
1 row inserted.</pre></p>
<p>As I&#8217;ve no unique key on the child, it&#8217;s many to one relationship:
<pre>SQL&gt; insert into TABLE2 values('X','X');
1 row inserted.</pre></p>
<p>I also have a parent with a=&#8217;X&#8217; and b=&#8217;Y':
<pre>SQL&gt; insert into TABLE2 values('X','Y');
1 row inserted.</pre></p>
<p>But I&#8217;ve no parent with a=&#8217;Y':
<pre>SQL&gt; insert into TABLE2 values('Y','Y');
*
ERROR at line 1:
ORA-02291: integrity constraint (SYS.SYS_C0015465) violated - parent key not found</pre></p>
<p>So far so good. I said that I have a many to one relationship, but it&#8217;s a many to one or zero because my columns are nullable:
<pre>SQL&gt; insert into TABLE2 values(null,null);
1 row inserted.</pre></p>
<p>So far so good. But I have a composite key with nullable columns here, and I can insert a row where a=&#8217;X&#8217; and b is null:
<pre>SQL&gt; insert into TABLE2 values('X',null);
1 row inserted.</pre></p>
<p>But do you think that all non null parent values must exist?
<pre>SQL&gt; insert into TABLE2 values('Y',null);
1 row inserted.</pre></p>
<p>Once again, this is <a href="https://docs.oracle.com/database/121/CNCPT/datainte.htm#CNCPT33335" target="_blank">documented</a> as:
<em>If any column of a composite foreign key is null, then the non-null portions of the key do not have to match any corresponding portion of a parent key.</em></p>
<p>And this is what is specified in <a href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt" target="_blank">SQL-92</a>:
<em>If no &lt;match type&gt; was specified then, for each row R1 of the referencing table, either at least one of the values of the referencing columns in R1 shall be a null value, or the value of each referencing column in R1 shall be equal to the value of the corresponding referenced column in some row of the referenced table.</em> More detail about the other match types in <a href="https://docs.oracle.com/database/121/ADFNS/adfns_constraints.htm#ADFNS273" target="_blank">Oracle Development Guide</a>.</p>
<p>That may look strange, but, still thinking about NULLS as unknown values, you can consider that constraints cannot be validated until we know all values.</p>
<p>Here is what I was able to insert into my table even with no a=&#8217;Y&#8217; in the parent:</p>
<p><pre>SQL&gt; select rownum,TABLE2.* from TABLE2;

    ROWNUM A B
---------- - -
         1 X X
         2 X X
         3 X Y
         4 X
         5
         6 Y  </pre></p>
<h3>So what?</h3>
<p>Having nulls in composite unique key or foreign key can be misleading, then it&#8217;s better to ensure that what you define fits what you expect. It&#8217;s probably better to prevent partial nulls in foreign key (a check constraint can ensure that if one column is null then all columns must be null) or to have and additional referential integrity constraint which ensures that you can set only the allowed values for a subset of columns (in our case, a table with column a as primary key that we can reference).</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-96970"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
