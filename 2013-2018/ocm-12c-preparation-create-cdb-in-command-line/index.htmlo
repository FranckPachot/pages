This was first published on <a href=https://blog.dbi-services.com/ocm-12c-preparation-create-cdb-in-command-line>https://blog.dbi-services.com/ocm-12c-preparation-create-cdb-in-command-line</a> (2015-11-30)
								<h1 class="entry-title">OCM 12c preparation: Create CDB in command line</h1>
		<div class="content-inner">
			
						
						
		   
			<p>This post starts a series about things I wrote while preparing the OCM 12c upgrade exam. Everything in those posts are written before taking the exam &#8211; so don&#8217;t expect any clue about the exam here. It&#8217;s based only on the <a href="https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:12COCMU" target="_blank">exam topics</a>, and only those points I wanted to brush up, so don&#8217;t expect it to be a comprehensive list of points to know for the exam.
Let&#8217;s start by creating a CDB manually as it is something I never do in real life (dbca is the recommended way) but as it is still documented, it may be something to know.
<span id="more-5595"></span>
I usually put code and output in my blog posts. But here the goal is to practice, so there is only the commands to run. If you have same environment as mine, a simple copy/paste would do it. But you probably have to adapt.</p>
<h3>Documentation</h3>
<p>Information about the exam says: <i>Be prepared to use the non-searchable documentation during the exam, to help you with correct syntax.</i>
Documentation about the &#8216;Create and manage pluggable databases&#8217; topic is mostly in the OracleÂ® Database Administrator&#8217;s Guide. Search for &#8216;multitenant&#8217;, expand &#8216;Creating and Configuring a CDB&#8217; and then you have the create CDB statement in &#8216;Creating a CDB with the CREATE DATABASE Statement&#8217;</p>
<h3>Environment</h3>
<p>You will need to have ORACLE_HOME set and $ORACLE_HOME/bin in the path.
If you have a doubt, find the inventory location and get oracle home from the inventory.xml:
<pre>
cat /etc/oraInst.loc
cat /u01/app/oraInventory/ContentsXML/inventory.xml
</pre>
Then I set the ORACLE SID:
<pre>
export ORACLE_SID=CDB
</pre></p>
<h3>Instance password file</h3>
<p>I&#8217;ll put &#8216;oracle&#8217; for all passwords:
<pre>
cd $ORACLE_HOME/dbs
orapwd file=orapw$ORACLE_SID &lt;&lt;&lt; oracle
</pre></p>
<h3>Instance init.ora</h3>
<p>In the dbs subdirectory there is a sample init.ora
I copy it and change what I need to change, here with &#8216;sed&#8217; but of course you can do it manually
<pre>
cp init.ora init$ORACLE_SID.ora
sed -i -e"s??$ORACLE_BASE?" init$ORACLE_SID.ora
sed -i -e"s?ORCL?$ORACLE_SID?i" init$ORACLE_SID.ora
sed -i -e"s?^compatible?#&amp;?" init$ORACLE_SID.ora
# using ASMM instead of AMM (because I don't like it)
sed -i -e"s?^memory_target=?sga_target=?" init$ORACLE_SID.ora
sed -i -e"s?ora_control.?$ORACLE_BASE/oradata/CDB/&amp;.dbf?g" init$ORACLE_SID.ora
sed -i -e"$" init$ORACLE_SID.ora
echo enable_pluggable_database=true &gt;&gt; init$ORACLE_SID.ora
cat init$ORACLE_SID.ora
</pre>
In case I can choose the OMF example, I set the destinations
<pre>
echo db_create_file_dest=$ORACLE_BASE/oradata/CDB &gt;&gt; init$ORACLE_SID.ora
echo db_create_online_log_dest_1=$ORACLE_BASE/oradata/CDB &gt;&gt; init$ORACLE_SID.ora
echo db_create_online_log_dest_2=$ORACLE_BASE/oradata/CDB &gt;&gt; init$ORACLE_SID.ora
</pre>
From the documentation you can choose the CREATE DATABASE statement for non-OMF or for OMF. I choose the first one, and once again, here it is with &#8216;sed&#8217; replacements that fit my environment:
<pre>
sed -e "s/newcdb/CDB/g" \
-e "s?/u0./logs/my?$ORACLE_BASE/oradata/CDB?g" \
-e "s?/u01/app/oracle/oradata?$ORACLE_BASE/oradata?g" \
-e "s/[^ ]*password/oracle/g" &gt; /tmp/createCDB.sql &lt;&lt;END
CREATE DATABASE newcdb
  USER SYS IDENTIFIED BY sys_password
  USER SYSTEM IDENTIFIED BY system_password
  LOGFILE GROUP 1 (&#039;/u01/logs/my/redo01a.log&#039;,&#039;/u02/logs/my/redo01b.log&#039;)
             SIZE 100M BLOCKSIZE 512,
          GROUP 2 (&#039;/u01/logs/my/redo02a.log&#039;,&#039;/u02/logs/my/redo02b.log&#039;)
             SIZE 100M BLOCKSIZE 512,
          GROUP 3 (&#039;/u01/logs/my/redo03a.log&#039;,&#039;/u02/logs/my/redo03b.log&#039;)
             SIZE 100M BLOCKSIZE 512
  MAXLOGHISTORY 1
  MAXLOGFILES 16
  MAXLOGMEMBERS 3
  MAXDATAFILES 1024
  CHARACTER SET AL32UTF8
  NATIONAL CHARACTER SET AL16UTF16
  EXTENT MANAGEMENT LOCAL
  DATAFILE &#039;/u01/app/oracle/oradata/newcdb/system01.dbf&#039;
    SIZE 700M REUSE AUTOEXTEND ON NEXT 10240K MAXSIZE UNLIMITED
  SYSAUX DATAFILE &#039;/u01/app/oracle/oradata/newcdb/sysaux01.dbf&#039;
    SIZE 550M REUSE AUTOEXTEND ON NEXT 10240K MAXSIZE UNLIMITED
  DEFAULT TABLESPACE deftbs
     DATAFILE &#039;/u01/app/oracle/oradata/newcdb/deftbs01.dbf&#039;
     SIZE 500M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED
  DEFAULT TEMPORARY TABLESPACE tempts1
     TEMPFILE &#039;/u01/app/oracle/oradata/newcdb/temp01.dbf&#039;
     SIZE 20M REUSE AUTOEXTEND ON NEXT 640K MAXSIZE UNLIMITED
  UNDO TABLESPACE undotbs1
     DATAFILE &#039;/u01/app/oracle/oradata/newcdb/undotbs01.dbf&#039;
     SIZE 200M REUSE AUTOEXTEND ON NEXT 5120K MAXSIZE UNLIMITED
  ENABLE PLUGGABLE DATABASE
    SEED
    FILE_NAME_CONVERT = (&#039;/u01/app/oracle/oradata/newcdb/&#039;,
                         &#039;/u01/app/oracle/oradata/pdbseed/&#039;)
    SYSTEM DATAFILES SIZE 125M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED
    SYSAUX DATAFILES SIZE 100M
  USER_DATA TABLESPACE usertbs
    DATAFILE &#039;/u01/app/oracle/oradata/pdbseed/usertbs01.dbf&#039;
    SIZE 200M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;
END
</pre>
I&#8217;ve written it in /tmp/createCDB.sql that I&#8217;ll run later.</p>
<h3>Create database</h3>
<p>For whatever reasons in case you have to cleanup a previous attempt that left shared memory:
<pre>
ipcs -m | awk '/oracle/{print "ipcrm -m "$2}' | sh -x
</pre></p>
<p>Now creating required directories, running the create database script I&#8217;ve created before, and following the steps in documentation
<pre>
mkdir -p $ORACLE_BASE/oradata/CDB $ORACLE_BASE/admin/$ORACLE_SID/adump
mkdir -p $ORACLE_BASE/oradata/CDB $ORACLE_BASE/oradata/pdbseed
mkdir -p $ORACLE_BASE/fast_recovery_area
PATH=$ORACLE_HOME/perl/bin/:$PATH sqlplus / as sysdba
startup pfile=initCDB.ora nomount
create spfile from pfile;
start /tmp/createCDB.sql
@?/rdbms/admin/catcdb.sql
oracle
oracle
temp
quit
</pre></p>
<p>Note that I&#8217;ve added $ORACLE_HOME/perl/bin in the PATH because this is required for the catcdb. More info about it:</p>
<blockquote class="twitter-tweet" width="550"><p lang="en" dir="ltr"><a href="https://twitter.com/rovaque">@rovaque</a> Same problem! Same solution! Now I know why the Oracle Documentation tells: &quot;Use DBCA&quot; <img src="../wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
<p>&mdash; Alex Zaballa (@alexzaballa) <a href="https://twitter.com/alexzaballa/status/671072969087692802">November 29, 2015</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>The catcdb.sql is the long part in there (it run catalog and catproc on all conteainers &#8211; CDB$ROOT and PDB$SEED for the moment). Which means that if there is an exam where I have to create a database, it&#8217;s better to do that directly and read / prepare the other questions during that time.</p>
<p>Once done, you want to protect your database and run a backup. We will see that later.</p>
<h3>Listener</h3>
<p>I probably want a listener and see my service registered immediately
<pre>
lsnrctl start
sqlplus / as sysdba
alter system register;
</pre></p>
<h3>EM Express</h3>
<p>I&#8217;m not sure EM Express helps a lot, but let&#8217;s start it:
<pre>
exec DBMS_XDB_CONFIG.SETHTTPPORT(5500);
</pre>
And I can acces to it on http://localhost:5500/em</p>
<h3>oratab</h3>
<p><pre>
echo CDB:$ORACLE_HOME:Y &gt;&gt; /etc/oratab
</pre></p>
<h3>SQL Developer</h3>
<p>If I have SQL Developer I&#8217;ll use it. At least to generate SQL statements for which I don&#8217;t know the exact syntax. It&#8217;s easier that going to documentation, copy/paste, change, etc.
I really hope that SQL Developer is there for the exam as EM Express do not have all features we had in 11g dbconsole.</p>
<p>You can create local connections to your CDB with a simple click:
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/11/Capture12COCMU-CreatePDB-004.jpg" rel="lightbox[5595]"><img src="../wp-insides/uploads/sites/2/2015/11/Capture12COCMU-CreatePDB-004-300x128.jpg" alt="Capture12COCMU-CreatePDB-004" width="300" height="128" class="alignnone size-medium wp-image-5600" /></a></p>
<h3>Backup</h3>
<p>Everything that takes time need a backup because you don&#8217;t want to do it again in case of failure.
Let&#8217;s put the database in archivelog mode and run a backup
<pre>
rman target /
report schema;
shutdown immediate;
startup mount;
alter database archivelog;
alter database open;
backup database;
</pre>
It&#8217;s an online backup, so no problem to continue with operations that don&#8217;t need an instance restart.
Next part will be about creating pluggable databases.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-55960" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/11/Capture12COCMU-CreatePDB-004-300x128.jpg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
