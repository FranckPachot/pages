This was first published on <a href=https://blog.dbi-services.com/ocm-12c-preparation-explain-fast-refresh>https://blog.dbi-services.com/ocm-12c-preparation-explain-fast-refresh</a> (2015-12-17)
								<h1 class="entry-title">OCM 12c preparation: Explain fast refresh</h1>
		<div class="content-inner">
			
						
						
		   
			<p>There are some rules to be able to fast refresh a materialized view (which means, refresh it so that it is not stale, and without running the whole query). Documentation is in the Datawarehouse Guide, but we can use Enterprise Manager to get quickly to our goal.
<span id="more-6098"></span></p>
<p>Let&#8217;s see which tables we have:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV001.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV001.jpg" alt="CaptureMV001" width="764" height="431" class="alignnone size-full wp-image-6108" /></a></p>
<p>and create materialized views:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV002.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV002.jpg" alt="CaptureMV002" width="764" height="342" class="alignnone size-full wp-image-6107" /></a></p>
<p>I want to materialize the following join and group by:
<pre>
select deptno,dname,count(*),sum(sal)
from scott.dept join scott.emp using (deptno)
group by deptno,dname
</pre>
when entering the query you can run &#8216;explain':</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV003.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV003.jpg" alt="CaptureMV003" width="499" height="236" class="alignnone size-full wp-image-6106" /></a></p>
<p>here is what is displayed by the explain</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV004.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV004.jpg" alt="CaptureMV004" width="764" height="524" class="alignnone size-full wp-image-6105" /></a></p>
<p>For fast refresh we need materialized view log, so let&#8217;s create them:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV005.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV005.jpg" alt="CaptureMV005" width="757" height="274" class="alignnone size-full wp-image-6104" /></a></p>
<p>I keep the default: primary key and choose the other column I will use in my materialized view:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV006.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV006.jpg" alt="CaptureMV006" width="756" height="355" class="alignnone size-full wp-image-6103" /></a></p>
<p>I do it for both tables, here is what &#8216;show sql&#8217; displays:
<pre>
CREATE MATERIALIZED VIEW LOG ON SCOTT.DEPT NOCACHE WITH PRIMARY KEY ("DNAME") EXCLUDING NEW VALUES
CREATE MATERIALIZED VIEW LOG ON SCOTT.EMP NOCACHE WITH PRIMARY KEY ("DEPTNO", "SAL") EXCLUDING NEW VALUES
</pre>
Note that there is no comma between the with clause and the column list. If you put one, you can have strange behaviour.</p>
<p>so here they are:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV007.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV007.jpg" alt="CaptureMV007" width="760" height="379" class="alignnone size-full wp-image-6102" /></a></p>
<p>and let&#8217;s explain our mview again:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV008.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV008.jpg" alt="CaptureMV008" width="735" height="599" class="alignnone size-full wp-image-6101" /></a></p>
<p>In order to support fast refresh for all kind of DML, I need to add the following &#8216;with&#8217; clause:
<pre>
ALTER MATERIALIZED VIEW LOG ON DEPT ADD SEQUENCE, ROWID INCLUDING NEW VALUES;
ALTER MATERIALIZED VIEW LOG ON EMP ADD SEQUENCE, ROWID INCLUDING NEW VALUES;
</pre>
You can do it from the GUI, but I don&#8217;t want to navigate though screens again.</p>
<p>So the result is that my materialized view supports fast refresh. But there was something else:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV012.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV012.jpg" alt="CaptureMV012" width="693" height="71" class="alignnone size-full wp-image-6119" /></a></p>
<p>In order to maintain the SUM() and because the SAL column may be null, we need to keep a count of non null values.
<pre>
select deptno,dname,count(*),sum(sal),count(sal)
from scott.dept join scott.emp using (deptno)
group by deptno,dname
</pre></p>
<p>Now everything is ok:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV009.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV009.jpg" alt="CaptureMV009" width="764" height="477" class="alignnone size-full wp-image-6100" /></a></p>
<p>I can use the &#8216;get recommendation&#8217; to see that there&#8217;s nothing else to do:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV010.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV010.jpg" alt="CaptureMV010" width="735" height="514" class="alignnone size-full wp-image-6099" /></a></p>
<p>Here is the SQL generated:
<pre>
CREATE MATERIALIZED VIEW "SCOTT"."MV_EMP_DEPT" USING INDEX REFRESH FORCE ON DEMAND ENABLE QUERY REWRITE AS
select deptno,dname,count(*),sum(sal),count(sal)
from scott.dept join scott.emp using (deptno)
group by deptno,dname
BEGIN DBMS_STATS.GATHER_TABLE_STATS(ownname =&gt;'SCOTT', tabname =&gt; 'MV_EMP_DEPT'); END;
</pre></p>
<h3>dbms_mview</h3>
<p>If you don&#8217;t have Enterprise Manager, you can do the same manually.</p>
<p>First create the table to store the result:
<pre>
$ ( cd $ORACLE_HOME/rdbms/admin ; ls *xmv*sql; )
utlxmv.sql
</pre>
(yes I don&#8217;t have to remember the name, I just remember &#8216;xmv&#8217; for explain mview and &#8216;xrw&#8217; for explain rewrite)
<pre>
$ sqlplus scott/tiger @ ?/rdbms/admin/utlxmv.sql

SQL*Plus: Release 11.2.0.3.0 Production on Thu Dec 17 15:09:36 2015
Copyright (c) 1982, 2011, Oracle.  All rights reserved.

Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.3.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

Table created.

SQL&gt; l
  1  CREATE TABLE MV_CAPABILITIES_TABLE
...

</pre>
And here is the result after running
<pre>
exec dbms_mview.explain_mview('SCOTT.MV_EMP_DEPT');
select * from scott.MV_CAPABILITIES_TABLE;
</pre>
on SQL Developer
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV013.jpg" rel="lightbox[6098]"><img src="../wp-insides/uploads/sites/2/2015/12/CaptureMV013.jpg" alt="CaptureMV013" width="1042" height="488" class="alignnone size-full wp-image-6123" /></a></p>
<p>That was about refresh. The rewrite capabilities can be explained in a similar way, but that was in a <a href="http://blog.dbi-services.com/materialized-view-explain_rewrite/">previous blog post</a>.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-60990" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2015/12/CaptureMV001.jpg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
