This was first published on <a href=https://blog.dbi-services.com/ocm-12c-preparation-transportable-tablespaces>https://blog.dbi-services.com/ocm-12c-preparation-transportable-tablespaces</a> (2015-12-15)
								<h1 class="entry-title">OCM 12c preparation: Transportable Tablespaces</h1>
		<div class="content-inner">
			
						
						
		   
			<p>I use transportable tablespaces a lot since 8i, here are just a few examples.
Same disclaimer here as in the first post of the series: don’t expect to get those posts close to what you will have at the exam, but they cover important points that matches the exam topics.</p>
<h3>Documentation</h3>
<p>Information about the exam says: <i>Create a plugged-in tablespace by using the transportable tablespace feature</i>. this is the TTS feature we know for a long time. The &#8216;plugged-in&#8217; term is how it was originally called (see patent: <a href="http://www.google.tl/patents/US5890167" target="_blank">http://www.google.tl/patents/US5890167</a> from 1997). When 12c came with pluggable database, I said that it was just an extension of the TTS feature where the SYSTEM tablespace can be transported as well, thanks to multitenant architecture that separates application dictionary.
What&#8217;s new in 12c is the ability to transport a whole database, which means use TTS for all non-system tablespaces.
So about documentation, open the Oracle® Database Administrator&#8217;s Guide, search for &#8216;transport&#8217; and you have a whole chapter about transporting data. then go to: Transporting Database</p>
<h3>Read only</h3>
<p>I&#8217;ve a PDB pluggable database with some tablespaces and tables, and I set the user tablespace read-only;
<pre>
sqlplus / as sysdba
create pluggable database PDB admin user admin identified by admin file_name_convert=('/u01/app/oracle/oradata/pdbseed','/u02/app/oracle/oradata/PDB');
alter pluggable database PDB open;
alter session set container=PDB;
grant dba to DEMO identified by demo;
create tablespace USERS datafile '/tmp/usersPDB.dbf' size 10M;
create table DEMO.DEMO tablespace USERS as select current_timestamp ts from dual;
alter tablespace USERS read only;
quit
</pre></p>
<h3>Transport database</h3>
<p>Then I create a new pluggable database from seed and create a database link to transport the tablespace into it:
<pre>
sqlplus / as sysdba
create pluggable database PDBNEW admin user admin identified by admin file_name_convert=('/u01/app/oracle/oradata/pdbseed','/u02/app/oracle/oradata/PDBNEW');
alter session set container=PDBNEW;
startup
create database link DBL_PDB connect to system identified by oracle using '//localhost/PDB';
create directory TMP as '/tmp';
quit
cp /tmp/usersPDB.dbf /tmp/usersPDBNEW.dbf
impdp '"sys/oracle@//localhost/PDBNEW as sysdba"' network_link=DBL_PDB directory=TMP FULL=Y TRANSPORTABLE=always transport_datafiles=/tmp/usersPDBNEW.dbf
</pre>
This is database transport. It&#8217;s just the possibility to use both FULL=Y and TRANSPORTABLE. I don&#8217;t like FULL imports because they bring some mess with pseudo system schemas. But with multitenant, what is in a PDB is only user schemas.</p>
<h3>Transport tablespace</h3>
<p>If I wanted to transport only the tablespace, I need to have the user created before:
<pre>
sqlplus / as sysdba
alter pluggable database PDBNEW close;
drop pluggable database PDBNEW including datafiles;
create pluggable database PDBNEW admin user admin identified by admin file_name_convert=('/u01/app/oracle/oradata/pdbseed','/u02/app/oracle/oradata/PDBNEW');
alter session set container=PDBNEW;
startup
create database link DBL_PDB connect to system identified by oracle using '//localhost/PDB';
create directory TMP as '/tmp';
grant dba to DEMO identified by demo;
quit
impdp '"sys/oracle@//localhost/PDBNEW as sysdba"' network_link=DBL_PDB directory=TMP TRANSPORT_TABLESPACES=USERS transport_datafiles=/tmp/usersPDBNEW.dbf
</pre></p>
<p>This is the simple transport tablespace we know from a long time. Need to create the user, then all metadata is imported by data pump and data comes with the files. Here I used NETWORK_LINK because it&#8217;s the most simple, but everything is the same with a dumpfile. Need to copy datafiles with it to the target.
On different endianness, RMAN can be used to convert. All is referenced in the &#8216;transporting data&#8217; chapter of documentation.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-60750"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
