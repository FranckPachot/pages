This was first published on <a href=https://blog.dbi-services.com/oda-x-6-log-file-sync-with-nvme-flash>https://blog.dbi-services.com/oda-x-6-log-file-sync-with-nvme-flash</a> (2016-07-21)
								<h1 class="entry-title">ODA X-6 log file sync with NVMe flash</h1>
		<div class="content-inner">
			
						
						
		   
			<p>The new ODA X-6 has been announced last month with two smaller configurations and smaller prices: 2S and 2M. Small, but high performance configuration: all SSD, and I/O transfer optimized for Flash with PCIe bus and NVMe protocol. Let&#8217;s see how it keeps up with an high OLTP workload. Thanks to Arrow Oracle Authorized Solution Center to let us evaluate performance on their ODA.
<span id="more-9818"></span>
Just in case you wonder if Flash is good for writes, and especially for redo, we have run a workload that mainly inserts rows and commit, from 10 sessions without think time.</p>
<h3>log file sync</h3>
<p>From the following picture shows a workload all in CPU: OLTP mainly inserts.
<a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/07/CaptureX62M003.png" rel="lightbox[9818]"><img src="../wp-insides/uploads/sites/2/2016/07/CaptureX62M003.png" alt="CaptureX62M003" width="1393" height="857" class="alignnone size-full wp-image-9819" /></a>
All in CPU and some waits on &#8216;log file sync&#8217;, the commit wait event. At first sight, it seems that those waits are high (30%) and irregular (peaks in transaction rate). But beyond the colors, let&#8217;s check the numbers:</p>
<p><pre>
Load Profile                    Per Second   Per Transaction  Per Exec  Per Call
~~~~~~~~~~~~~~~            ---------------   --------------- --------- ---------
             DB Time(s):               9.5               0.0      0.00      0.00
              DB CPU(s):               6.7               0.0      0.00      0.00
      Background CPU(s):               0.4               0.0      0.00      0.00
      Redo size (bytes):      28,534,906.0           5,647.3
  Logical read (blocks):         546,914.9             108.2
          Block changes:         167,747.0              33.2
 Physical read (blocks):              15.2               0.0
Physical write (blocks):           4,807.8               1.0
       Read IO requests:               8.7               0.0
      Write IO requests:           2,581.3               0.5
           Read IO (MB):               0.1               0.0
          Write IO (MB):              37.6               0.0
           IM scan rows:               0.0               0.0
Session Logical Read IM:
             User calls:           3,881.8               0.8
...
         Executes (SQL):         104,409.9              20.7
              Rollbacks:               8.5               0.0
           Transactions:           5,052.9
</pre></p>
<p>5000 transactions per seconds, 30MB/s of redo, that&#8217;s not bad. Then are those waits a problem?</p>
<h3>Wait event historgrams</h3>
<p><pre>
Wait Event Histogram                      DB/Inst: LABDB1/labdb1  Snaps: 75-76
-&gt; Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-&gt; % of Waits: value of .0 indicates value was  % of Waits: column heading of &lt;=1s is truly 1s is truly &gt;=1024ms
-&gt; Ordered by Event (idle events last)
                                                    % of Waits
                                 -----------------------------------------------
                           Total
Event                      Waits  &lt;1ms  &lt;2ms  &lt;4ms  &lt;8ms &lt;16ms &lt;32ms  1s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
log file parallel write     4.2M  96.3   1.6   1.5    .3    .2    .0    .0
log file sequential read   25.8K  22.2  22.5  38.2  14.0   2.3    .6    .1
log file single write         22  86.4         9.1                     4.5
log file switch (private      73         4.1  75.3  17.8               2.7
log file switch completio     20                   100.0
log file sync               3.5M  77.5  10.6   7.8   2.1   1.2    .7    .2
</pre></p>
<p>Log file parallel writes are all less than what you can have with spinning disks, and 96% are less than one millisecond.
Log file sync, the only time where a user may wait for an I/O, is mostly less than 8 millisecond. Actually, the average is:</p>
<p><pre>
Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                          Total Wait       Wait   % DB Wait
Event                                Waits Time (sec)    Avg(ms)   time Class
------------------------------ ----------- ---------- ---------- ------ --------
DB CPU                                         9082.7              71.1
log file sync                    3,472,568     3487.5       1.00   27.3 Commit
enq: HW - contention                 3,169        195      61.55    1.5 Configur
</pre></p>
<p>1 millisecond. Even if a application with a very bad design does an hundred of commits per user interaction, the user will not see it. </p>
<p>This is done on a database created as-is with the ODA provisioning interface. Files are on ACFS. ODA is bare metal (no virtualization for 2S and 2M). Redo logs have 512 bytes block size.</p>
<h3>So what?</h3>
<p>This is just a first quick test and it looks promising. This Oracle Database Appliance X6-2M is sold at 24,000 dollars. And the X6-2S at 18,000 dollars has exactly the same storage but only one socket. This is a great opportunity for small customers with few Oracle databases in Enterprise Edition or Standard Edition.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-98190" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/07/CaptureX62M003.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 3 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-4055">
				<div id="div-comment-4055" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/ba77413ffe0bb48d9da467d649464a6c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Thomas Teske</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4055">
			July 22, 2016 at 8 h 43 min</a>		</div>

		<p>Please continue your tests: what happens if you have mixed workload. For example: INSERTS and SELECTS &#8211; how is concurrency handled without starting to tune here? Another one: INSERT and a bit of analytic queries.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-40561"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4055' onclick='return addComment.moveForm( "div-comment-4055", "4055", "respond", "9818" )' aria-label='Reply to Thomas to Thomas Teske'>Reply to Thomas</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-4058">
				<div id="div-comment-4058" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/75234dd34f80230790f957f674492496?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://Dba24.pl' rel='external nofollow' class='url'>Maciej Tokar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4058">
			July 22, 2016 at 15 h 07 min</a>		</div>

		<p>Franck,  are you sure this is 30G of redo per second? The slob report says the number is in bytes. Nice article btw, thanks for sharing.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-40591"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4058' onclick='return addComment.moveForm( "div-comment-4058", "4058", "respond", "9818" )' aria-label='Reply to Maciej to Maciej Tokar'>Reply to Maciej</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor even depth-2" id="comment-4059">
				<div id="div-comment-4059" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4059">
			July 22, 2016 at 15 h 10 min</a>		</div>

		<p>Hi Maciej, yes, typo, it is 30MB/s. I&#8217;ve updated it. Thank you very much.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-40601"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4059' onclick='return addComment.moveForm( "div-comment-4059", "4059", "respond", "9818" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
