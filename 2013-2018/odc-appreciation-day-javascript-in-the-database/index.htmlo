This was first published on <a href=https://blog.dbi-services.com/odc-appreciation-day-javascript-in-the-database>https://blog.dbi-services.com/odc-appreciation-day-javascript-in-the-database</a> (2017-10-10)
								<h1 class="entry-title">ODC Appreciation Day : Javascript in the database</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Tim Hall has launched the <a href="https://oracle-base.com/blog/2017/09/25/odc-appreciation-day-2017-thanksodc/" target="_blank">idea</a> to post small blogs this day, from all the Oracle community, about an Oracle feature. I choose one feature that is only released in beta test for the moment: the Multilingual Engine (MLE) which is able to run Javascript stored procedures in the database.
<span id="more-18957"></span></p>
<h3>Why?</h3>
<p>When I first heard about this idea, last year before OOW16, I didn&#8217;t understand the idea at all. But the good thing at Oracle Open World, is that we can discuss with Oracle product managers, and with other Oracle DBAs or Developers, rather than relying on rumors or wrong ideas. My perception of Javascript was narrowed to the language used at client-side in thin clients, in the browser, to manage the presentation layer. It is interpreted by the browser, has no type checking, and errors are not easy to understand. Clearly, the opposite if something that I want to run in my database, on my data. PL/SQL is obviously the best choice: compiled and run into the database, strong typing to avoid runtime errors, directly integrated with SQL for better performance, etc.</p>
<p>So that idea of JS in the database made me smile, but I was wrong. What I didn&#8217;t get is that Javascript is just a language, and running Javascript does not mean that it has to be interpreted like when it is running on a browser.</p>
<h3>Multilingual Engine (MLE)</h3>
<p>Actually, what Oracle is developing in its lab goes far beyond just running Javascript in the database. They are building an execution engine, like PL/SQL or SQL execution engine, but this one being able to run programs written in different languages. They start with Javascript and TypeScript (and then strong typing here) but this can be extended in the future (Python, and why not PL/SQL one day running there). The programs will be loaded into the database as stored procedures/functions/packages and compiled into an intermediate representation, like bytecode. This code is optimized to access efficiently to data, like the PL/SQL engine.</p>
<p>Actually, I&#8217;ll show in a future post that this new engine can run faster than PL/SQL for some processing and that it looks like the context switching with the SQL engine is highly efficient.</p>
<h3>Javascript</h3>
<p>So, why would you write your stored procedure in Javascript? The first reason is that there are a lot of existing libraries available and you may not want to re-write one. For example, I remember when working on an airline company application that I had to write in PL/SQL the function to calculate the orthodromic distance (aka great circle). This is a very simple example. But if you can get the formula in Javascript, then why not compile from this rather than translate it into another language? Currently, you can find pretty everything in Javascript or Python.</p>
<p>The second reason is that your application may have to use the same function at different layers. For example, you can check that a credit card number is correctly formed in the presentation layer, in order to show quickly to the user if it is correct or not. That may be Javascript in the browser. But the database should also verify that in case the rows are inserted with a different application, or in case the number has been corrupt in between. That may be PL/SQL in the database. Then you have to maintain two libraries in two different languages, but doing the same thing. Being able to run Javascript in the database let us re-use exactly the same library in the client and in the database.</p>
<p>Finally, one reason why some enterprise architects do not want to write procedures in the database is that the language for that, PL/SQL, can only run on Oracle. If they can write their business logic in a language that can run everywhere, then there is no vendor lock-in anymore. They have the possibility to run on another RDBMS if needed, and still get the optimal performance of processing data in the database.</p>
<h3>Public Beta</h3>
<p>Currently, this is a lab project from Oracle in Zurich. They have released a public beta downloadable as a VM. Just go to the download page at <a href="http://www.oracle.com/technetwork/database/multilingual-engine/overview/index.html" target="_blank">http://www.oracle.com/technetwork/database/multilingual-engine/overview/index.html</a></p>
<p><a href="../wp-insides/uploads/sites/2/2017/10/CaptureLE.png" rel="lightbox[18957]"><img src="../wp-insides/uploads/sites/2/2017/10/CaptureLE.png" alt="Capture;LE" width="861" height="241" class="aligncenter size-full wp-image-18973" /></a></p>
<p>And stay tuned to this blog to see some performance comparison with PL/SQL User-Defined Function.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-189580" data-img="https://blog.dbi-services.com/wp-insides/uploads/sites/2/2017/10/CaptureLE.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-8850">
				<div id="div-comment-8850" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/ba77413ffe0bb48d9da467d649464a6c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.oracle.com' rel='external nofollow' class='url'>Thomas Teske</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-8850">
			October 10, 2017 at 8 h 46 min</a>		</div>

		<p>Yes JS is the starting point. Think of of the M in MLE. Check out the papers by OracleLabs on language processing and virtual machines. You&#8217;ll start smiling. PL/SQL is not alone any more.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-88511"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-8850' onclick='return addComment.moveForm( "div-comment-8850", "8850", "respond", "18957" )' aria-label='Reply to Thomas to Thomas Teske'>Reply to Thomas</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
