This was first published on <a href=https://blog.dbi-services.com/oow14-day-4-internals-of-the-12c-multitenant-architecture-by-vit-spinka>https://blog.dbi-services.com/oow14-day-4-internals-of-the-12c-multitenant-architecture-by-vit-spinka</a> (2014-10-02)
								<h1 class="entry-title">OOW14 Day 4 &#8211; Internals of the 12c Multitenant Architecture by Vit Spinka</h1>
		<div class="content-inner">
			
						
						
		   
			<p>This is the session I preferred at Oracle Open World. Well, I&#8217;m writing that before going to <a href="http://www.ludovicocaldara.net/dba/events/oracle-active-data-guard-12c-far-sync-instance-real-time-cascade-standby-and-other-goodies/">@ludodba</a> one and I&#8217;m sure I&#8217;ll have then two preferred sessions&#8230; So Vit Spinka has presented the internals of the new multitenant architecture. It&#8217;s always good to play with some internals things. Not only for the geeky fun of it but also because it helps understand how it work and address issues later.</p>
<p>I had investigated the metadata/object links in my <a href="https://blog.dbi-services.com/oracle-12c-cdb-metadata-a-object-links-internals">blog post</a> (and thanks to Vit for having referenced it during his presentation). But I learned from vit about what has changed in redo logs. In his case, the research on redo log internals is not just a curiosity. It&#8217;s mandatory for his job: he is the principal developer for Dbvisit Replicate and Dbvisit Replicate reads the redo logs: the MINER process reads them and transforms them to something that can be used by the APPLY process.</p>
<p>So I&#8217;ll not repeat what is available in his slides:
<a href="http://vitspinka.cz/files/CON2282%20Internals%20of%20the%20Oracle%20Database%2012c%20Multitenant%20Architecture.pdf">http://vitspinka.cz/files/CON2282%20Internals%20of%20the%20Oracle%20Database%2012c%20Multitenant%20Architecture.pdf</a></p>
<p>Finally the redo is quite the same except that it adds the container id (it&#8217;s one byte only because we are limited to 252 PDB). Addressing the files is not very special as the pluggable is very similar to transportable tablespaces. Addressing the objects is a bit different because we can have same object id across several PDB, and this is the reason to introduce the container id in the redo. But that&#8217;s not so special.</p>
<p>The thing to remember about the new multitenant architecture is that:</p>
<ul>
<li>it is not a big change for the instance which still manages the same objects (sessions, cursors, services, buffers, etc) just adding a container id</li>
<li>it no change for the database files as transportable tablespaces already introduced &#8216;plugging&#8217;</li>
<li>all the magic is in the dictionary in order to have a shared dictionary for oracle objects anda  private dictionary for application objects.</li>
</ul>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-5030"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
