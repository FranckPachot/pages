This was first published on <a href=https://blog.dbi-services.com/oracle-12c-in-memory-option-waiting-for-12102>https://blog.dbi-services.com/oracle-12c-in-memory-option-waiting-for-12102</a> (2014-03-04)
								<h1 class="entry-title">Oracle 12c In-Memory option: waiting for 12.1.0.2</h1>
		<div class="content-inner">
			
						
						
		   
			<p><img class="blog-image aligncenter" src="../images/easyblog_images/64/2e1ax_default_entry_Oracle_Database_12c_Plug.jpg" alt="" /></p>
<p>Oracle has announced a big feature that should come in the next 12c patch set: the In-Memory option. It will soon be in beta version, so nothing will be published about it until it comes to production. Before that phase, I&#8217;m going to explain what we can expect from that feature, besides the &#8216;In-Memory&#8217;,&#8217;columnar storage&#8217;, and &#8216;hybrid&#8217; buzzwords.</p>
<p><strong>First</strong>, it is a redundant storage that is aimed to improve the query performance.
But this is not new: indexes and materialized views have the same goal.</p>
<p><strong>Second</strong>: Redundant data will be stored In-Memory and will be optimized for it.
That is not new either if we consider TimesTen. TimesTen is an In-Memory relational database that can also be used in front of Oracle Database when used as an In-Memory Database Cache.</p>
<p>What is new is that it is a columnar storage. Columnar storage is already used by Oracle for compression (Hybrid Columnar Compression) but here, the goal is different. Very different. HCC uses CPU to save I/O and disk, and is mainly for read-only data. In-Memory option is for actively updated data residing in memory and the goal is to use less CPU. Let&#8217;s explain this.</p>
<p>I&#8217;ll use a well known relational table: SCOTT.EMP where I highligh the columns and rows that I&#8217;ll need for my query:</p>
<p>&nbsp;</p>
<table>
<tbody>
<tr>
<th scope="col">EMPNO</th>
<th style="background-color: #dcdcdc">ENAME</th>
<th scope="col">JOB</th>
<th scope="col">MGR</th>
<th scope="col">HIREDATE</th>
<th style="background-color: #dcdcdc">SAL</th>
<th scope="col">COMM</th>
<th scope="col">DEPTNO</th>
</tr>
<tr>
<td align="right">7369</td>
<td style="background-color: #dcdcdc">SMITH</td>
<td>CLERK</td>
<td align="right">7902</td>
<td>17-DEC-80</td>
<td style="background-color: #dcdcdc">800</td>
<td align="right"></td>
<td align="right">20</td>
</tr>
<tr>
<td align="right">7499</td>
<td style="background-color: #dcdcdc">ALLEN</td>
<td>SALESMAN</td>
<td align="right">7698</td>
<td>20-FEB-81</td>
<td style="background-color: #dcdcdc">1600</td>
<td align="right">300</td>
<td align="right">30</td>
</tr>
<tr>
<td align="right">7521</td>
<td style="background-color: #dcdcdc">WARD</td>
<td>SALESMAN</td>
<td align="right">7698</td>
<td>22-FEB-81</td>
<td style="background-color: #dcdcdc">1250</td>
<td align="right">500</td>
<td align="right">30</td>
</tr>
<tr>
<td align="right">7566</td>
<td style="background-color: #dcdcdc">JONES</td>
<td>MANAGER</td>
<td align="right">7839</td>
<td>02-APR-81</td>
<td style="background-color: #dcdcdc">2975</td>
<td align="right"></td>
<td align="right">20</td>
</tr>
<tr>
<td align="right">7654</td>
<td style="background-color: #dcdcdc">MARTIN</td>
<td>SALESMAN</td>
<td align="right">7698</td>
<td>28-SEP-81</td>
<td style="background-color: #dcdcdc">1250</td>
<td align="right">1400</td>
<td align="right">30</td>
</tr>
<tr>
<td align="right">7698</td>
<td style="background-color: #dcdcdc">BLAKE</td>
<td>MANAGER</td>
<td align="right">7839</td>
<td>01-MAY-81</td>
<td style="background-color: #dcdcdc">2850</td>
<td align="right"></td>
<td align="right">30</td>
</tr>
<tr>
<td align="right">7782</td>
<td style="background-color: #dcdcdc">CLARK</td>
<td>MANAGER</td>
<td align="right">7839</td>
<td>09-JUN-81</td>
<td style="background-color: #dcdcdc">2450</td>
<td align="right"></td>
<td align="right">10</td>
</tr>
<tr style="background-color: #dcdcdc">
<td align="right">7788</td>
<td style="background-color: #eb7d00">SCOTT</td>
<td>ANALYST</td>
<td align="right">7566</td>
<td>19-APR-87</td>
<td style="background-color: #eb7d00">3000</td>
<td align="right"></td>
<td align="right">20</td>
</tr>
<tr style="background-color: #dcdcdc">
<td align="right">7839</td>
<td style="background-color: #eb7d00">KING</td>
<td>PRESIDENT</td>
<td align="right"></td>
<td>17-NOV-81</td>
<td style="background-color: #eb7d00">5000</td>
<td align="right"></td>
<td align="right">10</td>
</tr>
<tr>
<td align="right">7844</td>
<td style="background-color: #dcdcdc">TURNER</td>
<td>SALESMAN</td>
<td align="right">7698</td>
<td>08-SEP-81</td>
<td style="background-color: #dcdcdc">1500</td>
<td align="right">0</td>
<td align="right">30</td>
</tr>
<tr>
<td align="right">7876</td>
<td style="background-color: #dcdcdc">ADAMS</td>
<td>CLERK</td>
<td align="right">7788</td>
<td>23-MAY-87</td>
<td style="background-color: #dcdcdc">1100</td>
<td align="right"></td>
<td align="right">20</td>
</tr>
<tr>
<td align="right">7900</td>
<td style="background-color: #dcdcdc">JAMES</td>
<td>CLERK</td>
<td align="right">7698</td>
<td>03-DEC-81</td>
<td style="background-color: #dcdcdc">950</td>
<td align="right"></td>
<td align="right">30</td>
</tr>
<tr style="background-color: #dcdcdc">
<td align="right">7902</td>
<td style="background-color: #eb7d00">FORD</td>
<td>ANALYST</td>
<td align="right">7566</td>
<td>03-DEC-81</td>
<td style="background-color: #eb7d00">3000</td>
<td align="right"></td>
<td align="right">20</td>
</tr>
<tr>
<td align="right">7934</td>
<td style="background-color: #dcdcdc">MILLER</td>
<td>CLERK</td>
<td align="right">7782</td>
<td>23-JAN-82</td>
<td style="background-color: #dcdcdc">1300</td>
<td align="right"></td>
<td align="right">10</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>This is a table. It has two dimensions: rows and columns. How do you read it ? There are two ways:</p>
<ul>
<li><strong>Read it by column</strong>: I have employee numbers 7369, 7499, 7521, &#8230; Their names are respectively SMITH, ALLEN, WARD, &#8230; The first one is a CLERK, the second and third ones are SALESMEN, &#8230;</li>
</ul>
<ul>
<li><strong>Read it by row</strong>: I have an employee that I identify as number 7369, his name is SMITH, he is a CLERK, his manager is&#8230; I have another employee which is number 7499, his name is ALLEN&#8230;</li>
</ul>
<p>Which way do you choose ? You probably read it by row. Because it is easier to think about it when we group the entities we are talking about. When you have a new employee, you fill a form with his name, job, hiredate, etc. When you update some information, you lock the row, saying &#8216;I&#8217;m working on employee 7369&#8242;, and update the attributes you want to change. You do that because you prefer to cluster together the information that are related, it&#8217;s easier to manage for our mind. Note that when you program, you often have the same logic. You manage objects, you implement CRUD operation to change their attributes. And your computer knows that, so it tries to be more efficient on clustered data, with prefetching or cache.</p>
<p>Relational Database did the same choice when physically manipulating data.
The SQL language let you have both approaches. You update one row, such as:
UPDATE EMP SET &#8230; WHERE EMPNO=7369;
or you can update one column, such as
UPDATE EMP SET SAL=SAL*1.1;
But physically, data is stored by row and is manipulated by row, as when you read the table row by row. And it is a very efficient approach when you manipulate several attributes from one row: you do only one I/O to get the block from disk, you store only one block in cache, and the CPU is able to process everything in one block. Great.</p>
<p>But now let&#8217;s see what happens when you don&#8217;t need all the columns. Let&#8217;s say you want to find who has a salary higher than 3000.</p>
<p>SELECT ENAME from EMP where SAL&gt;=3000;</p>
<p>You have to read the whole table (full table scan) and read each block, and in each block read each row, and for each row find the salary, compare it to 3000 and if it is higher, find the name.</p>
<p>Note that I&#8217;m not talking about I/O. Even when my table fit in memory I have a lot of information to read, I have to transfert each value from memory to CPU, and use CPU cycles to process each value.</p>
<p>The first problem is that you have read information about 14 employees where you&#8217;re interrested only in 3 of them. So you build an index on SAL. From the index you get the rowid for the employees that have SAL&gt;=3000. And then for each of them you go to the row to get its name. Ok, that&#8217;s not bad, but when you have a lot of queries like that, you will have to create a lot of indexes. You can create an index for each column but then there is the cost to combine to result. We are on OLTP actively updated data, so bitmap index is not a solution here. Or you can create an index for each kind of filtering you can do, but that&#8217;s a lot of indexes to maintain.</p>
<p>But then there is the second problem. Even if you have to process only the 3 employees you are interrested in, you will have to read the whole row, which is stored in variable length, from begining to end, in order to find the only columns that you need. This is: read row directory, follow pointer to row, read EMPNO length, bypass it, read ENAME, get it, &#8230; This is in memory, and has to be transferred to CPU to be processed, word by word.</p>
<p>To address that problem, you can add to your index all the columns you&#8217;re interrested in. But then you will have too many indexes to maintain. And you know how hard it is to determine which indexes can be useful or not.</p>
<p>Now let&#8217;s see how that works with the columnar approach we have seen above. Without any indexes, we will read the SAL column and the result is that item 8,9 and 13 are above 3000. Then we read the ENAME column and just have to get the 8,9 and 13 items. And that&#8217;s all!</p>
<p>Without any additional structure we had to read only what we are interrested in. And there is more. On current processors when we have the same operation to do on a several values we can do in in a whole with a vector operation. Just pass a vector of salaries to the CPU and ask it to compute the &#8216;&gt;=3000&#8242; on all of them. This is known as &#8216;Single Instruction Multiple Data&#8217;. This is less roundtrips between memory and CPU.</p>
<p>The first CPU operation is a &#8216;find &gt;=3000&#8242; on the following vector:</p>
<table border="0">
<tbody>
<tr style="background-color: #dcdcdc">
<td>800</td>
<td>1600</td>
<td>1250</td>
<td>2975</td>
<td>1250</td>
<td>2850</td>
<td>2450</td>
<td style="background-color: #eb7d00">3000</td>
<td style="background-color: #eb7d00">5000</td>
<td>1500</td>
<td>1100</td>
<td>950</td>
<td style="background-color: #eb7d00">3000</td>
<td>1300</td>
</tr>
</tbody>
</table>
<p>The second CPU operation is a &#8216;find values from previous result index&#8217; on the following vector:</p>
<table border="0">
<tbody>
<tr style="background-color: #dcdcdc">
<td>SMITH</td>
<td>ALLEN</td>
<td>WARD</td>
<td>JONES</td>
<td>MARTIN</td>
<td>BLAKE</td>
<td>CLARK</td>
<td style="background-color: #eb7d00">SCOTT</td>
<td style="background-color: #eb7d00">KING</td>
<td>TURNER</td>
<td>ADAMS</td>
<td>JAMES</td>
<td style="background-color: #eb7d00">FORD</td>
<td>MILLER</td>
</tr>
</tbody>
</table>
<p>Compare that with the row approach, navigating within the block, each pointer or each column value being a CPU operation&#8230; It&#8217;s hundreds of CPU cycles that will be saved. This is something that was possible before only on supercomputers. Today our processors can do Single Instruction Multiple Data vector processing, and this is why in-memory columnar storage is coming everywhere.</p>
<p>And the volume to transfer can be decreased when we compress those vectors. Remember when I&#8217;ve read the ENAME in column: the second and third employees are SALESMAN. This is RLE compression where you don&#8217;t repeat previous values. You can do that with columns, probably not within a row (or your data model is not that relational I guess).</p>
<p>This is the goal of columnar storage: increase efficiency of memory-cpu processing for queries that don&#8217;t need to read the whole row, and without having to create indexes. Oracle has always been able to handle mixed workload quite well (OLTP and reporting in the same database), thanks to the read consistency implementation. So it is a natural evolution to go to the &#8216;hybrid&#8217; approach that adds analytic capabilities to pure OLTP data models. Of course, this is not the kind of thing that is easy to implement. The columnar storage must be maintained, and must be optimized for an efficient CPU processing. The values must be easy to compare byte per byte in a single CPU operation, even when compressed. And CPU vector operation often requires that the values have the same size, so this may require fixed size storage instead of the usual variable length storage that reduces space.</p>
<p>So behind the feature that is supposed to accelerate our application just by switching it on, we can expect some complex technology that is able to bring In-Memory capabilities while staying in our Oracle OLTP database. In relational databases, the first goal for years was to optimize the access to the storage. And this is done by regrouping all information related to the same object, in order to get them in one I/O. Now, the goal is to improve the transfer between memory and CPU by regrouping similar information from several objects, in order to process them in vectors by the CPU. This is an orthogonal approach: row storage vs. columnar storage. Oracle will implement both. And we, the DBAs, have to understand how it works in order to use it in the right place.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-4180" data-img="http://blog.dbi-services.com/images/easyblog_images/64/2e1ax_default_entry_Oracle_Database_12c_Plug.jpg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 2 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1211">
				<div id="div-comment-1211" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9ea99ab4f8340555d07160be2626e186?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Christopher Bernard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1211">
			July 22, 2014 at 18 h 42 min</a>		</div>

		<p>Hello, Thanks for the nice blog. I tried the latest 12c download available in Oracle&#8217;s website and I didn&#8217;t see the In-Memory option. Do you know which version of the software is going to have this option? Can you please direct us to the link where we can download the right software which has In-Memory option.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-12121"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1211' onclick='return addComment.moveForm( "div-comment-1211", "1211", "respond", "417" )' aria-label='Reply to Christopher to Christopher Bernard'>Reply to Christopher</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1212">
				<div id="div-comment-1212" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1212">
			July 22, 2014 at 21 h 59 min</a>		</div>

		<p>Hi Christopher,
It&#8217;s there. I&#8217;t not an option that you check at install. Just use it by setting inmemory_size and alter table INMEMORY
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-12131"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1212' onclick='return addComment.moveForm( "div-comment-1212", "1212", "respond", "417" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
