This was first published on <a href=https://blog.dbi-services.com/oracle-12cr2-plsql-new-feature-tnsping-from-the-database>https://blog.dbi-services.com/oracle-12cr2-plsql-new-feature-tnsping-from-the-database</a> (2016-11-08)
								<h1 class="entry-title">Oracle 12cR2 PL/SQL new feature: TNSPING from the database</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Database links are resolved with the server TNS_ADMIN configuration (sqlnet.ora and tnsnames.ora). You can use tnsping to check the resolution, but it supposes that you are on the server and have set the same environment as the one which started the database.
In 12.2 you have a new package to check that: DBMS_TNS. It&#8217;s the kind of little new features that make our life easier.</p>
<p>The easy way to verify a connection string is to use tnsping. Here is an example with an EZCONNECT resolution:
<pre>
[oracle@SE122 ~]$ tnsping //10.196.234.38/CDB1.opcoct.oraclecloud.internal
TNS Ping Utility for Linux: Version 12.2.0.1.0 - Production on 08-NOV-2016 17:45:34
Copyright (c) 1997, 2016, Oracle.  All rights reserved.
Used parameter files:
/u01/app/oracle/product/12.2.0/dbhome_1/network/admin/sqlnet.ora
Used EZCONNECT adapter to resolve the alias
Attempting to contact (DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=CDB1.opcoct.oraclecloud.internal))(ADDRESS=(PROTOCOL=TCP)(HOST=10.196.234.38)(PORT=1521)))
OK (0 msec)
</pre></p>
<p>The full connection description is displayed here before contacting the listener.</p>
<p>This resolution is valid only with a specific TNS configuration (which is here /u01/app/oracle/product/12.2.0/dbhome_1/network/admin). However, you may have different configurations (using the TNS_ADMIN environment variable) and if it&#8217;s not set consistently, you may have different results.
Basically:</p>
<ul>
<li>When you connect locally to the server (no SQL*Net, no listener), the Oracle session inherits the client environment</li>
<li>When you connect remotely to a service statically registered on the listener, the Oracle session inherits the environment which started the listener</li>
<li>When you connect remotely to a service dynamically registered on the listener, the Oracle session inherits the environment which started the database</li>
</ul>
<h3>DBMS_TNS</h3>
<p>So here is this new package:
<pre>
SQL&gt; desc dbms_tns
FUNCTION RESOLVE_TNSNAME RETURNS VARCHAR2
 Argument Name                  Type                    In/Out Default?
 ------------------------------ ----------------------- ------ --------
 TNS_NAME                       VARCHAR2                IN
</pre></p>
<p>And you can run it when connected to the database to see how the name is resolved:
<pre>
SQL&gt; select dbms_tns.resolve_tnsname('&amp;_connect_identifier') from dual;
old   1: select dbms_tns.resolve_tnsname('&amp;_connect_identifier') from dual
new   1: select dbms_tns.resolve_tnsname('//10.196.234.38/CDB1.opcoct.oraclecloud.internal') from dual

DBMS_TNS.RESOLVE_TNSNAME('//10.196.234.38/CDB1.OPCOCT.ORACLECLOUD.INTERNAL')
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=CDB1.opcoct.oraclecloud.internal)(CID=(PROGRAM=oracle)(HOST=SE122.compute-opcoct.oraclecloud.internal)(USER=oracle)))(ADDRESS=(PROTOCOL=TCP)(HOST=10.196.234.38)(PORT=1521)))
</pre></p>
<p>The resolution is done without attempting to contact the listener. This ip address do not exist on my network:
<pre>
select dbms_tns.resolve_tnsname('//10.1.1.1/XX') from dual;

DBMS_TNS.RESOLVE_TNSNAME('//10.1.1.1/XX')
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=XX)(CID=(PROGRAM=oracle)(HOST=SE122.compute-opcoct.oraclecloud.internal)(USER=oracle)))(ADDRESS=(PROTOCOL=TCP)(HOST=10.1.1.1)(PORT=1521)))
</pre>
As you can see, the client identification is send here (PROGRAM and HOST).</p>
<h3>Demo</h3>
<p>I&#8217;ll use this new feature to prove my assumption above about which environment is used when connecting locally or through dynamic or static service.</p>
<p>I create 3 directories with different names for the SERVICE_NAME in order to see which one is used:</p>
<p><pre>
 mkdir -p /tmp/tns_lsnr ; echo "NAMES.DIRECTORY_PATH=TNSNAMES" &gt; /tmp/tns_lsnr/sqlnet.ora ; echo "XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_lsnr))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))" &gt; /tmp/tns_lsnr/tnsnames.ora
 mkdir -p /tmp/tns_sess ; echo "NAMES.DIRECTORY_PATH=TNSNAMES" &gt; /tmp/tns_sess/sqlnet.ora ; echo "XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_sess))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))" &gt; /tmp/tns_sess/tnsnames.ora
 mkdir -p /tmp/tns_inst; echo "NAMES.DIRECTORY_PATH=TNSNAMES" &gt; /tmp/tns_inst/sqlnet.ora ; echo "XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_inst))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))" &gt; /tmp/tns_inst/tnsnames.ora
</pre></p>
<p>In addition, I&#8217;ll need a listener configuration with a static service, let&#8217;s call it STATIC:</p>
<p><pre>
cat &gt; /tmp/tns_lsnr/listener.ora &lt;&lt;END
LISTENER=(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=$HOSTNAME)(PORT=1521))))
SID_LIST_LISTENER=(SID_LIST=(SID_DESC=(ORACLE_HOME=$ORACLE_HOME)(GLOBAL_DBNAME=STATIC)(SID_NAME=CDB1)))
END
</pre></p>
<p>Here&#8217;s a summary of the different configurations:</p>
<p><pre>
$ tail /tmp/tns*/*

==&gt; /tmp/tns_inst/sqlnet.ora &lt;==
NAMES.DIRECTORY_PATH=TNSNAMES
====&gt; /tmp/tns_inst/tnsnames.ora &lt;==
XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_inst))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
====&gt; /tmp/tns_lsnr/listener.ora &lt;==
LISTENER=(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=SE122.compute-opcoct.oraclecloud.internal)(PORT=1521))))
SID_LIST_LISTENER=(SID_LIST=(SID_DESC=(ORACLE_HOME=/u01/app/oracle/product/122EE)(GLOBAL_DBNAME=STATIC)(SID_NAME=CDB1)))
====&gt; /tmp/tns_lsnr/sqlnet.ora &lt;==
NAMES.DIRECTORY_PATH=TNSNAMES
====&gt; /tmp/tns_lsnr/tnsnames.ora &lt;==
XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_lsnr))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
====&gt; /tmp/tns_sess/sqlnet.ora &lt;==
NAMES.DIRECTORY_PATH=TNSNAMES
====&gt; /tmp/tns_sess/tnsnames.ora &lt;==
XXX=(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_sess))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
</pre></p>
<p>I start the listener and the instance with their own environment, and set the session one to another:</p>
<p><pre>
export TNS_ADMIN=/tmp/tns_lsnr ; lsnrctl start
export TNS_ADMIN=/tmp/tns_inst ; sqlplus / as sysdba &lt;&lt;&lt; startup
export TNS_ADMIN=/tmp/tns_sess
</pre></p>
<p>Now it&#8217;s time to use this new DBMS_TNS when connecting locally, through the dynamic service (CDB1) and through the static service (STATIC):</p>
<p><pre>
SQL&gt; connect system/oracle
Connected.

SQL&gt; select dbms_tns.resolve_tnsname('XXX') from dual;

DBMS_TNS.RESOLVE_TNSNAME('XXX')
-----------------------------------------------------------------------------------------------------------------------------------------------------------
(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_sess)(CID=(PROGRAM=oracle)(HOST=SE122.compute-opcoct.oraclecloud.internal)(USER=oracle)))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
</pre>
When connected locally the TNS_ADMIN from my shell environment running sqlplus is used.</p>
<p><pre>
SQL&gt; connect system/oracle@//localhost/CDB1
Connected.

SQL&gt; select dbms_tns.resolve_tnsname('XXX') from dual;

DBMS_TNS.RESOLVE_TNSNAME('XXX')
-----------------------------------------------------------------------------------------------------------------------------------------------------------
(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_inst)(CID=(PROGRAM=oracle)(HOST=SE122.compute-opcoct.oraclecloud.internal)(USER=oracle)))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
</pre>
When connected to dynamic service, the TNS_ADMIN used to startup the instance is used.</p>
<p><pre>
SQL&gt; connect system/oracle@//localhost/STATIC
Connected.

SQL&gt; select dbms_tns.resolve_tnsname('XXX') from dual;

DBMS_TNS.RESOLVE_TNSNAME('XXX')
-----------------------------------------------------------------------------------------------------------------------------------------------------------
(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME=from_lsnr)(CID=(PROGRAM=oracle)(HOST=SE122.compute-opcoct.oraclecloud.internal)(USER=oracle)))(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))
</pre>
When connected to static service, the TNS_ADMIN used to startup the listener is used.</p>
<h3>So what?</h3>
<p>You should use a consistent environment setting in order to be sure that all sessions will use the same name resolution. But if you have a doubt about it, DBMS_TNS can help to troubleshoot. It&#8217;s better than DBMS_SYSTEM.GET_ENV as it does the name resolution rather than just showing the environment variables.</p>
<p>Want to know quickly where all database links are going? Here it is:
<pre>
SQL&gt; select username,dbms_tns.resolve_tnsname(host) from cdb_db_links;
</pre></p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-102630"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
