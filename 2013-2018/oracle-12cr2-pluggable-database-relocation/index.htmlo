This was first published on <a href=https://blog.dbi-services.com/oracle-12cr2-pluggable-database-relocation>https://blog.dbi-services.com/oracle-12cr2-pluggable-database-relocation</a> (2016-11-11)
								<h1 class="entry-title">Oracle 12cR2: Pluggable database relocation</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Here is, in my opinion, the most beautiful feature of the multitenant architecture. You know how I love Transportable Tablespaces. But here:</p>
<ul>
<li>No need to put the source in read/only</li>
<li>No need to export/import the metadata logically</li>
<li>No need for any option: available even in Standard Edition</li>
</ul>
<p><span id="more-12603"></span></p>
<h3>Standard Edition</h3>
<p>I am in Standard Edition here in both source and target, no option required for this:
<pre>
SQL*Plus: Release 12.2.0.1.0 Production on Thu Nov 10 13:40:05 2016
Copyright (c) 1982, 2016, Oracle.  All rights reserved.

Connected to:
Oracle Database 12c Standard Edition Release 12.2.0.1.0 - 64bit Production
</pre></p>
<h3>Source: PDB1 on CDB1</h3>
<p>On server opc1 I have a container database CDB1 with one pluggable database PDB1 where I create a new table:
<pre>
23:40:20 (opc1)CDB1 SQL&gt;alter session set container=PDB1;
Session altered.
23:40:20 (opc1)CDB1 SQL&gt;create table DEMO as select current_timestamp insert_timestamp,instance_name from v$instance;
Table created.
23:40:21 (opc1)CDB1 SQL&gt;insert into DEMO select current_timestamp,instance_name from v$instance;
1 row created.
23:40:21 (opc1)CDB1 SQL&gt;select * from DEMO;

INSERT_TIMESTAMP                    INSTANCE_NAME
----------------------------------- ----------------
10-NOV-16 11.40.20.902761 PM +00:00 CDB1
10-NOV-16 11.40.21.966815 PM +00:00 CDB1
</pre></p>
<h3>Export encryption key</h3>
<p>I&#8217;m in Oracle Public Cloud where tablespaces are encrypted. To ship a pluggable database I must export the keys. Here is the query to get them:
<pre>
23:40:23 (opc1)CDB1 SQL&gt;select key_id from v$encryption_keys where creator_pdbname='PDB1';

KEY_ID
------------------------------------------------------------------------------
AWlnBaUXG0/gv4evS9Ywu8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</pre>
And I can filter with this query to export it:
<pre>
23:40:23 (opc1)CDB1 SQL&gt;administer key management export encryption keys with secret "oracle" to '/tmp/cdb2pdb1.p12' identified by "Ach1z0#d" with identifier in (select key_id from v$encryption_keys where creator_pdbname='PDB1');
administer key management export encryption keys with secret "oracle" to '/tmp/cdb2pdb1.p12' identified by "Ach1z0#d" with identifier in (select key_id from v$encryption_keys where creator_pdbname='PDB1')
*
ERROR at line 1:
ORA-28417: password-based keystore is not open
</pre>
I can&#8217;t do that with auto-login wallet.
<pre>
23:40:23 (opc1)CDB1 SQL&gt;select wrl_type,wrl_parameter,wallet_type from v$encryption_wallet;

WRL_TYPE WRL_PARAMETER                          WALLET_TY
-------- -------------------------------------- ---------
FILE     /u01/app/oracle/admin/CDB1/tde_wallet/ AUTOLOGIN
</pre>
 Let&#8217;s open the wallet with password:
<pre>
23:40:23 (opc1)CDB1 SQL&gt;administer key management set keystore close;
keystore altered.
23:40:23 (opc1)CDB1 SQL&gt;administer key management set keystore open identified by "Ach1z0#d";
keystore altered.
23:40:23 (opc1)CDB1 SQL&gt;select wrl_type,wrl_parameter,wallet_type from v$encryption_wallet;

WRL_TYPE WRL_PARAMETER                          WALLET_TY
-------- -------------------------------------- ---------
FILE     /u01/app/oracle/admin/CDB1/tde_wallet/ PASSWORD
</pre>
and re-try my export:
<pre>
23:40:23 (opc1)CDB1 SQL&gt;administer key management export encryption keys with secret "oracle" to '/tmp/cdb2pdb1.p12' identified by "Ach1z0#d" with identifier in (select key_id from v$encryption_keys where creator_pdbname='PDB1');
keystore altered.
</pre>
This file must be copied to the destination server. I did it with scp. You can also use dbms_file_transfer as you will need a database link anyway for the remote clone.</p>
<h3>Import encryption key</h3>
<p>On the destination server, where I have no CDB (I&#8217;m limited to one PDB here without the multitenant option)
<pre>
23:40:31 (opc2)CDB2 SQL&gt;show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         2 PDB$SEED                       READ ONLY  NO
</pre>
I have to import the encryption key:
<pre>
23:40:31 (opc2)CDB2 SQL&gt;administer key management set keystore open identified by "Ach1z0#d";
keystore altered.

23:40:31 (opc2)CDB2 SQL&gt;administer key management import encryption keys with secret "oracle" from '/tmp/cdb2pdb1.p12' identified by "Ach1z0#d";
keystore altered.
</pre>
I&#8217;m now ready to relocate my PDB as I&#8217;m sure I&#8217;ll be ready to open it.</p>
<h3>Database link</h3>
<p>The remote clone is done through a DB link. I&#8217;ve a TNS entry named CDB1:
<pre>
23:40:31 (opc2)CDB2 SQL&gt;select dbms_tns.resolve_tnsname('CDB1') from dual;

DBMS_TNS.RESOLVE_TNSNAME('CDB1')
--------------------------------------------------------------------------------
(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=opc1)(PORT=1521))(CONNECT_DAT
A=(SERVER=DEDICATED)(SERVICE_NAME=CDB1.opcoct.oraclecloud.internal)(CID=(PROGRAM
=oracle)(HOST=SE222.compute-opcoct.oraclecloud.internal)(USER=oracle))))

23:40:31 (opc2)CDB2 SQL&gt;create database link CDB1 connect to C##DBA identified by oracle using 'CDB1';
Database link created.
</pre></p>
<h3>DML on source</h3>
<p>In order to show that the source doesn&#8217;t have to be read only as in previous release, I&#8217;m running the following inserts every 5 minutes:
<pre>
23:40:44 (opc1)CDB1 SQL&gt;commit;
Commit complete.
23:40:44 (opc1)CDB1 SQL&gt;insert into DEMO select current_timestamp,instance_name from v$instance;
1 row created.
23:40:44 (opc1)CDB1 SQL&gt;select * from DEMO;

INSERT_TIMESTAMP                    INSTANCE_NAME
----------------------------------- ----------------
10-NOV-16 11.40.20.902761 PM +00:00 CDB1
10-NOV-16 11.40.21.966815 PM +00:00 CDB1
10-NOV-16 11.40.29.136529 PM +00:00 CDB1
10-NOV-16 11.40.34.214467 PM +00:00 CDB1
10-NOV-16 11.40.39.304515 PM +00:00 CDB1
10-NOV-16 11.40.44.376796 PM +00:00 CDB1
6 rows selected.
</pre></p>
<h3>PDB remote clone</h3>
<p>Here is the syntax.
I need to provide the masterkey of the source wallet.
The RELOCATE is this new feature where the source PDB will be relocated to the destination when the clone is opened.
<pre>
23:40:48 (opc2)CDB2 SQL&gt;create pluggable database PDB1 from PDB1@CDB1 keystore identified by "Ach1z0#d" relocate;
Pluggable database created.
23:41:08 (opc2)CDB2 SQL&gt;
</pre>
It took some time, shipping the datafiles through the DB link, but this is online.
I was still inserting during this time:
<pre>
23:41:04 (opc1)CDB1 SQL&gt;select * from DEMO;

INSERT_TIMESTAMP                    INSTANCE_NAME
----------------------------------- ----------------
10-NOV-16 11.40.20.902761 PM +00:00 CDB1
10-NOV-16 11.40.21.966815 PM +00:00 CDB1
10-NOV-16 11.40.29.136529 PM +00:00 CDB1
10-NOV-16 11.40.34.214467 PM +00:00 CDB1
10-NOV-16 11.40.39.304515 PM +00:00 CDB1
10-NOV-16 11.40.44.376796 PM +00:00 CDB1
10-NOV-16 11.40.49.454661 PM +00:00 CDB1
10-NOV-16 11.40.54.532699 PM +00:00 CDB1
10-NOV-16 11.40.59.614745 PM +00:00 CDB1
10-NOV-16 11.41.04.692784 PM +00:00 CDB1

10 rows selected.
</pre>
Note that you need to be in ARCHIVELOG and LOCAL UNDO to be able to do this because syncronisation will be made by media recovery when we open the clone.</p>
<h3>Open the clone</h3>
<p>Now, the theory is that when we open the clone, DML is quiesced on source during the recovery of the target and sessions can continue on the target once opened.
<pre>
23:41:09 (opc2)CDB2 SQL&gt;alter pluggable database PDB1 open;
alter pluggable database PDB1 open
*
ERROR at line 1:
ORA-00060: deadlock detected while waiting for resource
23:41:26 (opc2)CDB2 SQL&gt;
</pre>
Bad luck. Every time I tested this scenario, the first open after the relocate fails in deadlock and the session on the source crashes:
<pre>
23:41:09 (opc1)CDB1 SQL&gt;select * from DEMO;

INSERT_TIMESTAMP                    INSTANCE_NAME
----------------------------------- ----------------
10-NOV-16 11.40.20.902761 PM +00:00 CDB1
10-NOV-16 11.40.21.966815 PM +00:00 CDB1
10-NOV-16 11.40.29.136529 PM +00:00 CDB1
10-NOV-16 11.40.34.214467 PM +00:00 CDB1
10-NOV-16 11.40.39.304515 PM +00:00 CDB1
10-NOV-16 11.40.44.376796 PM +00:00 CDB1
10-NOV-16 11.40.49.454661 PM +00:00 CDB1
10-NOV-16 11.40.54.532699 PM +00:00 CDB1
10-NOV-16 11.40.59.614745 PM +00:00 CDB1
10-NOV-16 11.41.04.692784 PM +00:00 CDB1
10-NOV-16 11.41.09.773300 PM +00:00 CDB1

11 rows selected.

23:41:14 (opc1)CDB1 SQL&gt; commit;
ERROR:
ORA-03114: not connected to ORACLE
</pre></p>
<p>It&#8217;s a good occasion to look at the traces.
We can see some messages about the recovery:
<pre>
*** 2016-11-10T23:41:12.660402+00:00 (PDB1(3))
Media Recovery Log /u03/app/oracle/fast_recovery_area/CDB1/foreign_archivelog/PDB1/2016_11_10/o1_mf_1_24_2025109931_.arc
Log read is SYNCHRONOUS though disk_asynch_io is enabled!
</pre>
Those FOREIGN ARCHIVED LOG is a new type of file that you will see in the FRA in 12.2.</p>
<p>So I lost my session on source and now if I try again it works:
<pre>
23:42:20 (opc2)CDB2 SQL&gt;alter pluggable database PDB1 open;
Pluggable database altered.
23:42:24 (opc2)CDB2 SQL&gt;select * from DEMO;

INSERT_TIMESTAMP                    INSTANCE_NAME
----------------------------------- ----------------
10-NOV-16 11.40.20.902761 PM +00:00 CDB1
10-NOV-16 11.40.21.966815 PM +00:00 CDB1
10-NOV-16 11.40.29.136529 PM +00:00 CDB1
10-NOV-16 11.40.34.214467 PM +00:00 CDB1
10-NOV-16 11.40.39.304515 PM +00:00 CDB1
10-NOV-16 11.40.44.376796 PM +00:00 CDB1
10-NOV-16 11.40.49.454661 PM +00:00 CDB1
10-NOV-16 11.40.54.532699 PM +00:00 CDB1
10-NOV-16 11.40.59.614745 PM +00:00 CDB1
10-NOV-16 11.41.04.692784 PM +00:00 CDB1

10 rows selected.
</pre>
All the inserts that were commited on the source are there.
Even with this deadlock bug (SR 3-13618219421), it&#8217;s the easiest and fastest way to migrate a database, with the minimum of downtime. Especially in Standard Edition where transportable tablespaces import is not enabled.
Without the deadlock bug, the sessions on the source are supposed to be still running , only paused during the recovery, and then continue on the destination.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-126040"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 2 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1 parent" id="comment-6602">
				<div id="div-comment-6602" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/75234dd34f80230790f957f674492496?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://dba24.pl' rel='external nofollow' class='url'>Maciej Tokar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-6602">
			February 6, 2017 at 12 h 28 min</a>		</div>

		<p>Hi Franck.
Thank you for sharing this.
Did you get this foreign_archivelog in the traces of the destination site? As I understand it is something that lets the dest pdb to be in synch with source without readonly mode. Right?</p>
<p>Regards
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-66031"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-6602' onclick='return addComment.moveForm( "div-comment-6602", "6602", "respond", "12603" )' aria-label='Reply to Maciej to Maciej Tokar'>Reply to Maciej</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-6914">
				<div id="div-comment-6914" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-6914">
			February 14, 2017 at 10 h 52 min</a>		</div>

		<p>Hi Maciej,
Yes, the foreign archivelogs are those that are needed to recover the PDB that was copied in a fuzzy state. They are in the destination, shipped from the source.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-69151"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-6914' onclick='return addComment.moveForm( "div-comment-6914", "6914", "respond", "12603" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
