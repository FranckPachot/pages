This was first published on <a href=https://blog.dbi-services.com/oracle-compression-availability-and-licensing>https://blog.dbi-services.com/oracle-compression-availability-and-licensing</a> (2015-03-06)
								<h1 class="entry-title">Oracle compression, availability and licensing</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Various methods of table compression have been introduced at each release. Some require a specific storage system Some requires specific options. Some are only for static data. And it&#8217;s not always very clear for the simple reason that their name has changed.</p>
<p>Name change for technical reasons (ROW/COLUMN STORE precision when a columnar compression has been introduced) or for marketing reason (COMPRESS FOR OLTP gave the idea that other &#8211; Exadata &#8211; compression level may not be suited for OLTP).</p>
<p>Of course that brings a lot of ambiguity such as:</p>
<ul>
<li>HCC is called &#8216;COLUMN STORE&#8217; even if it has nothing to do with the In-Memory columns store</li>
<li>COMPRESS ADVANCED is only one part of Advanced Compression Option</li>
<li>EHCC (Exadata Hybrid Columnar Compression) is not only for Exadata</li>
<li>COMPRESS FOR OLTP is not called like that anymore, but is still the only compression suitable for OLTP</li>
<li>HCC Row-Level Locking is not for ROW STORE but for COLUMN STORE. It&#8217;s suited for DML operation but is different than FOR OLTP. Anyway COLUMN STORE compression can be transformed to ROW STORE compression during updates. And that locking feature is licenced with the Advanced Compression Option, and available in Exadata only&#8230;</li>
<li>When do you need ACO (Advanced Compression Option) or not?</li>
</ul>
<p>Let&#8217;s make it clear here.</p>
<h3>NOCOMPRESS is the only possibility in Standard Edition</h3>
<p>In NOCOMPRESS &#8211; the default &#8211; each datatype takes it&#8217;s full length. Number takes about 2 significan digits per bytes, dates takes 8 bytes, characters string takes one byte (or more in multibyte charactersets) per character, plus the length. Null takes 1 bytes. The only compression that happens is that nulls at the end of rows are not stored.</p>
<p>I&#8217;m created a few tables storing characters, numbers and dates:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; create table TEST_NUM_22 NOCOMPRESS
     as select dbms_random.value(1,1e6) x , dbms_random.value(1,1e6) y
SQL&gt; create table TEST_NUM_05 NOCOMPRESS
     as select round(dbms_random.value(1,1e6)) x , round(dbms_random.value(1,1e6)) y ...
SQL&gt; create table TEST_STR_U4 NOCOMPRESS
     as select dbms_random.string('U',3) x , dbms_random.string('U',3) y ...
SQL&gt; create table TEST_STR_A4 NOCOMPRESS
     as select dbms_random.string('A',3) x , dbms_random.string('A',3) y ...
SQL&gt; create table TEST_STR_50 NOCOMPRESS
     as select dbms_random.string('P',49) x , dbms_random.string('P',49) y ...
SQL&gt; create table TEST_DAT_08 NOCOMPRESS
     as select sysdate+rownum x, sysdate+rownum y ...
SQL&gt; create table TEST_DAT_V8 NOCOMPRESS
     as select sysdate+mod(rownum,5) x, sysdate+mod(rownum,5) y ...
</pre>
<p>Here are the tables I have:</p>
<ul>
<li>TEST_STR_A4 has 3 random character strings, TEST_STR_U4 has the same but only uppercase (so more duplicates).</li>
<li>TEST_STR_50 has 49 random character strings with any printable characters &#8211; low duplicate probability</li>
<li>TEST_NUM_05 and TEST_NUM_22 are integer and decimal numbers from 1 to one million</li>
<li>TEST_DAT_08 is all different dates and TEST_DAT_V8 has only 5 distinct dates</li>
</ul>
<p>Here is the size in blocks (blocks are 8k)</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select table_name,blocks,compression,compress_for from user_tables order by 1;

TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08        305 DISABLED
TEST_DAT_V8        305 DISABLED
TEST_NUM_05        219 DISABLED
TEST_NUM_22        701 DISABLED
TEST_STR_50       1503 DISABLED
TEST_STR_A4        192 DISABLED
TEST_STR_U4        192 DISABLED
</pre>
<p>About licensing, nocompress is availaible in all editions:</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<h3>BASIC COMPRESSION for bulk load in Enterprise Edition</h3>
<p>This is the compression that we know as &#8216;COMPRESS&#8217; since 9i. It is a block compression where duplicate values are not repeated: the value is put in the block header and each column has only a pointer to it. Deduplication is not only for same column. That compression occurs only when filling full blocks with bulk load (direct-path load, insert append). As soon as there is an update the block is decompressed.</p>
<p>In 12c the syntax is: ROW STORE COMPRESS BASIC</p>
<pre>SQL&gt; select table_name,blocks,compression,compress_for from user_tables order by 1;</pre>
<pre class="brush: sql; gutter: true; first-line: 1">TABLE_NAME BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08 276 ENABLED BASIC
TEST_DAT_V8 151 ENABLED BASIC
TEST_NUM_05 199 ENABLED BASIC
TEST_NUM_22 628 ENABLED BASIC
TEST_STR_50 1346 ENABLED BASIC
TEST_STR_A4 174 ENABLED BASIC
TEST_STR_U4 174 ENABLED BASIC</pre>
<p>Here I don&#8217;t have a lot of duplicates for large columns, so the compression ratio is not very good.</p>
<p>About licensing, COMPRESS BASIC is availaible in Enterprise Edition only, but without any option:</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<h3>ADVANCED COMPRESSION for OLTP with Advanced Compression Option</h3>
<p>Because basic compression is not available for OLTP with conventional DML, 11g introduced the same compression but automatically triggered when a block becomes full. No need to schedule regular reorganization to compress the blocks that are full. 12c removed the &#8216;FOR OLTP&#8217; and named it with the name of the option.</p>
<p>The full syntax is: ROW STORE COMPRESS ADVANCED</p>
<p>It about the same compression ratio as the basic compression:</p>
<pre class="brush: sql; gutter: true; first-line: 1">TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08        305 ENABLED  ADVANCED
TEST_DAT_V8        167 ENABLED  ADVANCED
TEST_NUM_05        219 ENABLED  ADVANCED
TEST_NUM_22        701 ENABLED  ADVANCED
TEST_STR_50       1503 ENABLED  ADVANCED
TEST_STR_A4        192 ENABLED  ADVANCED
TEST_STR_U4        192 ENABLED  ADVANCED</pre>
<p>But it is licenced as an additional option: Advanced Compression Option:</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE:  ADVANCED Table Compression Feature Usage:  Tables compressed for ADVAN...</pre>
<p>Note that in 12c a lot of features has been introduced as part of ACO. You can use Automatic Data Optimization for ILM only with that option &#8211; even if you don&#8217;t compress and ieven if you compress it is not an ADVANCED COMPRESS.</p>
<h3>EXADATA COMPRESSION queries and archiving into Oracle provided storage</h3>
<p>Exadata introduced Hybrid Columnar Compression. Multiple blocks are grouped into Compression Unique where table data is stored in column. Then a compression algorithm is applied. There are 4 levels. This compression is not suited for updates. In QUERY levels it&#8217;s suited for data that read frequently. The gain in I/O (because of the reduced size) compensates the CPU overhead to decompress. In &#8216;ARCHIVE&#8217; mode the CPU usage makes it no optimal for queries, so it&#8217;s only for non-frequently accessed data.</p>
<p>Those EHCC are available in Oracle supplied storage: Exadata database machine, Oracle SuperCluster , ZFS storage appliances, Pillar axiom array. But not in ODA. Note that this is not a technical choice but a maketing one. The compression library is in the Oracle database binaries and the feature availability is enabled depending on storage type (visible through SNMP).</p>
<p>The compression levels are detailed by @KovachevPro in the <a href="http://progeeking.com/2014/02/14/all-about-hcc/">progeeking</a> blog. I&#8217;ll only show the 12c syntax here and the compression obtained on the previous table:</p>
<h4>LZO algorithm</h4>
<p>In 12c the syntax is: COMPRESS FOR QUERY LOW</p>
<pre class="brush: sql; gutter: true; first-line: 1">TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08        110 ENABLED  QUERY LOW
TEST_DAT_V8          7 ENABLED  QUERY LOW
TEST_NUM_05        116 ENABLED  QUERY LOW
TEST_NUM_22        552 ENABLED  QUERY LOW
TEST_STR_50       1260 ENABLED  QUERY LOW
TEST_STR_A4         87 ENABLED  QUERY LOW
TEST_STR_U4         87 ENABLED  QUERY LOW</pre>
<p>Compression ratio is good especially when we have a lot of repeated values.</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: Number of Hybrid Columnar Compressed Segments: 7,  Segments Analyzed: 7
 FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<h3>ZLIB algorithm</h3>
<pre class="brush: sql; gutter: true; first-line: 1"> In 12c the syntax is: COMPRESS FOR QUERY HIGH</pre>
<pre>TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08          7 ENABLED  QUERY HIGH
TEST_DAT_V8          7 ENABLED  QUERY HIGH
TEST_NUM_05         71 ENABLED  QUERY HIGH
TEST_NUM_22        461 ENABLED  QUERY HIGH
TEST_STR_50       1052 ENABLED  QUERY HIGH
TEST_STR_A4         51 ENABLED  QUERY HIGH
TEST_STR_U4         38 ENABLED  QUERY HIGH</pre>
<pre> FEATURE USAGE: Number of Hybrid Columnar Compressed Segments: 7,  Segments Analyzed: 7
 FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<p>In 12c the syntax for higher ZLIB level is: COMPRESS FOR ARCHIVE LOW</p>
<pre class="brush: sql; gutter: true; first-line: 1">TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08          7 ENABLED  ARCHIVE LOW
TEST_DAT_V8          7 ENABLED  ARCHIVE LOW
TEST_NUM_05         70 ENABLED  ARCHIVE LOW
TEST_NUM_22        475 ENABLED  ARCHIVE LOW
TEST_STR_50       1073 ENABLED  ARCHIVE LOW
TEST_STR_A4         51 ENABLED  ARCHIVE LOW
TEST_STR_U4         38 ENABLED  ARCHIVE LOW</pre>
<p>In this exemple, I don&#8217;t get an higher ratio, but that depends on data pettern.</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: Number of Hybrid Columnar Compressed Segments: 7,  Segments Analyzed: 7
 FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<h3>BZIP2 algorithm</h3>
<p>In 12c the syntax is: COLUMN STORE COMPRESS FOR ARCHIVE HIGH</p>
<pre class="brush: sql; gutter: true; first-line: 1">TABLE_NAME      BLOCKS COMPRESS COMPRESS_FOR
----------- ---------- -------- ------------------------------
TEST_DAT_08          7 ENABLED  ARCHIVE HIGH
TEST_DAT_V8          7 ENABLED  ARCHIVE HIGH
TEST_NUM_05         61 ENABLED  ARCHIVE HIGH
TEST_NUM_22        478 ENABLED  ARCHIVE HIGH
TEST_STR_50       1066 ENABLED  ARCHIVE HIGH
TEST_STR_A4         42 ENABLED  ARCHIVE HIGH
TEST_STR_U4         32 ENABLED  ARCHIVE HIGH</pre>
<p>This level is better, but requires lot of CPU both to compress and uncompress</p>
<pre class="brush: sql; gutter: true; first-line: 1"> FEATURE USAGE: Number of Hybrid Columnar Compressed Segments: 0,  Segments Analyzed: 7
 FEATURE USAGE: In-Memory Column Store Not Detected
 FEATURE USAGE: ADVANCED Table Compression Not Detected</pre>
<p>Note that I don&#8217;t know why HCC is not flagged by feature usage here. Probably a bug in catfusrg.sql but anyway you don&#8217;t need to buy license for that &#8211; just by your storage at Oracle.</p>
<p>One important thing to know is that even in QUERY levels it&#8217;s optimized for bul reads. Reading row-by-row from any COLUMN STORE is not very efficient, especially when we need to decompress the whole compression unit.</p>
<h3>Information Lifecycle Management and licensing</h3>
<p>In 12c you have the ADO (Automatic Data Optimization) option to compress automatically cold data.</p>
<p>Without ACO option you cannot use it. Then compression must be done manually and you will probably use ALTER TABLE &#8230; MOVE PARTITION &#8230; COMPRESS BASIC ONLINE. This is always possible in Enterprise Edition. If you have an Oracle storage, then you can use the EHCC compression. <strong>This does not need additional option when you do it manually.</strong></p>
<p>If you want to do it automatically &#8211; the A of ADO &#8211; you need to buy ACO option. But once again the EHCC is available only for Oracle storage. Then, without it, you can use only the BASIC COMPRESSION. (COMPRESS ADVANCED is not needed here because ADO does bulk loads anyway). So the &#8216;Advanced&#8217; in &#8216;Advanced Compression Option&#8217; rather mean &#8216;Automatic&#8217; when related to ILM&#8230;</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-5940"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1451">
				<div id="div-comment-1451" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1451">
			May 17, 2015 at 14 h 04 min</a>		</div>

		<p>I had a question so maybe the following point was not clear: In Exadata you need Advanced Compression Option licence only for the COMPRESS FOR OLTP which is now called COMPRESS ADVANCED, or when using &#8216;row level locking&#8217; EHCC. The HCC without &#8216;row level locking&#8217; do not need the option. The MEMCOMPRESS is available only with In-Memory option, but you don&#8217;t need additional ACO licence for it.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14521"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1451' onclick='return addComment.moveForm( "div-comment-1451", "1451", "respond", "593" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
