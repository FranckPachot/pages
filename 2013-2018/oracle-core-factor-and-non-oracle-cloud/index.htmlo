This was first published on <a href=https://blog.dbi-services.com/oracle-core-factor-and-non-oracle-cloud>https://blog.dbi-services.com/oracle-core-factor-and-non-oracle-cloud</a> (2017-01-30)
								<h1 class="entry-title">Oracle Core factor and Oracle or non-Oracle Cloud</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Oracle Database licensing can be based on two metrics: Processor or Named User Plus (NUP). NUP also necessitate to count the processors because there is a minimum number of NUP per processor. Then it is very important to know how to count processors. The time where a machine had 1 socket with 1 processor with 1 chip with 1 core running 1 thread is really old past. Today, we have physical machines with multi-core processors, running multiple threads per core. And virtualization allocates part of it to virtual machines, often called vCPU.</p>
<p>Oracle still uses the name &#8216;processor&#8217; but declines the way of counting them by processor vendor (Core Factor), virtualization solution, and cloud provider.
<span id="more-14572"></span></p>
<h3>References</h3>
<p>The main document referenced here are:</p>
<p>The Oracle Processor Core Factor Table: <a href="http://www.oracle.com/us/corporate/contracts/processor-core-factor-table-070634.pdf" target="_blank">http://www.oracle.com/us/corporate/contracts/processor-core-factor-table-070634.pdf</a> which describes how to adjust core count to processor count. It also describes how to count Oracle Cloud CPU (aka OCPU).</p>
<p>The Licensing Oracle Software in the Cloud Computing Environment: <a href="http://www.oracle.com/us/corporate/pricing/cloud-licensing-070579.pdf" target="_blank">http://www.oracle.com/us/corporate/pricing/cloud-licensing-070579.pdf</a> which describes how to count Amazon AWS vCPU and Microsoft Azure Cores.</p>
<p>There is no mention of other cloud providers, but they all run virtualization so comes the Oracle Partitioning Policy to know how to count physical vs. virtual CPU: <a href="http://www.oracle.com/us/corporate/pricing/partitioning-070609.pdf">http://www.oracle.com/us/corporate/pricing/partitioning-070609.pdf</a>. However, their hosting contract may mention different things.</p>
<p>At the end of those documents, you see a mention that they are &#8216;for educational purposes only&#8217; so basically there&#8217;s no legal truth in them and my blog post being my interpretation on that has no value at all&#8230; Your contracts have the truth when it comes to legal interpretation.</p>
<p>So you might wonder what&#8217;s the point reading those documents if they have no value? Well, your goal, as an IT manager, is not to go to court and fight with attorneys. If you want to avoid any problems, it is better to read those rules and adhere to them, whether you find them fair or not. Of course, you can also choose to go to other vendors with other models, such as open source. But that&#8217;s not the goal of this post. Here I suppose that you like the oracle database technology, as much as I do, and that you are looking for a way to run it at affordable cost without worrying about LMS audits&#8230;</p>
<p>Something else about those documents: they change, so you may want to look at history. For example, about Amazon and Azure, the definitions were a bit different a few days ago and the web time machine can help us: <a href="http://web.archive.org/web/20161226082104/http://www.oracle.com/us/corporate/pricing/cloud-licensing-070579.pdf" target="_blank">http://web.archive.org/web/20161226082104/http://www.oracle.com/us/corporate/pricing/cloud-licensing-070579.pdf</a>.</p>
<h3>Vendors</h3>
<p>Of course, there may be some technical reasons behind core factor, virtualization and cloud factors. But let&#8217;s face it, besides the database, Oracle is also a hardware vendor, a virtualization software vendor, and a cloud provider. They are at the top in database market, willing to do the same on the cloud market. Making database cheaper on their products may be a way to achieve that. Customers wanting to stay with Oracle Database will be tempted to go to full Oracle stack.</p>
<p>The combination of core factor and virtualisation rules clearly disadvantages all competitors:</p>
<ul>
<li>IBM LPAR virtualisation is accepted, but IBM POWER core factor makes the database 2x more expensive than on processors you find in Oracle hardware (Intel, SPARC)</li>
<li>Most data center run on VMWare ESX with 0.5 core factor Intel, but counting vCPU is not accepted and the whole datacenter may have to be licenced</li>
<li>We are allowed to count vCPU on Amazon and Azure virtualization, they run Intel Xeon, but core factor applies only on Oracle Cloud. You need x2 processor licenses on AWS or Azure for the same processor cores</li>
<li>Disabling cores from the BIOS is how Capacity on Demand is done on bare metal ODA, but we are not allowed to do the same on similar hardware</li>
</ul>
<p>So basically, running Oracle Database is cheaper on Oracle Hardware, Oracle virtualization and Oracle Cloud. When you do it on other vendors, you can&#8217;t do capacity on demand, and you need more processor licenses to run on same number of CPU.</p>
<h3>Enterprise Edition</h3>
<p>On the <strong>Oracle Cloud</strong>, you allocate CPU resources with shape OCPU. One OCPU is the equivalent of one Intel Xeon core with 2 threads. And one processor licences covers 2 OCPUs. This looks like  the core factor for Inter Xeon even if it is not directly mentioned (but this equivalence is written in the core factor document). So One processor license covers <strong>2 cores</strong>, 4 vCPU with hyper-threading.</p>
<p>On Amazon <strong>EC2</strong> and <strong>RDS </strong>one processor licence covers <strong>1 core</strong>. This can be 1 vCPU (T2 and m3.medium have one thread per core) or 2 vCPU (hyper-threaded instances). The AWS document <a href="https://aws.amazon.com/ec2/instance-types/" target="_blank">https://aws.amazon.com/ec2/instance-types/</a> mentions that <em>each vCPU is a hyperthread of an Intel Xeon core except for T2 and m3.medium.</em></p>
<p>On Microsoft <strong>Azure</strong> one processor license covers <strong>1 core</strong>. This is 1 vCPU as there is no hyper-threading enabled.</p>
<h4>23-Jan-2017</h4>
<p>I mentioned looking at archive.org version of the documents. Tim Hall has mentioned what has changed on is <a href="https://oracle-base.com/blog/2017/01/28/oracles-cloud-licensing-change-be-warned/" target="_blank">blog</a></p>
<p>The previous document was not very clear, mentioning &#8216;virtual cores&#8217;. Actually, &#8216;virtual cores&#8217; are the number of cores that are behind the vCPU: one for T2 instances (and m3.medium), two for hyper-threaded instances. And this is listed precisely on <a href="https://aws.amazon.com/ec2/virtualcores/">https://aws.amazon.com/ec2/virtualcores/</a> for Amazon. It is clear also for Azure as there is no hyper-threading.</p>
<p>But what has changed is that there were previously two mentions of applying the core factor:</p>
<ul>
<li>An example on 8 virtual cores requiring 8 * 0.5 = 4 processor licenses</li>
<li>The mention that AWS implements Oracle VM and then follow the rules of hard partitioning and &#8216;standard processor metric&#8217; which, IMO, includes the core factor</li>
</ul>
<p>Those two have disappear in the new document, with an explicit mention that <em>When counting Oracle Processor license requirements in Authorized Cloud Environments, the Oracle Processor Core Factor Table is not applicable.</em> This makes the Oracle Cloud competitors two times more expensive than before for running Oracle Databases. The fun part is that IaaS providers that are not &#8216;Authorized&#8217;, or private clouds, can apply core factor and count vCPUs as long as they virtualize with Oracle VM on Intel Xeon. But hosting companies may have different rules in their contracts.</p>
<h3>NUP</h3>
<p>When licensing in NUP, the metric is not the number of processor. But you have to count them because you need to buy more than 25 NUP per processor. This means that if you have 25 NUP only (for a development environment with few developers for example) you can run it on 2 cores in the Oracle Public Cloud, but only one core on the other &#8216;Authorized&#8217; ones.</p>
<h3>Standard Edition</h3>
<p>Note that the core factor has nothing to do in Standard Edition. Processor metric for Standard Edition is not a core but a socket. On current Intel processors, a socket can run 12, 18, or 24 cores. But maths are different in the Cloud from an Oracle licensing perspective.</p>
<p>In the <strong>Oracle Cloud</strong>, one &#8216;socket&#8217; is 4 OCPU which is 4 cores (8 threads). An instance with 1 to 8 vCPU requires 1 SE2 processor license. 9 to 16 vCPU requires 2 SE processor licences and I think it is the maximum you can have on Oracle Cloud. So the idea is that one socket is equivalent to <strong>4 cores</strong>. This is low, but it was worse before October where one &#8216;socket&#8217; was 2 cores only.</p>
<p>Worse also for the competitors cloud, as this has not changed and it is still one &#8216;socket&#8217; for 2 cores. This means that in <strong>Azure</strong> a SE2 processor licence covers <strong>2 cores</strong>, and in <strong>Amazon</strong> it covers 4 vCPU (which are 4 threads on <strong>2 cores</strong>).</p>
<h3>Standard Edition 2</h3>
<p>Now if you remember that SE2 has a limit of 16 threads for on-premises, the limit on the Cloud is 8 vCPUs on Amazon. You cannot run SE2 on a AWS instance with more than 8 vCPU. This is a big limitation. On-premises, the limit is soft only: resource manager will schedule at most 16 user sessions on CPU. But more resources can be used by background processes. On AWS, you are limited to 8 CPU treads in total, which means that you have only 4 cores for all processes &#8211; user and background included. And CPU starvation is not very good when you wait for LGWR.</p>
<p>This is even worse on Azure where the limit is 4 cores without hyper-threading.</p>
<p>This is clearly stated in the &#8216;Authorized Cloud&#8217; document:
<i>Oracle Standard Edition One and Standard Edition 2 may only be licensed on Authorized Cloud Environment instances up to eight Amazon vCPUs or four Azure CPU Cores.</i>. Here again, the SE2 comes at the price of SE but with limitations of SE1.</p>
<p>Once again, rules are more friendly for Oracle Cloud where you can create a Standard Edition instance on 16 OCPU (which is 32 threads). SE2 resource manager will still limit to 16 user sessions, and they will have one core for each. And background processes will be able use the additional resource coming from hyperthreading.</p>
<h3>ULA</h3>
<p>There are two important points regarding ULA and &#8216;authorized clouds': ULA licences can be used during the ULA, but they don&#8217;t count in certification to exit ULA.</p>
<h3>So what?</h3>
<p>I don&#8217;t think I&#8217;ll risk a conclusion here. Having different price for same software running on similar hardware doesn&#8217;t look fair. I&#8217;m more annoyed by the difficulty to compare, espacially when rules change from time to time. But I can understand that vendors want to push their own products.</p>
<p>Let&#8217;s get technical. My recommandation is to use the minimum of CPU resources so that you don&#8217;t have to run your application on dozens of vCPUs. This is why we like Oracle: it is very efficient both for OLTP and BI. Most of the code used by your critical use-cases was optimized decades ago for mono-core processors. Look at an AWR report, identify the queries that are responsible for most of CPU and tune them. Stop hard parsing over and over. Stop reading always the same blocks. Stop doing row-by-row round-trips to your database. Don&#8217;t waste your CPU cycles doing all this unnecessary work and you will save money, whatever the &#8216;core factor&#8217; is.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-145730"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 5 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-6683">
				<div id="div-comment-6683" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/37bfa540109d4967f5e8b43528ff35e0?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Fernando</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-6683">
			February 8, 2017 at 20 h 22 min</a>		</div>

		<p>Franck,</p>
<p>How does this &#8220;SE2 resource manager will still limit to 16 user sessions&#8221; work? You mean 16 session per Database user? Or is 16 cpu threads?</p>
<p>I did not get it right, yets. Not even SE1 has this &#8220;user session limit&#8221;. I thoug SE2 had cpu threads limit, not user session.</p>
<p>Tks for your help, your blog is great!!!!
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-66841"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-6683' onclick='return addComment.moveForm( "div-comment-6683", "6683", "respond", "14572" )' aria-label='Reply to Fernando to Fernando'>Reply to Fernando</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-6739">
				<div id="div-comment-6739" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-6739">
			February 9, 2017 at 22 h 01 min</a>		</div>

		<p>Hi Fernando,
The limitation is done by resource manager, for each database, letting at maximum 16 session on CPU. It is better like that: background processes will never been scheduled out. SE1 had no limitation, probably because it was designed at a time were sockets had only few cores.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-67401"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-6739' onclick='return addComment.moveForm( "div-comment-6739", "6739", "respond", "14572" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-7186">
				<div id="div-comment-7186" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/62ce634ecc22cb834c2547c390d117f7?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Brijesh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7186">
			March 24, 2017 at 17 h 14 min</a>		</div>

		<p>Thank you for this detailed article.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-71871"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7186' onclick='return addComment.moveForm( "div-comment-7186", "7186", "respond", "14572" )' aria-label='Reply to Brijesh to Brijesh'>Reply to Brijesh</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-8643">
				<div id="div-comment-8643" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/7c287b93fb3d0e5e727fbe56de77fdee?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Keith Kent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-8643">
			September 26, 2017 at 17 h 07 min</a>		</div>

		<p>&gt;&gt; IBM LPAR virtualisation is accepted, but IBM POWER core factor makes the database 2x more expensive than on processors you find in Oracle hardware (Intel, SPARC)</p>
<p>This statement purely considers the core factors of the chipsets and does not take into account the relative processing power of the respective Power8, x86 and SPARC Processors.
Does it ?
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-86441"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-8643' onclick='return addComment.moveForm( "div-comment-8643", "8643", "respond", "14572" )' aria-label='Reply to Keith to Keith Kent'>Reply to Keith</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor even depth-2" id="comment-8644">
				<div id="div-comment-8644" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-8644">
			September 26, 2017 at 17 h 35 min</a>		</div>

		<p>Hi Keith,
Right, there&#8217;s no comparison of performance, which is not easy to do anyway. For example, some processors are very good at running lot of concurrent thread, but bad for one serial session.
Benchmarks can be done on specific platform with specific workload, such as:
<a href="../amazon-aws-instances-and-oracle-database-performance/index.html" rel="nofollow">https://blog.dbi-services.com/amazon-aws-instances-and-oracle-database-performance/</a>
<a href="../oracle-public-cloud-2-ocpu-for-1-proc-license/index.html" rel="nofollow">https://blog.dbi-services.com/oracle-public-cloud-2-ocpu-for-1-proc-license/</a>
<a href="../oracle-public-cloud-liops-with-4-ocpu-in-paas/index.html" rel="nofollow">https://blog.dbi-services.com/oracle-public-cloud-liops-with-4-ocpu-in-paas/</a>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-86451"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-8644' onclick='return addComment.moveForm( "div-comment-8644", "8644", "respond", "14572" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
