This was first published on <a href=https://blog.dbi-services.com/oracle-database-multilingual-engine-mle>https://blog.dbi-services.com/oracle-database-multilingual-engine-mle</a> (2017-10-11)
								<h1 class="entry-title">Oracle Database Multilingual Engine (MLE)</h1>
		<div class="content-inner">
			
						
						
		   
			<p>My <a href="../odc-appreciation-day-javascript-in-the-database/index.html" target="_blank">ODC appreciation blog post</a> was about Javascript in the database running in the beta of the Oracle Database Multilingual Engine (MLE). Here I&#8217;ll detail my first test which is a comparison, in performance, between a package written in Javascript, running in the MLE, and one written and running in PL/SQL.
<span id="more-18879"></span>
I&#8217;ve downloaded the 12GB .ova from <a href="http://www.oracle.com/technetwork/database/multilingual-engine/overview/index.html" target="_blank">OTN</a>, installed the latest <a href="http://www.oracle.com/technetwork/developer-tools/sqlcl/downloads/index.html" target="_blank">SQLcl</a>, and I&#8217;m ready to load my first Javascript procedure. I want something simple that I can run a lot of times because I want to test my main concern when running code in a different engine: the context switch between the SQL engine and the procedural one.</p>
<p>My kid&#8217;s maths exercises were about GCD (greatest common divisor) this week-end so I grabbed the <a href="http://pages.pacificcoast.net/~cazelais/euclid.html" target="_blank">Euclid&#8217;s algorithm in Javascript</a>. This algorithm was the first program I ever wrote long time ago, on ZX-81, in BASIC. Now in Javascript it can use recursion. So here is my gcd.js file:
<pre>
module.exports.gcd = function (a, b) {
 function gcd(a, b) {
 if (b == 0)
   {return a}
 else
   {return gcd(b, a % b)}
 }
return gcd(a,b)
}
</pre>
We need strong typing to be able to load it as a stored procedure, so here is the TypeScript definition in gcd.d.ts
<pre>
export function gcd(a:number, b:number ) : number;
</pre></p>
<p>I load it with the dbjs utility, which I run in verbose mode:
<pre>
[oracle@dbml MLE]$ dbjs deploy -vv gcd.js -u demo -p demo -c //localhost:1521/DBML
deploy: command called  /media/sf_share/MLE/gcd.js oracle
Oracle backend: starting transpiler
gcd: processed function
Oracle backend: opening connection to database
gcd.js: retrieving functions
dropModule: called with  gcd.js
loadModule: called with gcd.js
BEGIN
EXECUTE IMMEDIATE 'CREATE PACKAGE GCD AS
FUNCTION GCD("p0" IN NUMBER, "p1" IN NUMBER) RETURN NUMBER AS LANGUAGE JS LIBRARY "gcd.js" NAME "gcd" PARAMETERS("p0" DOUBLE, "p1" DOUBLE);
END GCD;';
END;
: generated PLSQL
+ gcd.js
└─┬ gcd
  └── SCALAR FUNCTION GCD.GCD("p0" IN NUMBER, "p1" IN NUMBER) RETURN NUMBER
</pre>
As it is mentioned in the verbose log, the Javascript code is transpiled. My guess is that the Javascript is parsed by the Oracle Truffle framework and compiled by Oracle GaalVM. More info in the <a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index.html" target="_blank">One VM to Rule Them All</a> paper. </p>
<p>This has loaded the package, the library and an &#8216;undefined&#8217; object of type 144 (this MLE is in beta so not all dictionary views have been updated):</p>
<p><pre>
SQL&gt; select * from dba_objects where owner='DEMO';

OWNER   OBJECT_NAME   SUBOBJECT_NAME   OBJECT_ID   DATA_OBJECT_ID   OBJECT_TYPE   CREATED                LAST_DDL_TIME          TIMESTAMP             STATUS   TEMPORARY   GENERATED   SECONDARY   NAMESPACE   EDITION_NAME   SHARING   EDITIONABLE   ORACLE_MAINTAINED
-----   -----------   --------------   ---------   --------------   -----------   -------                -------------          ---------             ------   ---------   ---------   ---------   ---------   ------------   -------   -----------   -----------------
DEMO    GCD                                  93427                  PACKAGE       09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   2017-10-09:15:29:33   VALID    N           N           N                     1                NONE      Y             N
DEMO    gcd.js                               93426                  LIBRARY       09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   2017-10-09:15:29:33   VALID    N           N           N                     1                NONE      Y             N
DEMO    gcd.js                               93425                  UNDEFINED     09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   2017-10-09:15:29:33   VALID    N           N           N                   129                NONE                    N


SQL&gt; select * from sys.obj$ where obj# in (select object_id from dba_objects where owner='DEMO');

OBJ#    DATAOBJ#   OWNER#   NAME         NAMESPACE   SUBNAME   TYPE#   CTIME                  MTIME                  STIME                  STATUS   REMOTEOWNER   LINKNAME   FLAGS   OID$   SPARE1   SPARE2   SPARE3   SPARE4   SPARE5   SPARE6   SIGNATURE                          SPARE7   SPARE8   SPARE9
----    --------   ------   ----         ---------   -------   -----   -----                  -----                  -----                  ------   -----------   --------   -----   ----   ------   ------   ------   ------   ------   ------   ---------                          ------   ------   ------
  93427                 284 GCD                    1                 9 09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   09-OCT-2017 15:29:33          1                                0               6    65535      284                            51713CBD7509C7BDA23B4805C3E662DF          0        0        0
  93426                 284 gcd.js                 1                22 09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   09-OCT-2017 15:29:33          1                                0               6    65535      284                            8ABC0DDB16E96DC9586A7738071548F0          0        0        0
  93425                 284 gcd.js               129               144 09-OCT-2017 15:29:33   09-OCT-2017 15:29:33   09-OCT-2017 15:29:33          1                                0               6    65535      284                                                                      0        0        0
</pre></p>
<h3>MLE Javascript</h3>
<p>So, I&#8217;ve executed the function multiple times for each one of 10 millions rows:
<pre>
SQL&gt; select distinct gcd(rownum,rownum+1),gcd(rownum,rownum+2),gcd(rownum,rownum+3) from xmltable('1 to 10000000');

Elapsed: 00:00:17.64
</pre></p>
<p>The execution on 30 million took 17 seconds</p>
<h3>PL/SQL function</h3>
<p>In order to compare, I&#8217;ve created the same in PL/SQL:
<pre>
SQL&gt; create or replace function gcd_pl(a number, b number) return number as
  2   function gcd(a number, b number) return number is
  3   begin
  4     if b = 0 then
  5        return a;
  6     else
  7        return gcd_pl.gcd(b,mod(a,b));
  8     end if;
  9   end;
 10   begin
 11     return gcd_pl.gcd(a,b);
 12   end;
 13  /
</pre></p>
<p>Here is the execution:
<pre>
SQL&gt; select distinct gcd_pl(rownum,rownum+1),gcd_pl(rownum,rownum+2),gcd_pl(rownum,rownum+3) from xmltable('1 to 10000000');

Elapsed: 00:01:21.05
</pre></p>
<h3>PL/SQL UDF function</h3>
<p>In 12<i>c</i> we can declare a function with the pragma UDF so that it is optimized for calling from SQL
<pre>
SQL&gt; create or replace function gcd_pl_udf(a number, b number) return number as
  2   pragma UDF;
  3   function gcd(a number, b number) return number is
  4   begin
  5     if b = 0 then
  6        return a;
  7     else
  8        return gcd_pl_udf.gcd(b,mod(a,b));
  9     end if;
 10   end;
 11   begin
 12     return gcd_pl_udf.gcd(a,b);
 13   end;
 14  /
</pre></p>
<p>Here is the execution:
<pre>
SQL&gt; select distinct gcd_pl_udf(rownum,rownum+1),gcd_pl_udf(rownum,rownum+2),gcd_pl_udf(rownum,rownum+3) from xmltable('1 to 10000000');

Elapsed: 00:00:51.85
</pre></p>
<h3>Native compilation</h3>
<p>We can also improve PL/SQL runtime by compiling it in native, rather than being interpreted on p-code
<pre>
SQL&gt; alter session set plsql_code_type=native;
Session altered.

SQL&gt; alter function gcd_pl_udf compile;
Function altered.

SQL&gt; alter function gcd_pl compile;
Function altered.
</pre></p>
<p>and here is the result:
<pre>
SQL&gt; select distinct gcd_pl_udf(rownum,rownum+1),gcd_pl_udf(rownum,rownum+2),gcd_pl_udf(rownum,rownum+3) from xmltable('1 to 10000000');

Elapsed: 00:01:10.31

SQL&gt; select distinct gcd_pl_udf(rownum,rownum+1),gcd_pl_udf(rownum,rownum+2),gcd_pl_udf(rownum,rownum+3) from xmltable('1 to 10000000');

Elapsed: 00:00:45.54
</pre></p>
<h3>Inline PL/SQL</h3>
<p>Finally, similar to an UDF function, we can declare the function in the query, inlined in a WITH clause:</p>
<p><pre>
SQL&gt; with function gcd_pl_in(a number, b number) return number as
  2   function gcd(a number, b number) return number is
  3   begin
  4     if b = 0 then
  5        return a;
  6     else
  7        return gcd(b,mod(a,b));
  8     end if;
  9   end;
 10   begin
 11     return gcd(a,b);
 12   end;
 13  select distinct gcd_pl_in(rownum,rownum+1),gcd_pl_in(rownum,rownum+2),gcd_pl_in(rownum,rownum+3) from xmltable('1 to 10000000')
 14  /
</pre></p>
<p>And here is the result:
<pre>
Elapsed: 00:00:48.92
</pre></p>
<h3>Elapsed time summary</h3>
<p>Here is a recap of the elapsed time:
<a href="../wp-insides/uploads/sites/2/2017/10/CaptureMLE.png" rel="lightbox[18879]"><img src="../wp-insides/uploads/sites/2/2017/10/CaptureMLE.png" alt="CaptureMLE" width="348" height="208" class="alignright size-full wp-image-18999" /></a></p>
<p>Elapsed: 00:00:17.64 for MLE Javascript
Elapsed: 00:00:45.54 for PL/SQL UDF function (native)
Elapsed: 00:00:48.92 for Inline PL/SQL
Elapsed: 00:00:51.85 for PL/SQL UDF function (interpreted)
Elapsed: 00:01:10.31 for PL/SQL function (native)
Elapsed: 00:01:21.05 for PL/SQL function (interpreted)</p>
<p>The top winner is Javascript!</p>
<h3>Perfstat Flame Graph</h3>
<p>My tests were deliberately doing something we should avoid for performance and scalability: call a function for each row, because this involves a lot of time spent in switching the context between the SQL and the procedural engine. But this is however good for code maintainability. This overhead is not easy to measure from the database. We can look at the call stack to see what happens when the process is evaluating the operand (evaopn2) and switches to PL/SQL (evapls), and what happens besides running the PL/SQL itself (pfrrun). I have recorded perf-stat for the cases above to display the Flame Graph on the call stack. When looking for more information I remembered that Frits Hoogland already did that so I let you read Frits <a href="https://fritshoogland.wordpress.com/2016/01/23/plsql-context-switch/" target="_blank">part1</a> and <a href="https://fritshoogland.wordpress.com/2016/01/25/plsql-context-switch-part-2/" target="_blank">part2</a></p>
<p>You can <a href="https://www.dropbox.com/s/vfgd52eypxd1sbd/perf-stat-FlameGraph.zip?dl=0" target="_blank">download</a> my Flame Graphs and here is a summary of .svg name and call stack from operand evaluation to PL/SQL run:
<pre>
PL/SQL UDF function (native)        perf-gcd_pl_UDF_native.svg       evaopn2&gt;evapls&gt;peidxrex&gt;penrun
Inline PL/SQL                       perf-gcd_pl_inline.svg           evaopn2&gt;evapls&gt;kkxmss_speedy_stub&gt;peidxrex&gt;pfrrun&gt;pfrrun_no_tool
PL/SQL UDF function (interpreted)   perf-gcd_pl_UDF_interpreted.svg  evaopn2&gt;evapls&gt;peidxexe&gt;pfrrun&gt;pfrrun_no_tool
PL/SQL function (native)            perf-gcd_pl_native.svg           evaopn2&gt;evapls&gt;kgmexec&gt;kkxmpexe&gt;kkxdexe&gt;peidxexe&gt;peidxr_run&gt;plsql_run&gt;penrun
PL/SQL function (interpreted)       perf-gcd_pl_interpreted.svg      evaopn2&gt;evapls&gt;kgmexec&gt;kkxmpexe&gt;kkxdexe&gt;peidxexe&gt;peidxr_run&gt;plsql_run&gt;pfrrun&gt;pfrrun_no_tool
</pre></p>
<p>But more interesting is the Flame Graph for the JavaScript execution:
<a href="../wp-insides/uploads/sites/2/2017/10/CaptureMLEFlame.png" rel="lightbox[18879]"><img src="../wp-insides/uploads/sites/2/2017/10/CaptureMLEFlame.png" alt="CaptureMLEFlame" width="1204" height="558" class="aligncenter size-full wp-image-19018" /></a></p>
<p>My interpretation on this is limited but I don&#8217;t see a stack of context switching function before calling the MLE engine, which is probably the reason why it is fast. Besides the &#8216;unknown&#8217; which is probably the run of the JavaScript itself (the libwalnut.so library has no symbols) we can see that most of the time is in converting SQL data types into JavaScript types at call, and the opposite on return:</p>
<ul>
<li>com.oracle.walnut.core.types.OraNumberUtil.doubleToNumber</li>
<li>com.oracle.walnut.core.types.OraNumberUtil.numberToDouble</li>
</ul>
<p>This is the price to pay when running a different language, with different data types.</p>
<h3>So what?</h3>
<p>This MultiLingual Engine looks promising, both for functionalities (choose the language to run in the database) and performance (same address space than the SQL, and context switching is minimal). Of course, this is only in beta. There may be more things to implement, with more overhead. For example, we can imagine that if it goes to production there will be some instrumentation to measure time and record it in the Time Model. It may also be optimized further. You can test it (download from the MLE <a href="http://www.oracle.com/technetwork/database/multilingual-engine/overview/index.html" target="_blank">home</a> and  give feedback about it (on the MLE <a href="https://community.oracle.com/community/database/developer-tools/multilingual-engine/" target="_blank">forum</a>).</p>
<p>This post was about to measuring performance when switching from SQL to PL/SQL. In next post, I&#8217;ll look at callbacks when running SQL from MLE.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-188800" data-img="https://blog.dbi-services.com/wp-insides/uploads/sites/2/2017/10/CaptureMLE.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
