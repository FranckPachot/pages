This was first published on <a href=https://blog.dbi-services.com/oracle-et-dbvisit-replicate-pour-migrer-sans-arret-de-service-et-sans-stress>https://blog.dbi-services.com/oracle-et-dbvisit-replicate-pour-migrer-sans-arret-de-service-et-sans-stress</a> (2014-02-13)
								<h1 class="entry-title">Oracle et Dbvisit Replicate pour migrer sans arrêt de service&#8230; et sans stress</h1>
		<div class="content-inner">
			
						
						
		   
			<p><img class="blog-image aligncenter" src="../images/easyblog_images/64/2e1ax_default_entry_dbvisit_replicate_20140213-164401_1.jpg" alt="" /></p>
<p>Je viens d&#8217;assister au Webinar Zero Downtime Migration pour Oracle, présenté par Chris Lawless qui est récemment passé de Product Manager Golden Gate à Product Manager Dbvisit.  Je vais détailler ici un point très important évoqué par Chris Lawless. La migration par réplication n&#8217;est pas seulement envisagée pour éviter un arrêt de service. Arrêt nécéssaire lors de la migration proprement dite (qui peut aller de quelques minutes à plusieurs heures en fonction de la taille et de la complexité de la solution) mais aussi pour les test avant la décision de Go-NoGo de réouverture du service sur la cible.</p>
<h3>Migrer par réplication</h3>
<p>Une migration par réplication, c&#8217;est d&#8217;abord pour éviter du stress, des coûts et du risque.</p>
<p>Un upgrade classique (dbua par exemple) a l&#8217;avantage de garantir l&#8217;intégrité des données sans avoir à impliquer les équipes applicatives: pas besoin d&#8217;avoir la liste des schemas, des synonymes ou db links, ni de vérifier s&#8217;il y a des opérations particulières (nologging) ou des types de données particuliers (XMLTYPE). Pas besoin de se poser des questions sur les triggers, les delete on cascade, etc.</p>
<p>Bien sûr les equipes applicatives seront impliquées pour les tests. Mais lors de la migration le DBA peut s&#8217;en occuper sans savoir ce qu&#8217;il y a dans sa base. C&#8217;est la raison pour laquelle c&#8217;est la méthode la plus utilisée. Il n&#8217;y a que lorsque la durée de l&#8217;arrêt de service peut poser un problème qu&#8217;on doit envisager une autre solution. Car un upgrade classique peut prendre une heure (suivant la taille du dictionnaire).</p>
<p>Une migration (lorsque il n&#8217;y a pas que la version d&#8217;Oracle qui change, mais le stockage, le serveur, la plateforme) peut être plus longue. Des solutions existent pour diminuer cette durée (Transportable Tablespaces, par exemple) mais bien sûr, l&#8217;opération sera plus complexe. Et plus complexe veut dire plus de temps, plus de risque, plus de stress.</p>
<p>Alors vient l&#8217;idée de migrer par réplication, sans arrêt de service, sans risque, sans stress.</p>
<p>Là, le DBA ne peut pas le faire à l&#8217;aveugle. C&#8217;est un projet à mettre en place avec les equipes applicatives pour déterminer quoi et quand répliquer. C&#8217;est d&#8217;ailleurs à mon avis un avantage: la migration est aussi une bonne occasion de faire un peu de ménage. Et pourquoi pas en profiter pour passer en UTF-8 aussi ?</p>
<p>Et il est de toute façon assez facile de tester si notre application supporte la réplication logique. Car bien sûr, le but n&#8217;est pas de passer 2 mois à résoudre des problèmes de réplication sur des triggers, contraintes on cascade, vues matérialisées, types de colonnes non supportés, etc.</p>
<p>Alors, pourquoi moins de risque et moins de stress ? Parce qu&#8217;on peut mettre en place la réplication sans déranger la production, et la laisser tourner plusieurs jours voir semaines. On ne va décider de basculer l&#8217;application sur la cible que lorsque tout est prêt et validé.</p>
<p>La migration se passe en 3 phases:</p>
<ul>
<li><strong>Mise en place de la réplication. </strong>
Ne nécessite pas d&#8217;arrêt de service, seulement un bref verrou TM Share sur les tables pour s&#8217;assurer qu&#8217;il n&#8217;y a pas de données non committées au point de départ de la copie des données. On aura bien sûr préparé toute la configuration avant sur un environnement de test.
Une fois le verrou posé et relâché, les données sont copiées puis la réplication s&#8217;applique.</li>
</ul>
<ul>
<li><strong>Validation de la cible.</strong>
Tout le temps nécessaire pour tester l&#8217;application sur l&#8217;environnement cible, avec des vraies données de production. On peut comparer les deux environnements pour vérifier la non regression. On peut valider les performances puisque la charge réelle de production arrive sur la cible. On peut même déjà y connecter les applications de production qui travaillent en read-only: reporting, exports,&#8230;
Quand à la source, l&#8217;impact sur la production est très faible puisqu&#8217;il s&#8217;agit seulement de lire le redo généré, et ça peut être fait sur un autre serveur.
Il n&#8217;y a pas de deadline pour ces tests autre que la date souhaitée de migration. C&#8217;est la grosse différence avec une migration classique où la durée des tests &#8211; avant de réouvrir le service &#8211; doit être à la fois rapide et fiable.</li>
</ul>
<ul>
<li><strong>Basculement de la prod.</strong>
Les applications vont maintenant se connecter à la cible. On va le faire en même temps pour que tout le monde voit toutes les mises à jour. Mais de toute façon la réplication est toujours là: aucune donnée ne serait perdue si on en oubliait une.
Ceci se fait sans stress vu que tout l&#8217;environnement a été validé avant, pendant plusieurs jours, sur de la production normale. C&#8217;est un arrêt de quelques secondes, le temps que l&#8217;application se reconnecte. Et là pas de surprise: l&#8217;environnement cible a été validé et optimisé bien avant.</li>
</ul>
<h3>Licence temporaire et support 12c</h3>
<p>Chris Lawless a aussi répondu à deux questions sur les licences et sur le support de la 12c</p>
<p>Au niveau du coût, un produit comme Dbvisit Replicate, qui a déjà un prix de licence tout à fait correct, peut aussi se louer pour une durée limitée si on le souhaite: par exemple pour les 3 mois du projet de migration. Et la version trial de 30 jours peut même permettre de faire un Proof Of Concept sans frais afin de valider la compatibilité de l&#8217;application avec la réplication logique.</p>
<p>Alors pourquoi ne pas passer 1 jour à tester la réplication de notre application ? Dbvisit Replicate peut s&#8217;installer en une heure et se configurer rapidement pour répliquer un schema en temps réel. Ce qui permettra d&#8217;évaluer la charge de configuration en fonction du nombre d&#8217;exceptions à gérer.</p>
<p>Oracle 12c étant une cible supportée, c&#8217;est une solution envisageable en venant de n&#8217;importe quelle version supérieure à 9.2. Une cible Pluggable Database n&#8217;est pas encore supportée, mais de toute façon, Dbvisit s&#8217;adresse surtout à des coûts réduits, en Standard Edition.</p>
<h3>Quand migrer en 12c ?</h3>
<p>Alors, pour apaiser la peur de passer en 12c (peur historique des premières releases d&#8217;une nouvelle version), pourquoi ne pas répliquer sa prod 10g ou 11g pendant un mois (version trial) et tester tranquillement son appli sur la cible 12c avec des données de prod ?</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-4100" data-img="http://blog.dbi-services.com/images/easyblog_images/64/2e1ax_default_entry_dbvisit_replicate_20140213-164401_1.jpg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
