This was first published on <a href=https://blog.dbi-services.com/oracle-iot-when-to-use-index-organized-tables>https://blog.dbi-services.com/oracle-iot-when-to-use-index-organized-tables</a> (2014-10-16)
								<h1 class="entry-title">Oracle IOT: when to use Index Organized Tables</h1>
		<div class="content-inner">
			
						
						
		   
			<p>When can we use IOT? That&#8217;s a question I had when giving recently the <a href="http://www.dbi-services.com/trainings/type/oracle-en/">Oracle DBA essentials workshop</a>. the DBA Essential is very dense and there is only half a day about performance. We have the <a href="http://www.dbi-services.com/trainings/type/oracle-en/">Oracle Performance Tuning workshop</a> to go into those details. But IOTs are under used in my opinion, so I&#8217;ll post a use case for them where they are a good idea.</p>
<p>Basically:</p>
<ul>
<li>Index access is very fast to get all indexed columns, but can be longer when having to get the non-indexed columns</li>
<li>IOT are fast to retreive all columns (except overflow) by primary key</li>
<li>IOT are long when retreiving by secondary index when we get columns that are not in the index and that are not the primary key</li>
</ul>
<div>Here is a good use case: you have a many-to-many relationship that you implement with an association table</div>
<div></div>
<div>This is your UML diagram:</div>
<div><a title="CaptureIOT1.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureIOT1.PNG" rel="lightbox[511]"><img title="CaptureIOT1.PNG" src="../images/easyblog_images/139/CaptureIOT1.PNG" alt="CaptureIOT1.PNG" /></a></div>
<div>
<div>(grantOption is a property of the association. It&#8217;s a boolean that tells if the user can grant the granted privilege to another user)</div>
<div></div>
<div>And this is how you implement it in a relational database:</div>
<p><a title="CaptureIOT2.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureIOT2.PNG" rel="lightbox[511]"><img title="CaptureIOT2.PNG" src="../images/easyblog_images/139/CaptureIOT2.PNG" alt="CaptureIOT2.PNG" /></a></p>
</div>
<div>
<div>So you have an association table that has a primary key which is composed of the two foreign keys, and an additional column for the association property.</div>
</div>
<div></div>
<div>And you have an index on USER_PRIVS(USER_ID,PRIV_ID) to enable the primary key. And you need to have all the foreign key indexed so you have to add an index on USER_PRIVS(PRIV_ID).</div>
<div></div>
<div>Now, for performance reasons you will probably want to add all the columns to both indexes, so you have finally those two indexes:</div>
<div>
<ul>
<li>USER_PRIVS(USER_ID,PRIV_ID,GRANT_OPTION)</li>
<li>USER_PRIVS(PRIV_ID,USER_ID,GRANT_OPTION)</li>
</ul>
</div>
<div>If you have a doubt about that modeling (such as why I don&#8217;t introduce a surrogate key here) please tell me, we can discuss that. But I can guarantee that this is the right approach at least in Oracle.</div>
<div></div>
<div>So when you navigate from any of the tables, you have to access only to the index. No need for the table. So why store a table ? This is where IOT comes. Let&#8217;s create that as an IOT:</div>
<div></div>
<div>
<pre class="brush: sql; gutter: true; first-line: 1">CREATE TABLE USER_PRIVS ( USER_ID,PRIV_ID,GRANT_OPTION , <strong>PRIMARY KEY(USER_ID,PRIV_ID)</strong> ) <strong>ORGANISATION INDEX</strong>;</pre>
</div>
<div></div>
<div>and a secondary index:</div>
<div></div>
<div>
<pre class="brush: sql; gutter: true; first-line: 1">CREATE INDEX PRIV_USERS (PRIV_ID,USER_ID,GRANT_OPTION)</pre>
</div>
<div></div>
<p>So, if you navigate from USERS you access directly to the index leaf that has all information.</p>
<p>And if you navigate from PRIVILEGES, you have also all information. Someone said that access via secondary index is long? Yes but that&#8217;s only when we have to get to the other columns because the secondary index don&#8217;t have a rowid. It stores the primary key instead and must go through the primary index to get the other columns. But there are two point in my example:</p>
<ul>
<li>I already have all the primary key columns in my secondary index, and Oracle is clever enough to not store them in double</li>
<li>I don&#8217;t have to get to the primary index because I have evrey columns in my secondary index</li>
</ul>
<div>Those are the indexes I would have anyway, so here I avoid to store a table: less storage, cheaper inserts and deletes.</div>
<div></div>
<div>In general, the use cases for IOT are:</div>
<div>
<ul>
<li>we access mainly through the primary key and accept more expensive queries when accessing otherwise. Note that the secondary index can be optimized is we ALTER INDEX &#8230; UPDATE BLOCK REFERENCES regularly</li>
<li>the secondary indexes have all the columns needed for our query</li>
</ul>
<div>The association table is in the second category and is a good occasion to implement IOT. Note that the IOT and index defined above are used by Oracle to avoid forign key table locks as both starts with one of the foreign key columns.</div>
</div>
<div></div>
<div>I will illustrate the costs of access to IOT in a future blog post.</div>
<div>If you want to learn more about indexes, I&#8217;ll never stop to advise you to read <a href="http://use-the-index-luke.com/sql/clustering/index-organized-clustered-index">http://use-the-index-luke.com/</a></div>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-5120" data-img="http://blog.dbi-services.com/images/easyblog_images/139/CaptureIOT1.PNG"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
