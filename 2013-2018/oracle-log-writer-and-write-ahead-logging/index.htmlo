This was first published on <a href=https://blog.dbi-services.com/oracle-log-writer-and-write-ahead-logging>https://blog.dbi-services.com/oracle-log-writer-and-write-ahead-logging</a> (2015-06-28)
								<h1 class="entry-title">Oracle Log Writer and Write-Ahead-Logging</h1>
		<div class="content-inner">
			
						
						
		   
			<p dir="ltr" lang="en">I posted a tweet with a link to a very old document &#8211; 20 years old &#8211; about &#8216;internals of recovery&#8217;. It&#8217;s a gem. All the complexity of the ACID mecanisms of Oracle are explained in a very simple way. It was written for Oracle 7.2 but it&#8217;s incredible to see how much the basic things are still relevant today. Of course, there is  a reason for that: the mecanisms of recovery are critical and must be stable. There is one more reason in my opinion: the Oracle RDBMS software was very well designed, then the basic structures designed 20 years ago are still able to cope with new features, and to scale with very large databases, through the versions and the years.</p>
<blockquote class="twitter-tweet" lang="en">
<p dir="ltr" lang="en">It&#8217;s 20 years old but it&#8217;s still the best written document I&#8217;ve read about how Oracle works <a href="http://t.co/4CAI4Q5MIm">http://t.co/4CAI4Q5MIm</a> <a href="http://t.co/mmgA50JzMQ">http://t.co/mmgA50JzMQ</a></p>
<p>— Franck Pachot (@FranckPachot) <a href="https://twitter.com/FranckPachot/status/614519811046002688">June 26, 2015</a></p></blockquote>
<p dir="ltr" lang="en">If you check the conversation that followed, a doubt has been raised about the following sentence:</p>
<p style="padding-left: 30px"><em>According to write-ahead log protocol, before DBWR can write out a cache buffer containing a modified datablock, LGWR must write out the redo log buffer containing redo records describing changes to that datablock.</em></p>
<p dir="ltr" lang="en">There are 2 ways to clear out that kind of doubt: read and test. And we need both of them because:</p>
<ul>
<li>documentation may have bug</li>
<li>software may have bug</li>
</ul>
<p dir="ltr" lang="en">so you can be sure about a behaviour only when both documentation and test validates your assumption.</p>
<h3>Documentation</h3>
<p dir="ltr" lang="en">The first documentation I find about it is another gem describing how Oracle works: Jonathan Lewis &#8216;<a href="http://www.apress.com/9781430239543">Oracle Core</a> (Apress)&#8217;. And it&#8217;s clearly stated that:</p>
<p style="padding-left: 30px"><em>One of the most important features of the Oracle code is that the database writer will not write a changed block to disk before the log writer has written the redo that describes how the block was changed. This write-ahead logging strategy is critical to the whole recovery mechanism.</em></p>
<p dir="ltr" lang="en">Then there is of course the <a href="https://docs.oracle.com/database/121/CNCPT/process.htm#sthref1935">Oracle Documentation</a>:</p>
<p style="padding-left: 30px"><em>Before DBW can write a dirty buffer, the database must write to disk the redo records associated with changes to the buffer (the write-ahead protocol). If DBW discovers that some redo records have not been written, it signals LGWR to write the records to disk, and waits for LGWR to complete before writing the data buffers to disk.</em></p>
<h3>Test case</h3>
<p>Ok, that should be enough. But I want to do a simple testcase in order to see if anything has changed in the latest version (12.1.0.2). My idea is to check two things:</p>
<ul>
<li>whether a checkpoint is requesting so work to be done by logwriter</li>
<li>whether a change is written to redo log after a checkpoint, without waiting the usual</li>
</ul>
<p>I create a table:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; create table DEMO as select '--VAL--1--'||to_char(current_timestamp,'hh24missffff') val from dual;</pre>
<p>Table created.</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; select * from DEMO;
VAL
 ----------------------------------
 --VAL--1--190721367902367902</pre>
<p>I start with a new logfile:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; alter system switch logfile;
System altered.</pre>
<p dir="ltr" lang="en">And I retrieve the log writer process id for future use:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; column spid new_value pid
19:07:21 SQL&gt; select spid,pname from v$process where pname='LGWR';
SPID PNAME
 ------------------------ -----
 12402 LGWR
19:07:21 SQL&gt; host ps -fp &amp;pid
 UID PID PPID C STIME TTY TIME CMD
 oracle 12402 1 0 Jun25 ? 00:00:46 ora_lgwr_DEMO14</pre>
<h3>update and commit</h3>
<p>Here is a scenario where I update and commit:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; update DEMO set val='--VAL--2--'||to_char(current_timestamp,'hh24missffff');
1 row updated.
19:07:21 SQL&gt; select * from DEMO;
VAL
 ----------------------------------
 --VAL--2--190721443102443102
19:07:21 SQL&gt; commit;
Commit complete.</pre>
<p>I want to see if a checkpoint has something to wait from the log writer, so I freeze the log writer:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; host <b>kill -sigstop</b> &amp;pid</pre>
<p>and I checkpoint:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; alter system checkpoint;
System altered.</pre>
<p>No problem. The checkpoint did not require anything from log writer in that case. Note that the dirty buffers related redo has already been written to disk at commit (and log writer was running at that time).</p>
<p>I un-freeze it for the next test:</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:21 SQL&gt; host <b>kill -sigcont</b> &amp;pid
</pre>
<h3>update without commit</h3>
<p>Now I&#8217;m doing the same but without commit. My goal is to see if uncommited dirty blocks need their redo to be written to disk.</p>
<pre class="brush: sql; gutter: true; first-line: 1">19:07:51 SQL&gt; select * from DEMO;
VAL
 ----------------------------------
 --VAL--2--190721443102443102
19:07:51 SQL&gt; host kill -sigstop &amp;pid
19:07:51 SQL&gt; update DEMO set val='--VAL--3--'||to_char(current_timestamp,'hh24missffff');
1 row updated.
19:07:51 SQL&gt; alter system checkpoint;</pre>
<p>Here it hangs. Look at the wait events:</p>
<p><a class="easyblog-thumb-preview" title="CaptureLGWR.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureLGWR.JPG" rel="lightbox[2437]"><img title="b2ap3_thumbnail_CaptureLGWR.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_CaptureLGWR.JPG" alt="b2ap3_thumbnail_CaptureLGWR.JPG" /></a></p>
<p>My checkpoint is waiting on &#8216;rdbms ipc reply&#8217; until the log writer is woken up.</p>
<pre class="brush: sql; gutter: true; first-line: 1">$ kill -sigcont 12402
System altered.
19:09:37 SQL&gt; select * from DEMO;
VAL
 ----------------------------------
 --VAL--3--190751477395477395</pre>
<p>The checkpoint is done.</p>
<p>Note that if I run the same but wait 3 seconds after the update (because I know that log writer writes redo at least every 3 seconds even not asked to do it):</p>
<pre class="brush: sql; gutter: true; first-line: 1">21:33:35 SQL&gt; update DEMO set val='--VAL--3--'||to_char(current_timestamp,'hh24missffff');
1 row updated.
21:33:35 SQL&gt; host sleep 3
21:33:38 SQL&gt; host kill -sigstop &amp;pid
21:33:38 SQL&gt; alter system checkpoint;
System altered.
21:33:38 SQL&gt;</pre>
<p>checkpoint is not waiting because all the redo that covers the dirty buffers are alerady written.</p>
<p>I&#8217;ve also checked that immediately after the checkpoint (without stopping the log writer here) the uncommited change is written to the redo log files:</p>
<pre class="brush: sql; gutter: true; first-line: 1">21:56:38 SQL&gt; select group#,v$log.status,member from v$log join v$logfile using(group#) where v$log.status='CURRENT';
GROUP# STATUS MEMBER
 ---------- ---------------- ----------------------------------------
 2 CURRENT /u01/DEMO/oradata/DEMO14/redo02.log
21:56:38 SQL&gt; update DEMO set val='--VAL--2--'||to_char(current_timestamp,'hh24missffff');
1 row updated.
21:56:38 SQL&gt; select * from DEMO;
VAL
 ----------------------------------
 --VAL--2--215638557183557183
21:56:38 SQL&gt; alter system checkpoint;
System altered.
21:56:38 SQL&gt; host strings &amp;redo | grep "VAL--"
 --VAL--1--215638376899376899
 --VAL--2--2156385571</pre>
<p>A simple grep reveals that redo has been written (I&#8217;ve no other activity in the database &#8211; so no concurrent commits here).</p>
<h3>Conclusion</h3>
<p>Even if some mecanisms have been improved (see Jonathan lewis book for them) for performance, the fundamentals have not changed.</p>
<p>I&#8217;ve said that there are two ways to validated an assumption: documention and test.
But there is a third one: understanding.</p>
<p>When you think about it, if you write uncommited changes to the files, then you must be able to rollback them in case of recovery. Where is the rollback information? In the undo blocks. Are the undo blocks written on disk when the database is written on disk? You don&#8217;t know. Then where do you find the undo information in case of recovery? The redo genereated by the transaction contains change vectors for data blocks and for undo blocks. Then if you are sure that all redo is written before the block containing uncomitted changes, then you are sure to be able to rollback those uncommited changes.</p>
<p>Note that this occurs only for modifications through buffer cache. Direct-path insert do not need to be covered by redo to be undone. It&#8217;s the change of high water mark that will be undone and this one is done in buffer cache, protected by redo.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-24380" data-img="http://blog.dbi-services.com/images/easyblog_images/139/b2ap3_thumbnail_CaptureLGWR.JPG"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> One Comment</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1528">
				<div id="div-comment-1528" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/08c0e05441073e237b70b74a36d8261b?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Olivier BERNHARD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1528">
			June 30, 2015 at 10 h 35 min</a>		</div>

		<p>Franck, thank you so much for sharing these precious documents.
Thanks also for the follow up !
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-15291"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1528' onclick='return addComment.moveForm( "div-comment-1528", "1528", "respond", "2437" )' aria-label='Reply to Olivier to Olivier BERNHARD'>Reply to Olivier</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
