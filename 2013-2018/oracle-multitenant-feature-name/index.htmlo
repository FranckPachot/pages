This was first published on <a href=https://blog.dbi-services.com/oracle-multitenant-feature-name>https://blog.dbi-services.com/oracle-multitenant-feature-name</a> (2016-07-10)
								<h1 class="entry-title">Oracle Multitenant feature name</h1>
		<div class="content-inner">
			
						
						
		   
			<p>We all know what is the multitenant option: a container database (CDB) with multiple user pluggable databases (PDB). This requires Enterprise Edition plus option. But you can use the same architecture without the option and even in Standard Edition: a CDB with only one user PDB. It is called &#8220;single-tenant&#8221; or &#8220;lone PDB&#8221;. How do you call this new 12<em>c</em> architecture?
<span id="more-9656"></span>
I call &#8220;multitenant architecture&#8221; the following set of features, available in all editions:</p>
<ul>
<li>dictionary separation between system metadata/objects and user metadata/object</li>
<li>unplug / plug features to transport PDBs</li>
<li>create a new PDB as a clone of another existing PDB</li>
<li>ability for a session to switch between PDB and CDB$ROOT explicitly with &#8216;ALTER SESSION&#8217; or implicitly through metadata and object links</li>
<li>ability to read data for several containers in one query</li>
</ul>
<p>But it may look strange to use the &#8220;multitenant&#8221; term when in Standard Edition or Enterprise edition without option.</p>
<h3>Container database (CDB)</h3>
<p>One idea would be to simply call it &#8216;CDB architecture&#8217;, because it&#8217;s the architecture of the container database, and because a database without this architecture is called &#8220;non-CDB&#8221;:</p>
<blockquote class="twitter-tweet" data-width="550"><p lang="en" dir="ltr"><a href="https://twitter.com/FranckPachot">@franckpachot</a> Oracle docs says „CDB architecture“ and „Multitenant Architecture“ &#8211; I prefer CDB, because there’s Non-CDB, too <img src="../wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
<p>&mdash; Markus Flechtner (@markusdba) <a href="https://twitter.com/markusdba/status/751523058595295232">July 8, 2016</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<h3>consolidated database (CDB)</h3>
<p>However, as very often with Oracle, the names change and the acronyms remain. Old names are found in the software, before new name is made public to market it. We all know that CDB stands for &#8220;container database&#8221; because a CDB is a container that contains at least 3 containers (CDB$ROOT, PDB$SEED and your PDB) and more when you have the multitenant option. However I see no mention of that name in ORACLE_HOME/rdbms/admin scripts:
<pre>[oracle@CDB ~]$ grep -i "container database" $ORACLE_HOME/rdbms/admin/* | wc
      0       0       0</pre></p>
<p>It seems that the original meaning of CDB was &#8220;consolidated database&#8221;:
<pre>
[oracle@CDB ~]$ grep -i "consolidated database" $ORACLE_HOME/rdbms/admin/* | wc
     58     465    7276

[oracle@CDB ~]$ grep -i "consolidated database" $ORACLE_HOME/rdbms/admin/*.bsq
/u01/app/oracle/product/12.1.0/dbhome_1/rdbms/admin/dcore.bsq:REM Consolidated Database.
/u01/app/oracle/product/12.1.0/dbhome_1/rdbms/admin/dcore.bsq:REM SEED Pluggable Database in a Consolidated Database.
/u01/app/oracle/product/12.1.0/dbhome_1/rdbms/admin/doptim.bsq:Rem the caching in library cache in a Consolidated Database.
/u01/app/oracle/product/12.1.0/dbhome_1/rdbms/admin/dsec.bsq:                                    *         Consolidated Database
/u01/app/oracle/product/12.1.0/dbhome_1/rdbms/admin/dsec.bsq:                                    *         Consolidated Database
</pre></p>
<p>So, the idea behind CDB is the same as behind multitenant: it&#8217;s consolidation of several pluggable databases. And then, consolidation is not really what is done by single-tenant where we have only one user PDB per CDB and where this architecture requires 3 containers instead of one non-CDB.</p>
<h3>Pluggable databases</h3>
<p>Another idea would be to call it &#8220;pluggable databases architecture&#8221; because this is the real evolution. User tablespaces are transportable for a long time, since 8<em>i</em> introduction of extended rowid and locally managed tablespaces. 12<em>c</em> brought the same for system tablespaces so that PDBs are fully transportable physically, thanks to separation of dictionary.</p>
<p>The real point of this new architecture is the total separation of system data/metadata and user data/metadata, the separation of system DBA role and application DBA role, and this is pluggable databases. Multitenancy is just one thing that is possible with this new architecture. It&#8217;s important today because it&#8217;s required for the cloud (for consolidation and easy provisioning).</p>
<h3>Oracle Multitenant</h3>
<p>Actually, the feature was called &#8216;Oracle Pluggable Database&#8217; until 12.1.0.1 was released publicly with a new name: Oracle Multitenant. And this is the name we can see in Database Feature Usage Statistics. Well, if you look at the first patchset of 12<em>c</em>R1, 12.1.0.2, you will see the old name &#8216;Oracle Pluggable Databases&#8217; but this is a bug (<a href="https://updates.oracle.com/download/20718081.html" target="_blank">Patch 20718081</a> changes back the name).</p>
<p>Here is what you see from Database Feature Usage Statistics after an upgrade from 12.1.0.1 to 12.1.0.2, in EM Express:</p>
<p><a href="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/07/CaptureFUMultitenant.png" rel="lightbox[9656]"><img src="../wp-insides/uploads/sites/2/2016/07/CaptureFUMultitenant.png" alt="CaptureFUMultitenant" width="1108" height="294" class="alignnone size-full wp-image-9658" /></a></p>
<p>And from DBA_FEATURE_USAGE_STATISTICS view:</p>
<p><pre>
SQL&gt; select name, version, detected_usages, currently_used, aux_count from dba_feature_usage_statistics where name like '%Multitenant%' or name like '%Pluggable%';

NAME                           VERSION           DETECTED_USAGES CURRE  AUX_COUNT
------------------------------ ----------------- --------------- ----- ----------
Oracle Multitenant             12.1.0.1.0                     98 FALSE          1
Oracle Pluggable Databases     12.1.0.2.0                     32 FALSE          1
</pre></p>
<p>So, bug aside, the name of the feature is &#8216;Oracle Multitenant&#8217; and this is true for any container database, because the feature is considered as used as soon as V$DATABASE.CDB=&#8217;YES':
<pre>select count(*) into feature_boolean from v$database where cdb = 'YES'</pre></p>
<p>The usage of the multitenant option is detected by the AUX_COUNT which is the number of user PDBs:
<pre>select count(*) into aux_count from v$pdbs where con_id &gt; 2</pre>
CON_ID=0 is for the CDB, CON_ID=1 is for CDB$ROOT, CON_ID=2 is for PDB$SEED and user PDBs start at CON_ID &gt; 2</p>
<p>So the name is &#8220;multitenant&#8221; whatever the number of PDBs.</p>
<h3>So what?</h3>
<p>I prefer to stick with &#8220;multitenant architecture&#8221; even when used without the multitenant option. It&#8217;s a good way to keep in mind that, even if it brings lot of interesting features for single-tenant as well, Oracle has taken the step of dictionary separation with the motivation of Cloud, Consolidation and Multitenancy. Charged options are a good trigger to increase priority of evolution requests&#8230;
However, this &#8220;multitenant architecture&#8221; brings very interesting features to Standard Edition and Enterprise Edition even without option. And it you doubt, I&#8217;ll try to convince you in <a href="https://oracle.rainfocus.com/scripts/catalog/oow16.jsp?search=pachot&amp;search.event=oracleopenworld" target="_blank">San Francisco, September 18th</a>.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-96570" data-img="http://blog.dbi-services.com/wp-insides/uploads/sites/2/2016/07/CaptureFUMultitenant.png"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
