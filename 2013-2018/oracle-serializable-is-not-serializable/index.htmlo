This was first published on <a href=https://blog.dbi-services.com/oracle-serializable-is-not-serializable>https://blog.dbi-services.com/oracle-serializable-is-not-serializable</a> (2016-07-31)
								<h1 class="entry-title">Oracle serializable is not serializable</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Did you know that when you set isolation level to SERIALIZABLE, it is not serializable but SNAPSHOT? This isolation levels is lower than serializable. I&#8217;ve never thought about it until I read Markus Winand <a href="http://www.slideshare.net/MarkusWinand/sql-transactions-what-they-are-good-for-and-how-they-work" target="_blank">slides about transactions</a>. I recommend every developer or DBA to read those slides. This post is there to illustrate write skew in Oracle.
<span id="more-10070"></span>
Let&#8217;s show an example on SCOTT.EMP table. Let&#8217;s say there&#8217;s a HR directive to increase one of department 10 employees salary so that total salaries for the department is 9000.
Now let&#8217;s imagine that two HR users received the directive at the same time.</p>
<p>User A checks the salaries:
<pre>
23:18:33 SID=365&gt; select ename,sal from EMP where deptno=10;

ENAME             SAL
---------- ----------
CLARK            2450
KING             5000
MILLER           1300
</pre>
The sum is 8750 so User A decides to increase MILLER&#8217;s salary with additional 250.</p>
<p>However, to be sure that he is the only one to do that, he starts a transaction in SERIALIZABLE isolation level, checks the sum again, and do the update:
<pre>
23:18:40 SID=365&gt; set transaction isolation level serializable;
Transaction set.

23:18:41 SID=365&gt; select sum(sal) from EMP where deptno=10;

  SUM(SAL)
----------
      8750

23:18:44 SID=365&gt; update EMP set sal=sal+250 where ename='MILLER';
1 row updated.
</pre></p>
<p>Now at the same time, User B is doing the same but chose to increase CLARK&#8217;s salary:</p>
<p><pre>
23:18:30 SID=12&gt; set transaction isolation level serializable;
Transaction set.

23:18:51 SID=12&gt; select sum(sal) from EMP where deptno=10;

  SUM(SAL)
----------
      8750

23:18:53 SID=12&gt; update EMP set sal=sal+250 where ename='CLARK';
1 row updated.
</pre></p>
<p>Note that there is no &#8220;ORA-08177: can&#8217;t serialize access for this transaction&#8221; there because the updates occurs on different rows.</p>
<p>The User A checks again the sum and then commits his transaction:</p>
<p><pre>
23:18:46 SID=365&gt; select sum(sal) from EMP where deptno=10;

  SUM(SAL)
----------
      9000

23:19:04 SID=365&gt; commit;
Commit complete.
</pre></p>
<p>And so does the User B:</p>
<p><pre>
23:18:55 SID=12&gt; select sum(sal) from EMP where deptno=10;

  SUM(SAL)
----------
      9000

23:19:08 SID=12&gt; commit;
Commit complete.
</pre></p>
<p>However, once you commit, the result is different:</p>
<p><pre>
23:19:09 SID=12&gt; select sum(sal) from EMP where deptno=10;

  SUM(SAL)
----------
      9250
</pre></p>
<p>Actually, what Oracle calls SERIALIZABLE here is only SNAPSHOT isolation level. You see data without the concurrent changes that have been commited after the beginning of your transaction. And you cannot modify a row that has been modified by another session. However, nothing prevents that what you have read is modified by another session. You don&#8217;t see those modification, but they can be commited.</p>
<p>The definition of serializability requires that the result is the same when transactions occurs one after the other. Here, if User A had commited before the start of User B transaction, the latter would have seen that the total were already at 9000. </p>
<p>In this example, if you want to prevent write skew you need to lock the table in Share mode. Locking the rows (with select for update) is sufficient to prevent concurrent updates, but then another user can insert a new employee which brings the total salary higher. In addition to that, row locks are exclusive and you don&#8217;t want readers to block readers. Locking a range (DEPTNO=10) is not possible in Oracle. So the solution is to lock the table.</p>
<p>It seems that only PostgreSQL (version &gt;= 9.1) is able to guarantee true serializability without locking.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-100710"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
