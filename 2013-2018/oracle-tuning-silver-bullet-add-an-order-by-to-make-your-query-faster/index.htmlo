This was first published on <a href=https://blog.dbi-services.com/oracle-tuning-silver-bullet-add-an-order-by-to-make-your-query-faster>https://blog.dbi-services.com/oracle-tuning-silver-bullet-add-an-order-by-to-make-your-query-faster</a> (2015-04-01)
								<h1 class="entry-title">Oracle tuning silver bullet: add an order by to make your query faster</h1>
		<div class="content-inner">
			
						
						
		   
			<p>You have read all Cary Millsap work about Oracle database performance tuning. You know that there are no silver bullets. Reducing the response time requires a methodical approach in order to analyze the response time with the goal of eliminating all unnecessary work.
But I&#8217;ll show something completly opposite here. A performance tuning silver bullet. Do more work in order to run it faster: just add an ORDER BY to your query and its faster.
I&#8217;ve made a very simple test case in order to let you test it by yourself.
I set my sqlplus environement and connect remotely to ma database:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set pagesize 1000 linesize 100 echo on timing on
SQL&gt; connect xxx/xxx@//xxx/xxx
Connected.
</pre>
<p>I create a DEMO table which is very simple: 10000 rows of small column.</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; create table DEMO pctfree 0 as select mod(rownum,2) x from dual connect by 10000&gt;=level;
Table created.
Elapsed: 00:00:00.03
</pre>
<p>And a run a very simple query which does a full scan of that small table and pads the output to make it a significant size:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; set autotrace trace
SQL&gt; select lpad(x,2000,x) from DEMO;
10000 rows selected.

Elapsed: 00:00:21.52
</pre>
<p>It took 22 seconds to execute that. I&#8217;ve run it with &#8216;autotrace trace&#8217; so that I&#8217;ve not the overhead of displaying all rows from sqlplus. Rows are fetched but not displayed. I measure only the time to get the result. Let&#8217;s run it again to be sure there is no cache effect:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select lpad(x,2000,x) from DEMO;
10000 rows selected.

Elapsed: 00:00:25.61
</pre>
<p>It is still taking more than 20 seconds to retreive the 10000 rows.
As I am with autotrace, I get the execution plan and basic statistics:</p>
<pre class="brush: sql; gutter: true; first-line: 1">Execution Plan
----------------------------------------------------------
Plan hash value: 4000794843

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      | 10000 |   126K|     4   (0)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| DEMO | 10000 |   126K|     4   (0)| 00:00:01 |
--------------------------------------------------------------------------

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)


Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
        683  consistent gets
          0  physical reads
          0  redo size
   20163693  bytes sent via SQL*Net to client
       7818  bytes received via SQL*Net from client
        668  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
      10000  rows processed
</pre>
<p>You can&#8217;t do more simple: a full table scan retreiving all the rows.</p>
<h3>order by</h3>
<p>And now, let&#8217;s apply my silver bullet: add an ORDER BY at the end and run it again:</p>
<pre></pre>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; a  order by x
  1* select lpad(x,2000,x) from DEMO order by x
SQL&gt; /
10000 rows selected.

<b>Elapsed: 00:00:07.06</b>
</pre>
<p>Here it is. The response time is now less than 10 seconds. 2x faster. If you don&#8217;t believe it, just test it.
And thanks to autotrace I can check that I&#8217;m doing the same full table scan, but with an additional sort:</p>
<pre class="brush: sql; gutter: true; first-line: 1">Execution Plan
----------------------------------------------------------
Plan hash value: 903288357

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      | 10000 |   126K|     5  (20)| 00:00:01 |
|   1 |  SORT ORDER BY     |      | 10000 |   126K|     5  (20)| 00:00:01 |
|   2 |   TABLE ACCESS FULL| DEMO | 10000 |   126K|     4   (0)| 00:00:01 |
---------------------------------------------------------------------------

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)


Statistics
----------------------------------------------------------
          4  recursive calls
          0  db block gets
         35  consistent gets
          0  physical reads
          0  redo size
     118324  bytes sent via SQL*Net to client
       7818  bytes received via SQL*Net from client
        668  SQL*Net roundtrips to/from client
          1  sorts (memory)
          0  sorts (disk)
      10000  rows processed

</pre>
<p>The plan clearly show that I&#8217;m doing additional work: Oracle has to sort the rows before sending them. And the statistics show that I&#8217;m still returning 10000 rows and have 1 sort done.
Adding an order by made this query faster&#8230;</p>
<p>Ok, at that point you probably realize that this post is clearly the opposite of the tuning method I usually recommend, and you have checked today&#8217;s date. Please don&#8217;t hesitate to comment if you have an idea about the reasons (plural because there are at least two of them) why the second query is much faster. If you attended my <a href="http://www.dbi-services.com/trainings/type/oracle-en/">tuning workshop</a> you should already know the main reason. If you are a long time reader of Jonathan Lewis <a href="https://jonathanlewis.wordpress.com">blog</a> then you should also get the second one.</p>
<h3>Update 2nd April 2015</h3>
<p>All good answers are in the comments. Of course something was wrong in the introduction. We didn&#8217;t introduce additional work with the SORT operation, but this is minimal. And there were unnecessary work before (the roundtrips) that had a bigger overhead. Besides the April Fool joke, the goal of this post was to show that it&#8217;s not only important to make a query faster. You must know why you made it faster, or maybe you just hide a problem that will come back again. And that&#8217;s not too difficult if you use the right tools. Here, a simple autotrace showing only 11 session statistics had all necessary information.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-6100"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 11 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-1409">
				<div id="div-comment-1409" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/d51265811537351f8b712a4572e91930?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Jim Dickson (dev DBA)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1409">
			April 1, 2015 at 7 h 27 min</a>		</div>

		<p>almost had me <img src="../wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
One reason : Fewer bytes transferred because of compression at SQL*Net level? think Tom and Jonathan have blogged about this.
Not sure why fewer logical IOs.</p>
<p>Excellent site.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14101"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1409' onclick='return addComment.moveForm( "div-comment-1409", "1409", "respond", "609" )' aria-label='Reply to Jim to Jim Dickson (dev DBA)'>Reply to Jim</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1410">
				<div id="div-comment-1410" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1410">
			April 1, 2015 at 7 h 30 min</a>		</div>

		<p>Hi Jim,
You identified quickly the point that is probably the less known. And the symptom of the second point (LIO). Congratulations. I&#8217;m sure root cause of second point will come very quickly.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14111"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1410' onclick='return addComment.moveForm( "div-comment-1410", "1410", "respond", "609" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1411">
				<div id="div-comment-1411" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/aad8e5c3b03a723bc53ddb807436f320?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Martin Preiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1411">
			April 1, 2015 at 8 h 16 min</a>		</div>

		<p>for the sake of completeness the Link to Jonathan&#8217;s article: <a href="https://jonathanlewis.wordpress.com/2010/05/07/sqlnet-compression/" rel="nofollow">https://jonathanlewis.wordpress.com/2010/05/07/sqlnet-compression/</a>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14121"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1411' onclick='return addComment.moveForm( "div-comment-1411", "1411", "respond", "609" )' aria-label='Reply to Martin to Martin Preiss'>Reply to Martin</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1412">
				<div id="div-comment-1412" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1412">
			April 1, 2015 at 8 h 24 min</a>		</div>

		<p>Thanks Martin for the link.
This is why I selected lpad(x,2000,x) in order to have some volume. But there is still the fact that the number of LIO is higher without the order by. You can compare:
select rownum from DEMO;
with:
select rownum from DEMO order by 1;
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14131"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1412' onclick='return addComment.moveForm( "div-comment-1412", "1412", "respond", "609" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1413">
				<div id="div-comment-1413" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/aad8e5c3b03a723bc53ddb807436f320?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Martin Preiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1413">
			April 1, 2015 at 10 h 03 min</a>		</div>

		<p>I think your arrysize is 15 (10000 rows, 668 roundtrips; not a surprise in sqlplus). For the query without the order by in each fetch the buffer that has been used in the last fetch has to be reaccessed &#8211; resulting in a CR. For the ordered query the complete table data has been read in a single fetch and passed to the PGA in which the sort operation took place &#8211; then the sorted result was send to the client (and that&#8217;s not a CR).
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14141"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1413' onclick='return addComment.moveForm( "div-comment-1413", "1413", "respond", "609" )' aria-label='Reply to Martin to Martin Preiss'>Reply to Martin</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1414">
				<div id="div-comment-1414" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/d51265811537351f8b712a4572e91930?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Jim Dickson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1414">
			April 1, 2015 at 10 h 07 min</a>		</div>

		<p>Well noone else is biting, so here goes &#8230;
Small sqlplus arraysize + lots of rows per block => each fetch can revisit block from previous fetch.
Not 100% sure why sorting data first minimises effect of small arraysize, though. Might guess at blocking pinning or result set caching but suspect will just embarrass myself on April Fool&#8217;s.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14151"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1414' onclick='return addComment.moveForm( "div-comment-1414", "1414", "respond", "609" )' aria-label='Reply to Jim to Jim Dickson'>Reply to Jim</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1415">
				<div id="div-comment-1415" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1415">
			April 1, 2015 at 10 h 14 min</a>		</div>

		<p>Hi Martin and Jim, your&#8217;re right. Default fetch size is too small on most clients and because buffer cannot be pinned across user calls it has to revisit with the cost of logical read. I&#8217;ve created the table with very short rows to amplify the effect: lot of sets of 15 rows can fit in one block.
Sorting buffers that in PGA &#8211; which is not shared and doesn&#8217;t need all that logical read overhead we have on a shared structure.
As far as I know there is no way to do the same buffering without a SORT, which could help when we cannot change the application fetch size.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14161"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1415' onclick='return addComment.moveForm( "div-comment-1415", "1415", "respond", "609" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1417">
				<div id="div-comment-1417" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/a84a52e757bc925cb46e651011548c64?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Neil Johnson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1417">
			April 1, 2015 at 14 h 43 min</a>		</div>

		<p>My guess: the order by forces Oracle to ignore arraysize and fetch the entire set in order to sort it. Without the order by the SQL*Plus default arraysize will have an impact.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14181"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1417' onclick='return addComment.moveForm( "div-comment-1417", "1417", "respond", "609" )' aria-label='Reply to Neil to Neil Johnson'>Reply to Neil</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1418">
				<div id="div-comment-1418" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1418">
			April 1, 2015 at 15 h 41 min</a>		</div>

		<p>Hi Neil,
Arraysize is not ignored, It&#8217;s still the size of fetch. But it&#8217;s fetching from a buffer in PGA rather on shared buffers in SGA &#8211; so no additional logical reads.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14191"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1418' onclick='return addComment.moveForm( "div-comment-1418", "1418", "respond", "609" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1419">
				<div id="div-comment-1419" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/d51265811537351f8b712a4572e91930?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Jim Dickson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1419">
			April 2, 2015 at 8 h 35 min</a>		</div>

		<p>I have not worked with Oracle for a while, but this highlights a gap in my knowledge/understanding- can anyone enlighten me?
If session&#8217;s PGA is too small and data is spilled to disk (temp), then will number of [direct] IOs to/from TEMP show up in any autotrace/dbms_xplan metrics [other than sorts (disk) counter] or AWR report?
Real-Time SQL Monitoring displays both memory and temp usage, so metrics available &#8211; but not sure if measured at sqlid/session level/parallel slave level.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14201"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1419' onclick='return addComment.moveForm( "div-comment-1419", "1419", "respond", "609" )' aria-label='Reply to Jim to Jim Dickson'>Reply to Jim</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-franck-pachot bypostauthor even thread-even depth-1" id="comment-1420">
				<div id="div-comment-1420" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='http://www.dbi-services.com/Blog' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-1420">
			April 2, 2015 at 8 h 50 min</a>		</div>

		<p>Hi Jim,
Those reads will show up in session statistics as &#8216;physical reads direct temporary tablespace&#8217; which are included into &#8216;physical reads direct&#8217; which are included into &#8216;physical reads&#8217; and they will match the related writes (&#8216;physical writes direct temporary tablespace&#8217;). And you will see them as DISK_READS in V$SQL. Those are in number of blocks.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-14211"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-1420' onclick='return addComment.moveForm( "div-comment-1420", "1420", "respond", "609" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
