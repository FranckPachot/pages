This was first published on <a href=https://blog.dbi-services.com/pdb-snapshot-copy-for-continuous-integration-testing>https://blog.dbi-services.com/pdb-snapshot-copy-for-continuous-integration-testing</a> (2016-01-01)
								<h1 class="entry-title">PDB snapshot copy for continuous integration testing</h1>
		<div class="content-inner">
			
						
						
		   
			<p>How do you manage your continuous integration tests on the database? You need to restart at the same state for probably a hundred of tests. Recreating the schema and test data takes too long. Oracle is not optimized for DDL. Restoring the database takes too long. Even if you data is small, there is those SYSTEM, SYSAUX tablespaces. Flashback database can help, but it still takes time because it requires to restart the instance.
Let&#8217;s see how multitenant can help here.
<span id="more-6251"></span></p>
<h3>Flashback database</h3>
<p>The flashback database solution is a good solution, and I&#8217;ve implemented that for continuous integration tests. It seems that having thousands of incarnations is not a problem (at least for a test database) and in current versions I&#8217;ve not seen many bugs where flashback logs or archived logs remain without becoming obsolete. But there is a problem: you need to close the database, which means that you need to restart the instance to open it again. This takes time. There are a lot of processes in current versions and linux is not optimized for process creation.</p>
<h3>Alter database close</h3>
<p>But now multitenant is there. 12c Multitenant is a major change of oracle architecture. If you don&#8217;t share my opinion about it, just look at the first paragraph of Tom Kyte&#8217;s &#8216;Expert Oracle&#8217; about architecture overview: <i>An instance can mount and open at most one database in its life</i>. This statement is not true anymore with multitenant: you can re-open a closed pluggable database very quickly, without having to restart the instance.
This makes flashback database a very nice solution for our problem, as it can be done in few seconds, but for the moment, in 12.1, the problem is that you cannot flashback database at PDB level. So we need a workaround.</p>
<h3>Thin provisioning</h3>
<p>Here is the most simple workaround: once you have your reference PDB with your test data in the state you want at the beginning of each tests, you can make it read only, and then create new PDB from it for the tests. However, I don&#8217;t want to copy the SYSTEM and SYSAUX tablespaces each time, so I&#8217;ll use thin provisioning.</p>
<h3>Snapshot copy</h3>
<p>Here is the simple command to do that:
<pre>
SQL&gt; create pluggable database PDBSNAP from PDB snapshot copy file_name_convert=('/PDB/','/PDBSNAP/');
</pre>
but you need a storage that allow thin provisioning to use that or you get the following error:
<pre>
create pluggable database PDBSNAP from PDB snapshot copy file_name_convert=('/PDB/','/PDBSNAP/')
*
ERROR at line 1:
ORA-65169: error encountered while attempting to copy file
/u02/app/oracle/oradata/CDB/PDB/system01.dbf
ORA-17525: Database clone using storage snapshot not supported on file
/u02/app/oracle/oradata/CDB/PDB/system01.dbf
</pre>
The solution is:
<pre>
$ oerr ora 17525
17525, 00000, "Database clone using storage snapshot not supported on file %s"
// *Cause:  Cloning a database using storage level snapshot is not supported on the underlying storage.
// *Action: Use storage product that has snapshot based cloning support for Oracle.
</pre></p>
<h3>CLONEDB=true</h3>
<p>But you can do it also without any special storage as long as your filesystem supports sparse files. Then, the original files will not be touched and only the modified blocks will be written in the new files (it&#8217;s copy-on-write). Which means two things:</p>
<ul>
<li>that the PDB creation is very fast as there is nothing to copy</li>
<li>that once dropped, the base files are available to create a new one</li>
</ul>
<p>In order to use that, you need to set the instance parameter clonedb=true (needs restart):
<pre>
SQL&gt; alter system set clonedb=true scope=spfile;
System altered.
SQL&gt; shutdown immediate
Database closed.
Database dismounted.
SQL&gt; startup
ORACLE instance started
...
Database mounted.
Database opened.

SQL&gt; show parameter clonedb

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
clonedb                              boolean     TRUE
</pre>
and then I can thin clone my reference PDB in few seconds:
<pre>
17:16:21 SQL&gt; create pluggable database PDBSNAP from PDB snapshot copy file_name_convert=('/PDB/','/PDBSNAP/');
Pluggable database created.
17:16:31 SQL&gt;
</pre>
and if you look at the files you see that the new ones are very small:
<pre>
17:16:31 SQL&gt; host  du -ka /u02/app/oracle/oradata/CDB/PDB*/*
276488  /u02/app/oracle/oradata/CDB/PDB/system01.dbf
614412  /u02/app/oracle/oradata/CDB/PDB/sysaux01.dbf
1273612 /u02/app/oracle/oradata/CDB/PDB/example01.dbf
15368   /u02/app/oracle/oradata/CDB/PDB/SAMPLE_SCHEMA_users01.dbf
172     /u02/app/oracle/oradata/CDB/PDBSNAP/system01.dbf
16      /u02/app/oracle/oradata/CDB/PDBSNAP/sysaux01.dbf
16      /u02/app/oracle/oradata/CDB/PDBSNAP/example01.dbf
16      /u02/app/oracle/oradata/CDB/PDBSNAP/SAMPLE_SCHEMA_users01.dbf
</pre>
16k (two blocks) only are different for the application datafiles. SYSTEM had a few more change, but it&#8217;s only few blocks here.
It took 10 seconds here on 1GB datafiles and it will still take 10 seconds if you have 100GB. That makes the thin provisioning very fast.</p>
<p>Then you open it and can use it in few seconds:
<pre>
17:16:31 SQL&gt; alter pluggable database PDBSNAP open;
Pluggable database altered.

17:16:34 SQL&gt; connect hr/hr@//localhost/PDBSNAP
Connected.
</pre>
Do everything you want here and then drop it, which takes only few seconds again.
<pre>
17:16:35 SQL&gt; connect / as sysdba
Connected.
17:16:35 SQL&gt; alter pluggable database PDBSNAP close;
Pluggable database altered.
17:16:36 SQL&gt; drop pluggable database PDBSNAP including datafiles;
Pluggable database dropped.
17:16:37 SQL&gt;
</pre>
You can see that I&#8217;ve dropped it &#8216;including datafiles&#8217; and it drops only the sparse files:
<pre>
17:16:37 SQL&gt; host  du -ka /u02/app/oracle/oradata/CDB/PDB*/*
276488  /u02/app/oracle/oradata/CDB/PDB/system01.dbf
614412  /u02/app/oracle/oradata/CDB/PDB/sysaux01.dbf
1273612 /u02/app/oracle/oradata/CDB/PDB/example01.dbf
15368   /u02/app/oracle/oradata/CDB/PDB/SAMPLE_SCHEMA_users01.dbf
</pre>
The files from my reference PDB are still there, ready for another provisioning.</p>
<h3>Expensive option?</h3>
<p>CREATE PLUGGABLE DATABASE &#8230; SNAPSHOT COPY is a good alternative to flashback database here. However, keep in mind that you need to have more than one PDB in your CDB which means that you need to have multitenant option for that. You may find that expensive, but  think about what it can bring you: you can provision multiple test environments and run your test in parallel, you same lot of storage, you can provision one database for each developer without a big overhead,&#8230;</p>
<h3>Cloud</h3>
<p>The Oracle cloud service is a good solution for those environments. You probably don&#8217;t need the same number of databases for the whole application lifecycle. In the cloud you can provision those environments when a project needs it. And the cost of additional options is not very high there: the &#8216;high performance&#8217; service price is 30% higher than the &#8216;enterprise edition&#8217; one and brings nearly all options (except In-Memory and Active Data Guard). But take care: if you give that environment to your developers, they may use a lot of options that you don&#8217;t want to buy for production. Keep an eye on DBA_FEATURE_USAGE_STATISTICS.</p>
<h3>single-tenant</h3>
<p>If you don&#8217;t want to pay for the multitenant option yet you can have only one pluggable database (in addition to seed). And you can do snapshot copy from remote CDB through db link, so you keep one PDB per CDB. It seems to take a few more seconds (in &#8216;remote operation&#8217; and &#8216;external table read&#8217; to read opatch inventory from the remote database).</p>
<p>Even without multitenant option, not having to re-start the instance, and to possibility to easily use thin provisioning is a very good reason to start to look at pluggable databases.</p>
<h3>Update</h3>
<p>In a new blog post I&#8217;ve detailed another solution in single-tenant with only one instance, using dbms_dnfs.clonedb_renamefile: <a href="../pdb-snapshot-using-dbms_dnfs-clonedb_renamefile/index.html">https://blog.dbi-services.com/pdb-snapshot-using-dbms_dnfs-clonedb_renamefile/</a></p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-62520"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 4 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1 parent" id="comment-4103">
				<div id="div-comment-4103" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/c88c1b791b98d01eb9edd095c1cabe64?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Jure Bratina</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4103">
			July 27, 2016 at 13 h 18 min</a>		</div>

		<p>Hi Franck,</p>
<p>I&#8217;m aware it&#8217;s a little late to post a comment, but hopefully it might be useful to somebody.
According to the documentation <a href="http://docs.oracle.com/database/121/SQLRF/statements_6010.htm#SQLRF56536" rel="nofollow">http://docs.oracle.com/database/121/SQLRF/statements_6010.htm#SQLRF56536</a> , one of the limitations of cloning PDBs on local file systems with CLONEDB initialization parameter set to TRUE, is that &#8220;the source PDB must remain in open read-only mode as long as any clones exist&#8221;. </p>
<p>While testing on Oracle 12.1.0.2 on RedHat 6.7, filesystem ext4, it seems that this restriction is enforced only when creating a clone PDB &#8211; if the source PBD is open read-write while creating the clone, the error &#8220;ORA-65081: database or pluggable database is not open in read only mode&#8221; is returned as expected. However, opening the source PDB in read write mode after that doesn&#8217;t return any error. That is not to say that it should be used that way, only that it&#8217;s probably better to be careful not to open the source PDB in read-write mode &#8220;by mistake&#8221;. I don&#8217;t know what the consequences might be &#8211; from a short test I did, both the source PDB and the clone worked fine, there were no errors in the alert log, but I guess that&#8217;s not the way it&#8217;s meant to be used.</p>
<p>Short test case:
<pre>
SQL&gt; show parameter clonedb

NAME         TYPE        VALUE
------------ ----------- ------
clonedb      boolean     TRUE

SQL&gt; show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         2 PDB$SEED                       READ ONLY  NO
         3 PDB1                           READ ONLY  NO

SQL&gt; create pluggable database clone1 from pdb1 snapshot copy file_name_convert=('/u01/app/oracle/oradata/orcl/pdb1','/u01/app/oracle/oradata/orcl/clone1');

SQL&gt; alter pluggable database clone1 open;

SQL&gt; alter pluggable database pdb1 close;

SQL&gt; alter pluggable database pdb1 open;

SQL&gt; select con_id, name, open_mode, snapshot_parent_con_id
  2  from v$pdbs;

    CON_ID NAME       OPEN_MODE  SNAPSHOT_PARENT_CON_ID
---------- ---------- ---------- ----------------------
         2 PDB$SEED   READ ONLY                       0
         3 PDB1       READ WRITE                      0
         4 CLONE1     READ WRITE                      3
</pre>
The documentation additionally says: &#8220;When you use the SNAPSHOT COPY clause to create a clone of a source PDB, the following restrictions apply to the source PDB as long as any clones exist:
* It cannot be unplugged.
* It cannot be dropped.&#8221;</p>
<p>However:
<pre>
SQL&gt; alter pluggable database pdb1 close;

Pluggable database altered.

SQL&gt; alter pluggable database pdb1 unplug into '/tmp/testplug.xml';

Pluggable database altered.

SQL&gt; drop pluggable database pdb1 including datafiles;

Pluggable database dropped.
</pre></p>
<p>Regards,
Jure Bratina
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-41041"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4103' onclick='return addComment.moveForm( "div-comment-4103", "4103", "respond", "6251" )' aria-label='Reply to Jure to Jure Bratina'>Reply to Jure</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-4105">
				<div id="div-comment-4105" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-4105">
			July 27, 2016 at 15 h 44 min</a>		</div>

		<p>Hi Jure,
Thanks for your comment. So, from your test nothing prevents to do bad things on source, and that can lead to very nice corruptions. But I can understand that there is no check after the creation as the files may come from another database.
I&#8217;ll test it and maybe open an SR.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-41061"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-4105' onclick='return addComment.moveForm( "div-comment-4105", "4105", "respond", "6251" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-7648">
				<div id="div-comment-7648" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/8ee12fddf9c6238f7bc20596e2ee2e5b?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">John L Fak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7648">
			June 15, 2017 at 15 h 41 min</a>		</div>

		<p>Interesting.
Im assuming this can only be done locally &#8230;&#8230; meaning when people talk about a remote snapshot clone &#8230;. remote is just a secondary node on same underlying FS in order to leverage the snapshot capability.</p>
<p>Also &#8230;.. I know oracle has a pluginto OEM I think or through the independent app  to monitor subordinates of snapshot clones &#8230;&#8230;. wondering how hard to mange when you stand up many many clones &#8230;.. and then need to rebuild the master (and wipe away all the clones) after certain amount of data COW changes.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-76491"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7648' onclick='return addComment.moveForm( "div-comment-7648", "7648", "respond", "6251" )' aria-label='Reply to John to John L Fak'>Reply to John</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-7649">
				<div id="div-comment-7649" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7649">
			June 15, 2017 at 15 h 50 min</a>		</div>

		<p>Hi John,
Here when I say &#8216;remote&#8217; I mean from another CDB. Just because the whole purpose of this is for Standard Edition where you can have only one PDB in a CBD.
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-76501"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7649' onclick='return addComment.moveForm( "div-comment-7649", "7649", "respond", "6251" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
