This was first published on <a href=https://blog.dbi-services.com/postgres-vs-oracle-access-paths-0>https://blog.dbi-services.com/postgres-vs-oracle-access-paths-0</a> (2017-08-01)
								<h1 class="entry-title">Postgres vs. Oracle access paths &#8211; intro</h1>
		<div class="content-inner">
			
						
						
		   
			<p>This is the start of a series on PostgreSQL execution plans, access path, join methods, hints and execution statistics. The approach will compare Postgres and Oracle. It is not a comparison to see which one is better, but rather to see what is similar and where the approaches diverge. I have a long experience of reading Oracle execution plans and no experience at all on Postgres. This is my way to learn and share what I learn. You will probably be interested if you are in the same situation: an Oracle DBA wanting to learn about Postgres. But you may also be an experienced Postgres DBA who wants to see a different point of view from a different &#8216;culture&#8217;.
<span id="more-17594"></span>
I&#8217;ll probably use the Oracle terms more often as I&#8217;m more familiar with them: blocks for pages, optimizer for query planner, rows for tuples, tables for relations&#8230;</p>
<p>Please, don&#8217;t hesitate to comment on the blog posts or through twitter (@FranckPachot) if you find some mistakes in my Postgres interpretation. I tend to verify any assumption in the same way  I do it with Oracle: the documented behavior and the test result should match. My test should be fully reproducible (using Postgres 9.6.2 here with all defaults). But as I said above, I&#8217;ve not the same experience as I have on Oracle when interpreting execution statistics.</p>
<h3>Postgres </h3>
<p>I&#8217;m using the latest versions here. Postgres 9.6.2 (as the one I installed <a href="https://blog.dbi-services.com/postgresql-on-…-sql-developer/" target="_blank">here</a>)
I&#8217;ve installed pg_hint_plan to be able to control the execution plan with hints. This is mandatory when doing some research. In order to understand an optimizer (query planner) choice, we need to see the estimated cost for different possibilities. Most of my tests will be done with: EXPLAIN (ANALYZE,VERBOSE,COSTS,BUFFERS)
<pre>
fpa=# explain (analyze,verbose,costs,buffers) select 1;

                                     QUERY PLAN
------------------------------------------------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   Output: 1
 Planning time: 0.060 ms
 Execution time: 0.036 ms
(4 rows)
</pre>
I my go further with unix tools (like strace to see the system calls)</p>
<h3>Oracle</h3>
<p>I&#8217;m using Oracle 12.2 here and the tests are done by running the statement after setting ALTER SESSION SET STATISTICS_LEVEL=ALL and displaying the execution plan with DBMS_XPLAN:
<pre>select * from dbms_xplan.display_cursor(format=&gt;'+cost allstats last -plan_hash +projection');</pre>
Note that if you are in lower Oracle versions, you need to call dbms_xplan through the table() function:
<pre>select * from table(dbms_xplan.display_cursor(format=&gt;'+cost allstats last -plan_hash +projection'));</pre>
Example:
<pre>
SQL&gt; set arraysize 5000 linesize 150 trimspool on pagesize 1000 feedback off termout off
SQL&gt; alter session set statistics_level=all;
SQL&gt; select 1 from dual;
SQL&gt; set termout on
SQL&gt; select * from dbms_xplan.display_cursor(format=&gt;'+cost allstats last -plan_hash +projection');
PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  520mkxqpf15q8, child number 0
-------------------------------------
select 1 from dual
--------------------------------------------------------------------------------------
| Id  | Operation        | Name | Starts | E-Rows | Cost (%CPU)| A-Rows |   A-Time   |
--------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT |      |      1 |        |     2 (100)|      1 |00:00:00.01 |
|   1 |  FAST DUAL       |      |      1 |      1 |     2   (0)|      1 |00:00:00.01 |
--------------------------------------------------------------------------------------
</pre></p>
<p>I&#8217;ll probably never compare the execution time, as this depends on the system and makes no sense on artificial small examples. But I&#8217;ll try to compare all other statistics: estimated cost, the actual number of pages/blocks read, etc.</p>
<h3>Table of content</h3>
<p>Here are the links to the posts:</p>
<ol>
<li><a href="index.html" target="_blank">Postgres vs. Oracle access paths – intro</a></li>
<li><a href="../postgres-vs-oracle-access-paths-i/index.html" target="_blank">Postgres vs. Oracle access paths I – Seq Scan</a></li>
<li><a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-ii" target="_blank">Postgres vs. Oracle access paths II – Index Only Scan</a></li>
<li><a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iii" target="_blank">Postgres vs. Oracle access paths III &#8211; Partial Index</a></li>
<li><a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iv" target="_blank">Postgres vs. Oracle access paths IV – Order By and Index</a></li>
<li><a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-v" target="_blank">Postgres vs. Oracle access paths V – FIRST ROWS and MIN/MAX</a></li>
<li><a href="../postgres-vs-oracle-access-paths-vi/index.html" target="_blank">Postgres vs. Oracle access paths VI – Index Scan</a></li>
<li><a href="../postgres-vs-oracle-access-paths-vii/index.html" target="_blank">Postgres vs. Oracle access paths VII – Bitmap Index Scan</a></li>
<li><a href="../postgres-vs-oracle-access-paths-viii/index.html" target="_blank">Postgres vs. Oracle access paths VIII – Index Scan and Filter</a></li>
<li><a href="../postgres-vs-oracle-access-paths-ix/index.html" target="_blank">Postgres vs. Oracle access paths IX – Tid Scan</a></li>
<li><a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-x/" target="_blank">Postgres vs. Oracle access paths X – Update</a></li>
<li><a href="../postgres-vs-oracle-access-paths-xi/index.html" target="_blank">Postgres vs. Oracle access paths XI – Sample Scan</a></li>
</ol>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-175950"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 2 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1 parent" id="comment-8050">
				<div id="div-comment-8050" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/edf349b3b768e9552b9c865916d00691?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Anand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-8050">
			August 8, 2017 at 4 h 44 min</a>		</div>

		<p>Hyperlink for  &#8220;Postgres vs. Oracle access paths IV – Order By and Index &#8221; seems to be broken.  Shows <a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iiii" rel="nofollow">https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iiii</a> instead of <a href="https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iv" rel="nofollow">https://blog.dbi-services.com/postgres-vs-oracle-access-paths-iv</a>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-80511"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-8050' onclick='return addComment.moveForm( "div-comment-8050", "8050", "respond", "17594" )' aria-label='Reply to Anand to Anand'>Reply to Anand</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-8054">
				<div id="div-comment-8054" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-8054">
			August 8, 2017 at 8 h 13 min</a>		</div>

		<p>Thanks, fixed.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-80551"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-8054' onclick='return addComment.moveForm( "div-comment-8054", "8054", "respond", "17594" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
