This was first published on <a href=https://blog.dbi-services.com/result-cache-side-effects-on-number-of-calls>https://blog.dbi-services.com/result-cache-side-effects-on-number-of-calls</a> (2016-09-13)
								<h1 class="entry-title">Result cache side effects on number of calls</h1>
		<div class="content-inner">
			
						
						
		   
			<p>During the execution of a SQL statement, you cannot guess how many times an operation, a predicate, or a function will be executed. This depends on the execution plan, on some caching at execution, and some other execution time decisions. Here is an example where result cache may bring some overhead by calling a function multiple times.
<span id="more-10730"></span>
Here is my function:
<pre>SQL&gt; create or replace function F return number is
  2  begin
  3   dbms_lock.sleep(5);
  4   dbms_output.put_line('Hello World');
  5   return 255;
  6  end;
  7  /
Function created.</pre>
The function displays &#8216;Hello World&#8217; so that I can check how many times it is executed (I&#8217;ve set serveroutput on).</p>
<p>Obviously, on a one row table, it is called only once:
<pre>SQL&gt; select f from dual;

         F
----------
       255

Hello World</pre></p>
<h3>Query result cache miss</h3>
<p>I&#8217;ll run now the same query but with the result cache hint. The first execution will have to execute the query because the cache is empty at that point:</p>
<p><pre>SQL&gt; exec dbms_result_cache.flush;
PL/SQL procedure successfully completed.

SQL&gt; select /*+ result_cache */ f from dual;

         F
----------
       255

Hello World
Hello World</pre></p>
<p>Here is what I wanted to show: &#8216;Hello World&#8217; is displayed two times instead of one. If your function is an expensive one, then the first execution, or every cache miss, will have a performance overhead.</p>
<h3>Query result cache hit</h3>
<p>Now that the result is in the cache:</p>
<p><pre>SQL&gt; select id, type, status, name from v$result_cache_objects;

        ID TYPE       STATUS    NAME
---------- ---------- --------- ------------------------------------------------------------
        33 Dependency Published DEMO.F
        34 Result     Published select /*+ result_cache */ f from dual</pre></p>
<p>and the table has not changed (it&#8217;s DUAL here :; ) further executions do not call the function anymore, which is the expected result.</p>
<p><pre>SQL&gt; select /*+ result_cache */ f from dual ;

         F
----------
       255</pre></p>
<h3>Bug or not?</h3>
<p>Bug 21484570 has been opened for that and closed as &#8216;Not a bug&#8217;. There is no guarantee that the function is evaluated once, twice, more or never.
Ok, why not. That&#8217;s an implementation decision. Just think about it if you want to workaround an expensive function called for each row, then query result cache may not be the right solution (except if all tables are static and you always have cache hits).</p>
<p>Note that if the function is declared as deterministic, it is executed only once.</p>
<p>You can workaround the issue by using result cache at function level (in place, or in addition to query result cache if you need it).</p>
<p><pre>SQL&gt; create or replace function F return number RESULT_CACHE is
  2  begin
  3   dbms_lock.sleep(5);
  4   dbms_output.put_line('Hello World');
  5   return 255;
  6  end;
  7  /
Function created.

SQL&gt; select /*+ result_cache */ f from dual;

         F
----------
       255

Hello World

SQL&gt; select id, type, status, name from v$result_cache_objects;

        ID TYPE       STATUS    NAME
---------- ---------- --------- ------------------------------------------------------------
        64 Dependency Published DEMO.F
        66 Result     Published "DEMO"."F"::8."F"#e17d780a3c3eae3d #1
        65 Result     Published select /*+ result_cache */ f from dual</pre></p>
<p>So, not a big problem. Just something to know. And anyway, the right design is NOT to call a function for each row because it&#8217;s not scalable. Pipeline functions should be used for that.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-107310"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
