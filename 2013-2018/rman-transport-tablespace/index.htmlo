This was first published on <a href=https://blog.dbi-services.com/rman-transport-tablespace>https://blog.dbi-services.com/rman-transport-tablespace</a> (2016-12-18)
								<h1 class="entry-title">RMAN&gt; TRANSPORT TABLESPACE</h1>
		<div class="content-inner">
			
						
						
		   
			<p>In a <a href="http://blog.dbi-services.com/easy-datawarehouse-ods-load-in-enterprise-edition/" target="_blank">previous post</a> I explained how to use transportable tablespace from a standby database. Here I&#8217;m showing an alternative where you can transport from a backup instead of a standby database. RMAN can do that since 10<em>g</em>R2.
<span id="more-13746"></span>
Transportable Tablespace is a beautiful feature: the performance of physical copy and the flexibility of logical export/import. But it has one drawback: the source tablespace must be opened read only when you copy it and export the metadata. This means that you cannot use it from production, such as moving data to a datawarehouse ODS. There&#8217;s an alternative to that: restore the tablespace with TSPITR (tablespace point-in-time recovery) into a temporary instance and transport from there.
This is what is automated by RMAN with a simple command: RMAN&gt; TRANSPORT TABLESPACE.</p>
<h3>Multitenant</h3>
<p>This blog post shows how to do that when you are in 12<em>c</em> multitenant architecture. Even if 12.2 comes with online PDB clone, you may want to transport a single tablespace.</p>
<p>You cannot run TRANSPORT TABLESPACE when connected to a PDB. Let&#8217;s test it:
<pre>
RMAN&gt; connect target sys/oracle@//localhost/PDB1
connected to target database: CDB1:PDB1 (DBID=1975603085)
</pre>
Here are the datafiles:
<pre>
RMAN&gt; report schema;
using target database control file instead of recovery catalog
Report of database schema for database with db_unique_name CDB1A

List of Permanent Datafiles
===========================
File Size(MB) Tablespace           RB segs Datafile Name
---- -------- -------------------- ------- ------------------------
9    250      SYSTEM               NO      /u02/oradata/CDB1A/PDB1/system01.dbf
10   350      SYSAUX               NO      /u02/oradata/CDB1A/PDB1/sysaux01.dbf
11   520      UNDOTBS1             NO      /u02/oradata/CDB1A/PDB1/undotbs01.dbf
12   5        USERS                NO      /u02/oradata/CDB1A/PDB1/users01.dbf

List of Temporary Files
=======================
File Size(MB) Tablespace           Maxsize(MB) Tempfile Name
---- -------- -------------------- ----------- --------------------
3    20       TEMP                 32767       /u02/oradata/CDB1A/PDB1/temp01.dbf
</pre>
Let&#8217;s run the TRANSPORT TABLESPACE command:
<pre>
RMAN&gt; transport tablespace USERS auxiliary destination '/var/tmp/AUX' tablespace destination '/var/tmp/TTS';
RMAN-05026: warning: presuming following set of tablespaces applies to specified point-in-time

List of tablespaces expected to have UNDO segments
Tablespace SYSTEM
Tablespace UNDOTBS1

Creating automatic instance, with SID='jlDa'

initialization parameters used for automatic instance:
db_name=CDB1
db_unique_name=jlDa_pitr_CDB1
compatible=12.2.0
db_block_size=8192
db_files=200
diagnostic_dest=/u01/app/oracle
_system_trig_enabled=FALSE
sga_target=768M
processes=200
db_create_file_dest=/var/tmp/AUX
log_archive_dest_1='location=/var/tmp/AUX'
enable_pluggable_database=true
_clone_one_pdb_recovery=true
#No auxiliary parameter file used

starting up automatic instance CDB1

Oracle instance started

Total System Global Area     805306368 bytes

Fixed Size                     8793056 bytes
Variable Size                234882080 bytes
Database Buffers             553648128 bytes
Redo Buffers                   7983104 bytes
Automatic instance created

Removing automatic instance
shutting down automatic instance
Oracle instance shut down
Automatic instance removed
RMAN-00571: ===========================================================
RMAN-00569: =============== ERROR MESSAGE STACK FOLLOWS ===============
RMAN-00571: ===========================================================
RMAN-03002: failure of transport tablespace command at 12/17/2016 21:33:14
RMAN-07538: Pluggable Database qualifier not allowed when connected to a Pluggable Database
</pre></p>
<p>You got the idea: an auxiliary instance is automatically created but then it failed because an internal command cannot be run from a PDB.</p>
<h3>Run from CDB</h3>
<p>So let&#8217;s run it when connected to CDB$ROOT:
<pre>
echo set on

RMAN&gt; connect target sys/oracle
connected to target database: CDB1 (DBID=894360530)
</pre>
Whe can see all pluggable databases and all datafiles:
<pre>
RMAN&gt; report schema;
using target database control file instead of recovery catalog
Report of database schema for database with db_unique_name CDB1A

List of Permanent Datafiles
===========================
File Size(MB) Tablespace           RB segs Datafile Name
---- -------- -------------------- ------- ------------------------
1    800      SYSTEM               YES     /u02/oradata/CDB1A/system01.dbf
3    480      SYSAUX               NO      /u02/oradata/CDB1A/sysaux01.dbf
4    65       UNDOTBS1             YES     /u02/oradata/CDB1A/undotbs01.dbf
5    250      PDB$SEED:SYSTEM      NO      /u02/oradata/CDB1A/pdbseed/system01.dbf
6    350      PDB$SEED:SYSAUX      NO      /u02/oradata/CDB1A/pdbseed/sysaux01.dbf
7    5        USERS                NO      /u02/oradata/CDB1A/users01.dbf
8    520      PDB$SEED:UNDOTBS1    NO      /u02/oradata/CDB1A/pdbseed/undotbs01.dbf
9    250      PDB1:SYSTEM          YES     /u02/oradata/CDB1A/PDB1/system01.dbf
10   350      PDB1:SYSAUX          NO      /u02/oradata/CDB1A/PDB1/sysaux01.dbf
11   520      PDB1:UNDOTBS1        YES     /u02/oradata/CDB1A/PDB1/undotbs01.dbf
12   5        PDB1:USERS           NO      /u02/oradata/CDB1A/PDB1/users01.dbf

List of Temporary Files
=======================
File Size(MB) Tablespace           Maxsize(MB) Tempfile Name
---- -------- -------------------- ----------- --------------------
1    240      TEMP                 32767       /u02/oradata/CDB1A/temp01.dbf
2    32       PDB$SEED:TEMP        32767       /u02/oradata/CDB1A/pdbseed/temp012016-08-23_14-12-45-799-PM.dbf
3    20       PDB1:TEMP            32767       /u02/oradata/CDB1A/PDB1/temp01.dbf
</pre></p>
<p>We can run the TRANSPORT TABLESPACE command from here, naming the tablespace prefixed with the PDB name PDB1:USERS</p>
<h3>transport tablespace &#8230; auxiliary destination &#8230; tablespace destination</h3>
<p>The TRANSPORT TABLESPACE command needs a destination where to put the datafiles and dump file to transport (TABLESPACE DESTINATION) and also needs an auxiliary destination (AUXILIARY DESTINATION). It seems it is mandatory, which is different from the PDBPITR where the FRA is used by default.</p>
<p><pre>
RMAN&gt; transport tablespace PDB1:USERS auxiliary destination '/var/tmp/AUX' tablespace destination '/var/tmp/TTS';
</pre></p>
<p>And then you will see all what RMAN does for you. I&#8217;ll show most of the output.</p>
<h3>UNDO</h3>
<p>Restoring a tablespace will need to apply redo and then rollback the transactions that were opened at that PIT. This is why RMAN has to restore all tablespaces that may contain UNDO:</p>
<p><pre>RMAN-05026: warning: presuming following set of tablespaces applies to specified point-in-time

List of tablespaces expected to have UNDO segments
Tablespace SYSTEM
Tablespace PDB1:SYSTEM
Tablespace UNDOTBS1
Tablespace PDB1:UNDOTBS1
</pre></p>
<p>I suppose that when the UNDO_TABLESPACE has changed in the meantime, RMAN cannot guess which tablespace covered the transactions at the requested PIT but I seen nothing in the TRANSPORT TABLESPACE syntax to specify it. That&#8217;s probably for a future post and /or SR.</p>
<h3>Auxiliary instance</h3>
<p>So RMAN creates an auxiliary instance with some specific parameters to be sure there&#8217;s no side effect on the source database (the RMAN target one).
<pre>
Creating automatic instance, with SID='qnDA'

initialization parameters used for automatic instance:
db_name=CDB1
db_unique_name=qnDA_pitr_PDB1_CDB1
compatible=12.2.0
db_block_size=8192
db_files=200
diagnostic_dest=/u01/app/oracle
_system_trig_enabled=FALSE
sga_target=768M
processes=200
db_create_file_dest=/var/tmp/AUX
log_archive_dest_1='location=/var/tmp/AUX'
enable_pluggable_database=true
_clone_one_pdb_recovery=true
#No auxiliary parameter file used


starting up automatic instance CDB1

Oracle instance started

Total System Global Area     805306368 bytes

Fixed Size                     8793056 bytes
Variable Size                234882080 bytes
Database Buffers             553648128 bytes
Redo Buffers                   7983104 bytes
Automatic instance created
</pre></p>
<h3>Restore</h3>
<p>The goal is to transport the tablespace, so RMAN checks that they are self-contained:
<pre>
Running TRANSPORT_SET_CHECK on recovery set tablespaces
TRANSPORT_SET_CHECK completed successfully
</pre>
and starts the restore of controlfile and datafiles (the CDB SYSTEM, SYSAUX, UNDO and the PDB SYSTEM, SYSAUX, UNDO and the tablespaces to transport)
<pre>
contents of Memory Script:
{
# set requested point in time
set until  scn 1836277;
# restore the controlfile
restore clone controlfile;

# mount the controlfile
sql clone 'alter database mount clone database';

# archive current online log
sql 'alter system archive log current';
}
executing Memory Script

executing command: SET until clause

Starting restore at 17-DEC-16
allocated channel: ORA_AUX_DISK_1
channel ORA_AUX_DISK_1: SID=253 device type=DISK

channel ORA_AUX_DISK_1: starting datafile backup set restore
channel ORA_AUX_DISK_1: restoring control file
channel ORA_AUX_DISK_1: reading from backup piece /u02/fast_recovery_area/CDB1A/autobackup/2016_12_17/o1_mf_s_930864638_d5c83gxl_.bkp
channel ORA_AUX_DISK_1: piece handle=/u02/fast_recovery_area/CDB1A/autobackup/2016_12_17/o1_mf_s_930864638_d5c83gxl_.bkp tag=TAG20161217T213038
channel ORA_AUX_DISK_1: restored backup piece 1
channel ORA_AUX_DISK_1: restore complete, elapsed time: 00:00:03
output file name=/var/tmp/AUX/CDB1A/controlfile/o1_mf_d5c88zp3_.ctl
Finished restore at 17-DEC-16

sql statement: alter database mount clone database

sql statement: alter system archive log current

contents of Memory Script:
{
# set requested point in time
set until  scn 1836277;
# set destinations for recovery set and auxiliary set datafiles
set newname for clone datafile  1 to new;
set newname for clone datafile  9 to new;
set newname for clone datafile  4 to new;
set newname for clone datafile  11 to new;
set newname for clone datafile  3 to new;
set newname for clone datafile  10 to new;
set newname for clone tempfile  1 to new;
set newname for clone tempfile  3 to new;
set newname for datafile  12 to
 "/var/tmp/TTS/users01.dbf";
# switch all tempfiles
switch clone tempfile all;
# restore the tablespaces in the recovery set and the auxiliary set
restore clone datafile  1, 9, 4, 11, 3, 10, 12;

switch clone datafile all;
}
executing Memory Script

executing command: SET until clause

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

renamed tempfile 1 to /var/tmp/AUX/CDB1A/datafile/o1_mf_temp_%u_.tmp in control file
renamed tempfile 3 to /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_temp_%u_.tmp in control file

Starting restore at 17-DEC-16
using channel ORA_AUX_DISK_1

channel ORA_AUX_DISK_1: starting datafile backup set restore
channel ORA_AUX_DISK_1: specifying datafile(s) to restore from backup set
channel ORA_AUX_DISK_1: restoring datafile 00001 to /var/tmp/AUX/CDB1A/datafile/o1_mf_system_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile 00004 to /var/tmp/AUX/CDB1A/datafile/o1_mf_undotbs1_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile 00003 to /var/tmp/AUX/CDB1A/datafile/o1_mf_sysaux_%u_.dbf
channel ORA_AUX_DISK_1: reading from backup piece /u02/fast_recovery_area/CDB1A/backupset/2016_12_17/o1_mf_nnndf_TAG20161217T213044_d5c83n81_.bkp
channel ORA_AUX_DISK_1: piece handle=/u02/fast_recovery_area/CDB1A/backupset/2016_12_17/o1_mf_nnndf_TAG20161217T213044_d5c83n81_.bkp tag=TAG20161217T213044
channel ORA_AUX_DISK_1: restored backup piece 1
channel ORA_AUX_DISK_1: restore complete, elapsed time: 00:01:35
channel ORA_AUX_DISK_1: starting datafile backup set restore
channel ORA_AUX_DISK_1: specifying datafile(s) to restore from backup set
channel ORA_AUX_DISK_1: restoring datafile 00009 to /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_system_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile 00011 to /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_undotbs1_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile 00010 to /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_sysaux_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile 00012 to /var/tmp/TTS/users01.dbf
channel ORA_AUX_DISK_1: reading from backup piece /u02/fast_recovery_area/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/backupset/2016_12_17/o1_mf_nnndf_TAG20161217T213044_d5c851hh_.bkp
channel ORA_AUX_DISK_1: piece handle=/u02/fast_recovery_area/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/backupset/2016_12_17/o1_mf_nnndf_TAG20161217T213044_d5c851hh_.bkp tag=TAG20161217T213044
channel ORA_AUX_DISK_1: restored backup piece 1
channel ORA_AUX_DISK_1: restore complete, elapsed time: 00:01:25
Finished restore at 17-DEC-16

datafile 1 switched to datafile copy
input datafile copy RECID=11 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/datafile/o1_mf_system_d5c8993k_.dbf
datafile 9 switched to datafile copy
input datafile copy RECID=12 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_system_d5c8d8ow_.dbf
datafile 4 switched to datafile copy
input datafile copy RECID=13 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/datafile/o1_mf_undotbs1_d5c8998b_.dbf
datafile 11 switched to datafile copy
input datafile copy RECID=14 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_undotbs1_d5c8d8g6_.dbf
datafile 3 switched to datafile copy
input datafile copy RECID=15 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/datafile/o1_mf_sysaux_d5c8996o_.dbf
datafile 10 switched to datafile copy
input datafile copy RECID=16 STAMP=930865006 file name=/var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_sysaux_d5c8d8o7_.dbf
datafile 12 switched to datafile copy
input datafile copy RECID=17 STAMP=930865006 file name=/var/tmp/TTS/users01.dbf
</pre>
You noticed that the SYSTEM, SYSAUX, UNDO are restored in the auxiliary location but the tablespaces to transport (USERS here) goes to its destination. If you want to transport it on the same server, you can avoid any copying of it.</p>
<h3>Recover</h3>
<p>The recovery continues automatically to the PIT (which you can also specify with an UNTIL clause or restore point)</p>
<p><pre>
contents of Memory Script:
{
# set requested point in time
set until  scn 1836277;
# online the datafiles restored or switched
sql clone "alter database datafile  1 online";
sql clone 'PDB1' "alter database datafile
 9 online";
sql clone "alter database datafile  4 online";
sql clone 'PDB1' "alter database datafile
 11 online";
sql clone "alter database datafile  3 online";
sql clone 'PDB1' "alter database datafile
 10 online";
sql clone 'PDB1' "alter database datafile
 12 online";
# recover and open resetlogs
recover clone database tablespace  "PDB1":"USERS", "SYSTEM", "PDB1":"SYSTEM", "UNDOTBS1", "PDB1":"UNDOTBS1", "SYSAUX", "PDB1":"SYSAUX" delete archivelog;
alter clone database open resetlogs;
}
executing Memory Script

executing command: SET until clause

sql statement: alter database datafile  1 online

sql statement: alter database datafile  9 online

sql statement: alter database datafile  4 online

sql statement: alter database datafile  11 online

sql statement: alter database datafile  3 online

sql statement: alter database datafile  10 online

sql statement: alter database datafile  12 online

Starting recover at 17-DEC-16
using channel ORA_AUX_DISK_1

starting media recovery

archived log for thread 1 with sequence 30 is already on disk as file /u02/fast_recovery_area/CDB1A/archivelog/2016_12_17/o1_mf_1_30_d5c83ll5_.arc
archived log for thread 1 with sequence 31 is already on disk as file /u02/fast_recovery_area/CDB1A/archivelog/2016_12_17/o1_mf_1_31_d5c8783v_.arc
archived log file name=/u02/fast_recovery_area/CDB1A/archivelog/2016_12_17/o1_mf_1_30_d5c83ll5_.arc thread=1 sequence=30
archived log file name=/u02/fast_recovery_area/CDB1A/archivelog/2016_12_17/o1_mf_1_31_d5c8783v_.arc thread=1 sequence=31
media recovery complete, elapsed time: 00:00:02
Finished recover at 17-DEC-16

database opened

contents of Memory Script:
{
sql clone 'alter pluggable database  PDB1 open';
}
executing Memory Script

sql statement: alter pluggable database  PDB1 open
</pre></p>
<h3>Export TTS</h3>
<p>The restored tablespaces can be set read only, which was the goal.
<pre>
contents of Memory Script:
{
# make read only the tablespace that will be exported
sql clone 'PDB1' 'alter tablespace
 USERS read only';
# create directory for datapump export
sql clone 'PDB1' "create or replace directory
STREAMS_DIROBJ_DPDIR as ''
/var/tmp/TTS''";
}
executing Memory Script

sql statement: alter tablespace  USERS read only
</pre></p>
<p>Now the export of metadata run (equivalent to expdp transport_tablespace=Y)</p>
<p><pre>
sql statement: create or replace directory STREAMS_DIROBJ_DPDIR as ''/var/tmp/TTS''

Performing export of metadata...
   EXPDP&gt; Starting "SYS"."TSPITR_EXP_qnDA_urDb":

   EXPDP&gt; Processing object type TRANSPORTABLE_EXPORT/PLUGTS_BLK
   EXPDP&gt; Processing object type TRANSPORTABLE_EXPORT/POST_INSTANCE/PLUGTS_BLK
   EXPDP&gt; Master table "SYS"."TSPITR_EXP_qnDA_urDb" successfully loaded/unloaded
   EXPDP&gt; ******************************************************************************
   EXPDP&gt; Dump file set for SYS.TSPITR_EXP_qnDA_urDb is:
   EXPDP&gt;   /var/tmp/TTS/dmpfile.dmp
   EXPDP&gt; ******************************************************************************
   EXPDP&gt; Datafiles required for transportable tablespace USERS:
   EXPDP&gt;   /var/tmp/TTS/users01.dbf
   EXPDP&gt; Job "SYS"."TSPITR_EXP_qnDA_urDb" successfully completed at Sat Dec 17 21:41:06 2016 elapsed 0 00:00:47
Export completed

Not performing table import after point-in-time recovery
</pre>
The last message let me think that the RMAN codes shares the one that manages RECOVER TABLE.</p>
<p>Then RMAN lists the commands to run the import (also available in a generated script) and removes the auxiliary instance.</p>
<h3>Cleanup</h3>
<p>Not everything has been removed:
<pre>[oracle@VM117 blogs]$ du -ha /var/tmp/AUX
0       /var/tmp/AUX/CDB1A/controlfile
201M    /var/tmp/AUX/CDB1A/onlinelog/o1_mf_51_d5c8k0oo_.log
201M    /var/tmp/AUX/CDB1A/onlinelog/o1_mf_52_d5c8kcjp_.log
201M    /var/tmp/AUX/CDB1A/onlinelog/o1_mf_53_d5c8kskz_.log
601M    /var/tmp/AUX/CDB1A/onlinelog
0       /var/tmp/AUX/CDB1A/datafile
521M    /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile/o1_mf_undo_1_d5c8m1nx_.dbf
521M    /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9/datafile
521M    /var/tmp/AUX/CDB1A/3ABD2FF082A634B5E053754EA8C022A9
1.1G    /var/tmp/AUX/CDB1A
1.1G    /var/tmp/AUX</pre></p>
<h3>Import TTS</h3>
<p>In the destination you find the tablespace datafiles, the dump of metadata and a script that can be run to import it to the destination:</p>
<p><pre>[oracle@VM117 blogs]$ du -ha /var/tmp/TTS
5.1M    /var/tmp/TTS/users01.dbf
132K    /var/tmp/TTS/dmpfile.dmp
4.0K    /var/tmp/TTS/impscrpt.sql
5.2M    /var/tmp/TTS</pre></p>
<p>For this example, I import it on the same server, in a different pluggable database:</p>
<p><pre>
SQL&gt; connect / as sysdba
Connected.
SQL&gt; alter session set container=PDB2;
Session altered.
</pre>
and simply run the script provided:
<pre>
SQL&gt; set echo on

SQL&gt; @/var/tmp/TTS/impscrpt.sql

SQL&gt; /*
SQL&gt;    The following command may be used to import the tablespaces.
SQL&gt;    Substitute values for  and .
SQL&gt;
SQL&gt;    impdp  directory= dumpfile= 'dmpfile.dmp' transport_datafiles= /var/tmp/TTS/users01.dbf
SQL&gt; */
SQL&gt;
SQL&gt; --
SQL&gt; --
SQL&gt; --
SQL&gt; --
SQL&gt; CREATE DIRECTORY STREAMS$DIROBJ$1 AS  '/var/tmp/TTS/';
Directory created.

SQL&gt; CREATE DIRECTORY STREAMS$DIROBJ$DPDIR AS  '/var/tmp/TTS';
Directory created.

SQL&gt; /* PL/SQL Script to import the exported tablespaces */
SQL&gt; DECLARE
  2  --
  3    tbs_files        dbms_streams_tablespace_adm.file_set;
  4    cvt_files        dbms_streams_tablespace_adm.file_set;
  5
  6  --
  7    dump_file        dbms_streams_tablespace_adm.file;
  8    dp_job_name      VARCHAR2(30) := NULL;
  9
 10  --
 11    ts_names  dbms_streams_tablespace_adm.tablespace_set;
 12  BEGIN
 13  --
 14    dump_file.file_name :=  'dmpfile.dmp';
 15    dump_file.directory_object := 'STREAMS$DIROBJ$DPDIR';
 16
 17  --
 18    tbs_files( 1).file_name :=  'users01.dbf';
 19    tbs_files( 1).directory_object :=  'STREAMS$DIROBJ$1';
 20
 21  --
 22    dbms_streams_tablespace_adm.attach_tablespaces(
 23      datapump_job_name      =&gt; dp_job_name,
 24      dump_file              =&gt; dump_file,
 25      tablespace_files       =&gt; tbs_files,
 26      converted_files        =&gt; cvt_files,
 27      tablespace_names       =&gt; ts_names);
 28
 29  --
 30    IF ts_names IS NOT NULL AND ts_names.first IS NOT NULL THEN
 31      FOR i IN ts_names.first .. ts_names.last LOOP
 32        dbms_output.put_line('imported tablespace '|| ts_names(i));
 33      END LOOP;
 34    END IF;
 35  END;
 36  /
PL/SQL procedure successfully completed.

SQL&gt;
SQL&gt; --
SQL&gt; DROP DIRECTORY STREAMS$DIROBJ$1;
Directory dropped.

SQL&gt; DROP DIRECTORY STREAMS$DIROBJ$DPDIR;
Directory dropped.

SQL&gt; --------------------------------------------------------------
SQL&gt; -- End of sample PL/SQL script
SQL&gt; --------------------------------------------------------------
</pre></p>
<p>Of course, you don&#8217;t need to and you can run the import with IMPDP:</p>
<p><pre>SQL&gt; alter session set container=pdb2;
Session altered.
SQL&gt; create directory tts as '/var/tmp/TTS';
Directory created.
SQL&gt; host impdp pdbadmin/oracle@//localhost/PDB2 directory=TTS dumpfile='dmpfile.dmp' transport_datafiles=/var/tmp/TTS/users01.dbf</pre></p>
<p>You may also use convert to transport to a different endianness.</p>
<h3>Local Undo</h3>
<p>Note that if you run it on current 12.2.0.1.0 cloud first DBaaS you will get an error when RMAN opens the PDB in the auxiliary instance because there&#8217;s a bug with local undo. Here is the alert.log part:
<pre>
PDB1(3):Opening pdb with no Resource Manager plan active
PDB1(3):CREATE SMALLFILE UNDO TABLESPACE undo_1 DATAFILE SIZE 188743680 AUTOEXTEND ON NEXT 5242880 MAXSIZE 34359721984 ONLINE
PDB1(3):Force tablespace UNDO_1 to be encrypted with AES128
2016-12-17T18:05:14.759732+00:00
PDB1(3):ORA-00060: deadlock resolved; details in file /u01/app/oracle/diag/rdbms/fqkn_pitr_pdb1_cdb1/fqkn/trace/fqkn_ora_26146.trc
PDB1(3):ORA-60 signalled during: CREATE SMALLFILE UNDO TABLESPACE undo_1 DATAFILE SIZE 188743680 AUTOEXTEND ON NEXT 5242880 MAXSIZE 34359721984 ONLINE...
PDB1(3):Automatic creation of undo tablespace failed with error 604 60
ORA-604 signalled during: alter pluggable database PDB1 open...
</pre></p>
<p>I did this demo with LOCAL UNDO OFF.</p>
<h3>So what?</h3>
<p>You can use Transportable Tablespaces from a database where you cannot put the tablespace read-only. The additional cost of it is to recover it from a backup, along with SYSTEM, SYSAUX and UNDO. But it is fully automated with only one RMAN command.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-137470"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
