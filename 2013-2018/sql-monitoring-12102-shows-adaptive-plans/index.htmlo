This was first published on <a href=https://blog.dbi-services.com/sql-monitoring-12102-shows-adaptive-plans>https://blog.dbi-services.com/sql-monitoring-12102-shows-adaptive-plans</a> (2014-07-25)
								<h1 class="entry-title">SQL monitoring 12.1.0.2 shows adaptive plans</h1>
		<div class="content-inner">
			
						
						
		   
			<p>In a previous <a href="https://blog.dbi-services.com/oracle-12c-adaptive-plan-inflexion-point">post</a>, I have described Adaptive Plans. Even if I prefer to show plans with the SQL Monitor active html format, I had to stick with the dbms_xplan for that because SQL Monitoring did not show all information about adaptive plans.</p>
<p>This has been fixed in the Patchset 1 and I have run the same query to show the new feature.</p>
<p>First, an adaptive plan can be in two states: &#8216;resolving&#8217; where all alternatives are possible and &#8216;resolved&#8217; then the final plan has been choosen. It is resolved once the first execution statistics collector has made the decision about the inflection point. We can see the state in the SQL Monitor header:</p>
<p><a class="easyblog-thumb-preview" title="CaptureSqlmonAPStatus.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAPStatus.PNG" rel="lightbox[112]"><img title="CaptureSqlmonAPStatus.PNG" src="../images/easyblog_images/139/CaptureSqlmonAPStatus.PNG" alt="CaptureSqlmonAPStatus.PNG" /></a></p>
<p>Here my plan is resolved because the first execution is finished.</p>
<p>The plan with rowsource statistics show only the current plan, but the &#8216;Plan Note&#8217; shows that it is an adaptive plan:</p>
<p><a class="easyblog-thumb-preview" title="CaptureSqlmonAP.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAP.PNG" rel="lightbox[112]"><img title="CaptureSqlmonAP.PNG" src="../images/easyblog_images/139/CaptureSqlmonAP.PNG" alt="CaptureSqlmonAP.PNG" /></a></p>
<p>Now we have to go to the &#8216;Plan&#8217; tab which show the equivalent of dbms_xplan.display_cursor:</p>
<p><a class="easyblog-thumb-preview" title="CaptureSqlmonAPFull.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAPFull.PNG" rel="lightbox[112]"><img title="CaptureSqlmonAPFull.PNG" src="../images/easyblog_images/139/CaptureSqlmonAPFull.PNG" alt="CaptureSqlmonAPFull.PNG" /></a></p>
<p>Here the format is equivalent to format=&gt;&#8217;adaptive&#8217;. It&#8217;s the &#8216;Full&#8217; plan where all branches are shown but inactive part is grayed. We have here the Statistics Collector after reading DEPARTMENTS, and we have the inactive full table scan hash join of EMPLOYEES.</p>
<p>Just choose the &#8216;Final&#8217; Plan (or &#8216;Current&#8217; if it is not yet resolved) to get only the active part:</p>
<p><a class="easyblog-thumb-preview" title="CaptureSqlmonAPFinal.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAPFinal.PNG" rel="lightbox[112]"><img title="CaptureSqlmonAPFinal.PNG" src="../images/easyblog_images/139/CaptureSqlmonAPFinal.PNG" alt="CaptureSqlmonAPFinal.PNG" /></a></p>
<p>I often prefer the tabular format to the graphical one:</p>
<p><a class="easyblog-thumb-preview" title="CaptureSqlmonAPTabular.PNG" href="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAPTabular.PNG" rel="lightbox[112]"><img title="CaptureSqlmonAPTabular.PNG" src="../images/easyblog_images/139/CaptureSqlmonAPTabular.PNG" alt="CaptureSqlmonAPTabular.PNG" /></a></p>
<p>We have all information: the 7 rows from DEPARTMENTS have gone through STATISTICS COLLECTOR and NESTED LOOP with index access has been choosen. Note that it is different from the previous post where HASH JOIN with full table scan was choosen because the 7 rows were higher than the inflection point.</p>
<p>In my current example, because I have system statistics that costs full table scan higher:</p>
<p><samp>DP: Found point of inflection for NLJ vs. HJ: card = 8.35</samp></p>
<p>This is higher than ny 7 rows from DEPARTMENTS.
Here is the whole sqlmon report: <a title="title" href="http://blog.dbi-services.com/images/easyblog_images/139/sqlmon.zip" target="_self">sqlmon.zip</a> and how I got it:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">alter session set current_schema=HR;
 select /*+ monitor */ distinct DEPARTMENT_NAME from DEPARTMENTS
 join EMPLOYEES using(DEPARTMENT_ID)
 where DEPARTMENT_NAME like '%ing' and SALARY&gt;20000;
alter session set events='emx_control compress_xml=none';set pagesize 0 linesize 10000 trimspool on serveroutput off long 100000000 longc 100000000 echo off feedback off
 spool sqlmon.htm
 select dbms_sqltune.report_sql_monitor(report_level=&gt;'all',type=&gt;'html') from dual;
 spool off</pre>
<pre></pre>
<p>Note that I used the script exposed <a href="https://blog.dbi-services.com/best-practice-to-send-an-oracle-execution-plan">here</a> and I used the emx_event to get the uncompressed xml, which I got from Tyler Muth:</p>
<blockquote lang="en"><p><a href="https://twitter.com/FranckPachot">@FranckPachot</a> well, I asked <a href="https://twitter.com/DBAKevlar">@DBAKevlar</a>, she asked the developer that owns it <img src="../wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /></p>
<p>— tmuth (@tmuth) <a href="https://twitter.com/tmuth/statuses/492759150997168128">July 25, 2014</a></p></blockquote>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-1130" data-img="http://blog.dbi-services.com/images/easyblog_images/139/CaptureSqlmonAPStatus.PNG"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
