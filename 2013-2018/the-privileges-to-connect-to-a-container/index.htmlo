This was first published on <a href=https://blog.dbi-services.com/the-privileges-to-connect-to-a-container>https://blog.dbi-services.com/the-privileges-to-connect-to-a-container</a> (2016-03-16)
								<h1 class="entry-title">The privileges to connect to a container</h1>
		<div class="content-inner">
			
						
						
		   
			<p>In Multitenant, there are two ways to connect to a pluggable database. This means that if you want to prevent access to a pluggable database you need to revoke two privileges.
<span id="more-7572"></span></p>
<h3>Privilege Analysis</h3>
<p>Rather than trying with different combination of privileges there is a clever way to do it in 12c with privilege analysis (remember it&#8217;s an option).
The idea is to grant all privileges:
<pre>
SQL&gt; create user C##USER1 identified by oracle container=all;
User created.
SQL&gt; grant DBA to C##USER1 container=all;
Grant succeeded.
</pre>
and then start privilege capture to know which privileges are actually used:
<pre>
SQL&gt; exec dbms_privilege_capture.create_capture (name=&gt;'demo',type =&gt;dbms_privilege_capture.g_role,roles=&gt;role_name_list('DBA'));
PL/SQL procedure successfully completed.
SQL&gt; exec dbms_privilege_capture.enable_capture (name=&gt;'demo');
PL/SQL procedure successfully completed.
</pre>
Note that privilege capture is done per container, so I activate it also in my pluggable database:
<pre>
SQL&gt; alter session set container=PDB001;
Session altered.
SQL&gt; exec dbms_privilege_capture.create_capture (name=&gt;'demo',type =&gt;dbms_privilege_capture.g_role,roles=&gt;role_name_list('DBA'));
PL/SQL procedure successfully completed.
SQL&gt; exec dbms_privilege_capture.enable_capture (name=&gt;'demo');
PL/SQL procedure successfully completed.
</pre>
At the end of each operation, I will get the result running this from each container:
<pre>
SQL&gt; exec dbms_privilege_capture.disable_capture(name=&gt;'demo');
PL/SQL procedure successfully completed.
SQL&gt; exec dbms_privilege_capture.generate_result(name=&gt;'demo');
PL/SQL procedure successfully completed.
SQL&gt; select con_id,username,sys_priv from cdb_used_sysprivs_path;
</pre></p>
<h3>CONNECT</h3>
<p>The first way to connect to a pluggable database is to connect directly to its service:
<pre>
SQL&gt; connect C##USER1@//localhost/PDB001.pachot.oraclecloud.internal
Connected.
</pre>
And, as you expected, the privilege used is the CREATE SESSION in the pluggable database (PDB001 is CON_ID=4) and no privilege at all is needed in CDB$ROOT:
<pre>
    CON_ID USERNAME   SYS_PRIV
---------- ---------- ----------------------------------------
         4 C##USER1   CREATE SESSION
</pre></p>
<h3>SET CONTAINER</h3>
<p>The second way available to common users only is to connect to CDB$ROOT and then switch to the pluggable database container:
<pre>
SQL&gt; connect C##USER1
Connected.
SQL&gt; alter session set container=PDB001;
Session altered.
</pre>
Of course, we see the CREATE SESSION when connecting to the CDB$ROOT&gt;
<pre>
    CON_ID USERNAME   SYS_PRIV
---------- ---------- ----------------------------------------
         1 C##USER1   CREATE SESSION
</pre>
and here is the SET CONTAINER privilege which is used on the pluggable database only.
<pre>
    CON_ID USERNAME   SYS_PRIV
---------- ---------- ----------------------------------------
         4 C##USER1   SET CONTAINER
</pre></p>
<h3>Conclusion</h3>
<p>If you want to prevent access to a pluggable database from a common user, you need to revoke both SET CONTAINER and CREATE SESSION in that container. Same idea if you want to set some session environment through logon trigger, you may also do it in an AFTER SET CONTAINER trigger.
Now, do you think that revoking system privileges is sufficient to prevent C##USER1 from seeing PDB001 data? You should remember that there is another way to see what happens in another container, through the V$ or CDB_ views. Not all data, but lot of information are exposed. The ALTER USER &#8230; SET CONTAINER_DATA is there to control that. But that&#8217;s for a future post.
Remember that a common user can be very powerful in a public or private cloud. You can control what he has access to, but then think of all ways of access.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-75730"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
