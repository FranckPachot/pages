This was first published on <a href=https://blog.dbi-services.com/the-taboo-of-underscore-parameters>https://blog.dbi-services.com/the-taboo-of-underscore-parameters</a> (2016-02-21)
								<h1 class="entry-title">The taboo of &#8216;underscore parameters&#8217;</h1>
		<div class="content-inner">
			
						
						
		   
			<p>Oracle provides lots or parameters that can control the behavior of the software. The default values are probably the best ones most of the time. Hundreds of parameters are documented and we can set them to customize the Oracle software for our context because default values can&#8217;t fit all different database sizes, usage, workload, infrastructure, etc. And in addition to them there are those &#8216;underscore parameters&#8217; or &#8216;hidden parameters&#8217; or &#8216;undocumented parameters&#8217;. You should not set them without validation from Oracle Support.
However, several software vendors recommend some underscore parameter settings. Not only ISVs but software provided by Oracle do the same. And Oracle appliances (ODA, Exadata) also set a bunch of underscore parameters. Some people think that it&#8217;s bad, and I&#8217;ll explain here why I think it is not.
<span id="more-7161"></span></p>
<h3>underscore parameters</h3>
<p>How many parameters can I set in 12.1.0.2 ?
<pre>
SQL&gt; select count(*) from v$parameter;
  COUNT(*)
----------
       381
</pre>
381 ones. Let&#8217;s look at the query that is behind the V$PARAMETER view:
<pre>
SQL&gt; variable c clob
SQL&gt; exec dbms_utility.expand_sql_text(input_sql_text=&gt;'select count(*) from v$parameter',output_sql_text=&gt;:c);
PL/SQL procedure successfully completed.
SQL&gt; print
C
--------------------------------------------------------------------------------
SELECT COUNT(*) "COUNT(*)" FROM  (SELECT "A2"."CON_ID" "CON_ID" FROM  (SELECT "A
4"."INST_ID" "INST_ID","A4"."CON_ID" "CON_ID" FROM SYS."X$KSPPI" "A4",SYS."X$KSP
PCV" "A3" WHERE "A4"."INDX"="A3"."INDX" AND BITAND("A4"."KSPPIFLG",268435456)=0
AND TRANSLATE("A4"."KSPPINM",'_','#') NOT LIKE '##%' AND (TRANSLATE("A4"."KSPPIN
M",'_','#') NOT LIKE '#%' OR "A3"."KSPPSTDF"='FALSE' OR BITAND("A3"."KSPPSTVF",5
)&gt;0)) "A2" WHERE "A2"."INST_ID"=USERENV('INSTANCE')) "A1"
</pre>
There is a where clause here about the name of the parameter (KSPPINM) which is:
<pre>
TRANSLATE("A4"."KSPPINM",'_','#') NOT LIKE '#%'
</pre>
it means that the name do not start with an underscore. It&#8217;s replaced by &#8216;#&#8217; for the &#8216;like&#8217; command because &#8216;_&#8217; is a jocker and probably the &#8216;escape&#8217; option of the &#8216;like&#8217; clause were not available when the view was defined.
So this is what returns 381 parameters:
<pre>
SQL&gt; SELECT COUNT(*) "COUNT(*)" FROM  (SELECT "A2"."CON_ID" "CON_ID" FROM  (SELECT "A4"."INST_ID" "INST_ID","A4"."CON_ID" "CON_ID" FROM SYS."X$KSPPI" "A4",SYS."X$KSPPCV" "A3" WHERE "A4"."INDX"="A3"."INDX" AND BITAND("A4"."KSPPIFLG",268435456)=0 AND TRANSLATE("A4"."KSPPINM",'_','#') NOT LIKE '##%' AND (TRANSLATE("A4"."KSPPINM",'_','#') NOT LIKE '#%' OR "A3"."KSPPSTDF"='FALSE' OR BITAND("A3"."KSPPSTVF",5)&gt;0)) "A2" WHERE "A2"."INST_ID"=USERENV('INSTANCE')) "A1"
  2  /
  COUNT(*)
----------
       381
</pre>
what if I allow the ones starting by underscore?
<pre>
SQL&gt; c/NOT LIKE '#%'/LIKE '#%'
  1* SELECT COUNT(*) "COUNT(*)" FROM  (SELECT "A2"."CON_ID" "CON_ID" FROM  (SELECT "A4"."INST_ID" "INST_ID","A4"."CON_ID" "CON_ID" FROM SYS."X$KSPPI" "A4",SYS."X$KSPPCV" "A3" WHERE "A4"."INDX"="A3"."INDX" AND BITAND("A4"."KSPPIFLG",268435456)=0 AND TRANSLATE("A4"."KSPPINM",'_','#') NOT LIKE '##%' AND (TRANSLATE("A4"."KSPPINM",'_','#') LIKE '#%' OR "A3"."KSPPSTDF"='FALSE' OR BITAND("A3"."KSPPSTVF",5)&gt;0)) "A2" WHERE "A2"."INST_ID"=USERENV('INSTANCE')) "A1"
SQL&gt; /
  COUNT(*)
----------
      3604
</pre>
&#8230; a lot more.</p>
<p>They are called &#8216;underscore parameters because they start with an underscore.
From there, there is nothing bad with them. Just a naming convention defined by Oracle. And because of that when you set it you have to enclose it in double quotes, as with any identifier that do not start with alphabetic character. No taboo there.</p>
<h3>hidden parameters</h3>
<p>The name &#8216;hidden parameter&#8217; comes from the fact that those underscore parameter are not displayed by V$PARAMETER. But that&#8217;s not totally true:
<pre>
SQL&gt; show parameter histograms
</pre>
I&#8217;ve no parameter in V$PARAMETER with &#8216;histograms&#8217; in their names.
But I can set it:
<pre>
SQL&gt; alter session set "_optimizer_use_histograms"=false;
Session altered.
</pre>
and then it is displayed:
<pre>
SQL&gt; show parameter histograms

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
_optimizer_use_histograms            boolean     FALSE
</pre>
The V$PARAMETER view is defined to hide them only when they are not set. If its not the case, it&#8217;s a bug (3327961)</p>
<p>So if you think that those parameters are bad and forbidden because they are not displayed, then just set them and then they are allowed <img src="../wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" />
I&#8217;m just joking here. My goal is to show that the choice to display them or not is not a reason to make them taboo.</p>
<h3>undocumented</h3>
<p>Here is the point. They are not found in the documentation. The OracleÂ® Database Reference book describe 291 parameters in the &#8216;Initialization Parameter Descriptions&#8217; and none of them start with an underscore. Note that 291 is far from 381 which means that some parameters not starting with an underscore and not hidden from V$PARAMETER and still undocumented parameters.</p>
<p>But look at My Oracle Support notes. They are official documentation, isn&#8217;t it? And lot of those underscore parameters are documented there: what they do, in which context they can be set, etc. </p>
<p>What I want to say here is that &#8216;undocumented&#8217; means that, at release time, Oracle decided not to put them into the documentation because they though we should not need to set them. But then, real life starts. We upgrade databases that are from very different environments. We encounter issues that nobody thought about. We encounter bugs. We upgrade application that are bad from the get-go (not using bind variables, parsing as much as executing, defined tables with thousand of columns, etc.) and new features may not be suited for those bad applications. We apply patches, PSUs&#8230; Things change and what was decided at release time about documentation may be different one year later.</p>
<p>This is where undocumented parameters become documented. They keep their name (starting with underscore) but are now totally legal for some specific situation. There is no taboo with that. One way to stabilize a new release is to apply the latest PSUs. Another way is to disable the few features that happen to cause an issue in your environment. And when you upgrade to a new release or new patchset, then check them as you probably don&#8217;t need them anymore.</p>
<h3>documented parameters that set undocumented ones</h3>
<p>12c came with lot of new adaptive features in the CBO, and some of them has brought parsing issues (SPD and ADS to name them by their acronyms). A good OLTP application should not spend its time to parse statements, which means no consequence with that. But if you have a bad application that is already parsing a lot, you may encounter issues. Then, what do you prefer?
One possibility is to set optimizer_features_enable=11.2.0.4 so that you disable most of the 12c CBO new features. And you are happy with it because it&#8217;s not hidden, not underscore and not undocumented. However, if you look at what it does behind, you will see that it sets nearly 30 underscore parameters. One of them is setting &#8220;_optimizer_dsdir_usage_control&#8221;=0 and maybe this is the only one that you need.
So in that case, do you prefer to look good and disable all new features? Which means that you disable adaptive plans for example, which is a very nice feature that stabilize your response time.
Or do you accept to set an underscore parameter and then address exactly the problem and only the problem?</p>
<p>I choose the second one. No problem to set a few parameters, whether they start with underscore or not, as long as:</p>
<ul>
<li>They address an issue you encounted. Check with support about that.</li>
<li>You document them. the ALTER SYSTEM SET has a COMMENT clause that you can use to describe the reason, the SR, etc</li>
<li>You review them before each upgrade. Do you need them anymore?</li>
<li>You plan long term solution if the setting is just a workaround for a bad application design</li>
</ul>
<p><strong>Disclaimer: This is not an encouragement to set a lot of parameters! Default values are good for most of of them. But this advise, in my opinion, is totally independent of the fact they are underscore or not. For both hidden or not, you probably need only a few of them.
</strong></p>
<h3>conclusion</h3>
<p>Staying in old versions is not a way to achieve stability.
If you want a stable database, you should:</p>
<ol>
<li>Apply PSUs, patch bundles, and upgrade to latest patchset. Because, believe it or not, new releases tend to fix more bugs than bringing new ones.</li>
<li>Test the upgraded database, and fix the few issues that you may encounter: parameters (hidden or not), fix_control, patches,&#8230;</li>
</ol>
<h3>One additional note</h3>
<p>I said that &#8216;documentation&#8217; should not be only the one from the Oracle books, but also MOS notes, because the problems and solutions evolves with time. There is also an excellent source of information about bugs encountered at Oracle customers, reasons, workarounds and fixes. And it&#8217;s free: Mike Dietrich blog: <a href="https://blogs.oracle.com/UPGRADE" target="_blank">https://blogs.oracle.com/UPGRADE</a></p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-71620"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">

	<h3 id="comments"> 6 Comments</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ul class="comment-list ">
				<li class="comment even thread-even depth-1" id="comment-2879">
				<div id="div-comment-2879" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/ba77413ffe0bb48d9da467d649464a6c?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Thomas Teske</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2879">
			February 23, 2016 at 16 h 17 min</a>		</div>

		<p>Thanks for making a clear statement on parameters. Yes it is true: there are many parameters.
Setting hidden or underscore parameters to values and consider a problem being solved once and forever is practised in many systems. My recommendation: whenever a major change (platform, application, Oracle release) is done &#8211; rethink the need using the additional parameters. Probe the experiences made with in depth tests.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-28801"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2879' onclick='return addComment.moveForm( "div-comment-2879", "2879", "respond", "7161" )' aria-label='Reply to Thomas to Thomas Teske'>Reply to Thomas</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2881">
				<div id="div-comment-2881" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/a2a19e1fb1fdd173d1a39b0e73390c09?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Foued</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2881">
			February 23, 2016 at 19 h 46 min</a>		</div>

		<p>Thanks Franck for those insights, much appreciated the post.
Foued
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-28821"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2881' onclick='return addComment.moveForm( "div-comment-2881", "2881", "respond", "7161" )' aria-label='Reply to Foued to Foued'>Reply to Foued</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-2928">
				<div id="div-comment-2928" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/f72c41a3ff54423293bdb68ae747aa44?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">Kais</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-2928">
			March 2, 2016 at 0 h 02 min</a>		</div>

		<p>Hi Franck ,
Thank you for sharing !
Just a question SEC_CASE_SENSITIVE_LOGON parameter is deprecated and unsupported in 12c&#8230;what does it mean exactly ?
It is setted at FALSE  in my 12c database &#8230;is it still supported ?
Cheers.
Kais
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-29291"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-2928' onclick='return addComment.moveForm( "div-comment-2928", "2928", "respond", "7161" )' aria-label='Reply to Kais to Kais'>Reply to Kais</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-7223">
				<div id="div-comment-7223" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7223">
			March 29, 2017 at 8 h 19 min</a>		</div>

		<p>Hi Kais, sorry I see that I forgot to reply here. The parameter is deprecated, because case insensitive passwords are considered weak. But where did you see it is unsupported?
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-72241"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7223' onclick='return addComment.moveForm( "div-comment-7223", "7223", "respond", "7161" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-7218">
				<div id="div-comment-7218" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/3afcddf3d783b08e264fad38104e0167?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn">jorge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7218">
			March 29, 2017 at 1 h 06 min</a>		</div>

		<p>Well,  there are over 3K undocumented parameters.</p>
<p>If you set the wrong one and is not in the supported documentation list, you can get in trouble, specially if you have a massive corruption in your production system.</p>
<p>My previous boss set one (with Oracle support! )  but forgot to tell us when he left, two months down the line and we had a massive corruption in our scanning system&#8230; not fun for it had corrupted all backups.  The extraction of data was quite something. </p>
<p>oh he had left a few weeks earlier. </p>
<p>Play at home !
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-72191"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7218' onclick='return addComment.moveForm( "div-comment-7218", "7218", "respond", "7161" )' aria-label='Reply to jorge to jorge'>Reply to jorge</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-franck-pachot bypostauthor odd alt depth-2" id="comment-7222">
				<div id="div-comment-7222" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/avatar/9c04a89267afa42e63eeb3d620f4b873?s=60&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />			<cite class="fn"><a href='https://www.linkedin.com/in/franckpachot' rel='external nofollow' class='url'>Franck Pachot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="index.html#comment-7222">
			March 29, 2017 at 8 h 16 min</a>		</div>

		<p>Hi Jorge,
Thanks for your feedback. Yes some settings can have huge bad consequences. I was writing that with the idea of disabling features when they have issues, temporarily, until issue is fixed. There are parameters that can be set to allow corruption, to be used only when there is no way to open the database safely. Then the first thing to do is export your data to put them in a new, clean, database. By curiosity, can you mention the parameter (or send it to me franck.pachot[at]dbi-services.com if you don&#8217;t want to mention it publicly)?
Regards,
Franck.
<table class="rw-rating-table rw-ltr rw-left rw-no-labels">
<tr>
<td><nobr>&nbsp;</nobr></td>
<td>
<div class="rw-left">
<div class="rw-ui-container rw-class-comment rw-urid-72231"></div>
</div>
</td>
</tr>
</table>

		<div class="reply"><a class='comment-reply-link' href='index.html#comment-7222' onclick='return addComment.moveForm( "div-comment-7222", "7222", "respond", "7161" )' aria-label='Reply to Franck to Franck Pachot'>Reply to Franck</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	</ul>

 

								<div id="respond" class="comment-respond">
