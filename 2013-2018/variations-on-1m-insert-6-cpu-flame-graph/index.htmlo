This was first published on <a href=https://blog.dbi-services.com/variations-on-1m-insert-6-cpu-flame-graph>https://blog.dbi-services.com/variations-on-1m-insert-6-cpu-flame-graph</a> (2015-05-18)
								<h1 class="entry-title">Variations on 1M insert (6): CPU Flame Graph</h1>
		<div class="content-inner">
			
						
						
		   
			<p>If you followed the 1M rows insert variations, you have seen how something simple brought me into an investigation with the latest tools available to see where the time is spent. When the time is CPU time, there is no wait event to get the detail of DB Time. I&#8217;ve used perf events in the <a href="http://blog.dbi-services.com/variations-on-1m-rows-insert-1-bulk-insert-2/">previous post</a> and I&#8217;ll now visualize them with <a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html">CPU Flame Graph</a>. My goal is to understand why my test cases is 2x longer in 11.2.0.4 vs 11.2.0.3</p>
<p>The idea to use Flame Graphs come from Luca Canali:</p>
<div class="Tweet-header u-cf">
<blockquote>
<div class="Tweet-author u-textTruncate h-card p-author"><a class="Tweet-authorLink Identity u-linkBlend" href="https://twitter.com/LucaCanaliDB"><span class="Tweet-authorAvatar Identity-avatar"><img class="Avatar u-photo alignleft" src="https://pbs.twimg.com/profile_images/378800000811081324/ec2cc398422e4aa1338b048d6f03f28a_normal.jpeg" alt="" /></span><span class="Tweet-authorName Identity-name p-name customisable-highlight">Luca Canali</span> <span class="Tweet-authorScreenName Identity-screenName p-nickname">@LucaCanaliDB</span></a></div>
<div class="Tweet-author u-textTruncate h-card p-author"></div>
</blockquote>
</div>
<div class="Tweet-body e-entry-content">
<blockquote>
<p class="Tweet-text e-entry-title" dir="ltr" lang="en">.<a class="PrettyLink profile customisable h-card" href="https://twitter.com/FranckPachot"><span class="PrettyLink-prefix">@</span><span class="PrettyLink-value">FranckPachot</span></a> Franck, have you considered stack profiling and flame graphs? <a class="PrettyLink hashtag customisable" href="https://twitter.com/hashtag/my2cents?src=hash" rel="tag"><span class="PrettyLink-prefix">#</span><span class="PrettyLink-value">my2cents</span></a> /CC <a class="PrettyLink profile customisable h-card" href="https://twitter.com/fritshoogland"><span class="PrettyLink-prefix">@</span><span class="PrettyLink-value">fritshoogland</span></a> <a class="PrettyLink profile customisable h-card" href="https://twitter.com/OracleSK"><span class="PrettyLink-prefix">@</span><span class="PrettyLink-value">OracleSK</span></a> <a class="PrettyLink profile customisable h-card" href="https://twitter.com/martinberx"><span class="PrettyLink-prefix">@</span><span class="PrettyLink-value">martinberx</span></a></p>
<div class="Tweet-metadata dateline">2:12 PM &#8211; 12 May 2015</div>
</blockquote>
</div>
<div></div>
<p>And you can read about Flame Graphs for Oracle on his <a href="http://externaltable.blogspot.ch/2014/05/flame-graphs-for-oracle.html">blog</a>. That was the occasion for me to test that before attending to <a href="http://www.soug.ch/fr/evenements/sig-150521-agenda.html">his presentation</a> at SOUG next week.</p>
<h3>perf events and flame graphs</h3>
<p>I&#8217;ve run my testcase in 11.2.0.3 and 11.2.0.4 and gathered perf events with:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; select spid from v$process 
where addr=(select paddr from v$session where sid=sys_context('userenv','sid'));

SPID
------------------------
44658
</pre>
<p>to get the process id and:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">perf record -e cpu-cycles -o /tmp/perf.out -g -c 1 -p 44658
</pre>
<p>to capture samples. I&#8217;ve stopped it after 3 seconds because the high frequency sampling generates large files.</p>
<p>Then I generate flame graphs:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">perf script -i /tmp/perf.out | ./FlameGraph-master/stackcollapse-perf.pl &gt; /tmp/perf.folded ; ./FlameGraph-master/flamegraph.pl /tmp/perf.folded &gt; /tmp/perf.folded.svg
</pre>
<h3>1M rows insert test case in 11.2.0.4</h3>
<p>Here is the graph zoomed from opiexe to kdiins0:</p>
<p><a class="easyblog-thumb-preview" title="Capture1-perf-testcase-o11204.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture1-perf-testcase-o11204.JPG" rel="lightbox[2084]"><img title="b2ap3_thumbnail_Capture1-perf-testcase-o11204.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture1-perf-testcase-o11204.JPG" alt="b2ap3_thumbnail_Capture1-perf-testcase-o11204.JPG" /></a></p>
<p>I don&#8217;t know all the Oracle function names, but I see two call stack with high number of samples. One is related with inserts, index maintenance, etc.</p>
<p>But one is not and here is the call stack:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">rpiswu2 psdextp pefccal pefcal pevm_FCAL pfrinstr_FCAL pfrrun_no_tool</pre>
<h3>1M rows insert test case in 11.2.0.3</h3>
<p>Here is the same but executed on 11.2.0.3</p>
<p><a class="easyblog-thumb-preview" title="Capture2-perf-testcase-o11203.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture2-perf-testcase-o11203.JPG" rel="lightbox[2084]"><img title="b2ap3_thumbnail_Capture2-perf-testcase-o11203.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture2-perf-testcase-o11203.JPG" alt="b2ap3_thumbnail_Capture2-perf-testcase-o11203.JPG" /></a></p>
<p>The call stack with &#8216;rpiswu2 psdextp pefccal pefcal pevm_FCAL pfrinstr_FCAL pfrrun_no_tool&#8217; is not there. I don&#8217;t know what are doing those functions but it seems that they are responsible for the additional CPU consumption.</p>
<h3>dbms_random</h3>
<p>I&#8217;m using dbms_random to generate data in my test case. I usually avoid guesses and prefer to go to the root cause only from evidences. But here I don&#8217;t know what is behind those functions and my test case is basically doing two things: generate records with random values and insert them into the table. As my CPU utilization seems to be not related to inserts, maybe it&#8217;s about the record generation. The idea came first from Sayan Malakshinov on twitter</p>
<p>&nbsp;</p>
<div>
<div>
<blockquote>
<div><a href="https://twitter.com/FranckPachot"><img class=" alignleft" src="https://pbs.twimg.com/profile_images/419530926779936769/N8gP0VrX_normal.jpeg" alt="" /><span>Franck Pachot</span> <span>@FranckPachot</span></a></div>
</blockquote>
</div>
<blockquote>
<div></div>
<div>
<p dir="ltr" lang="en">The testcase I&#8217;ve done in <a title="http://www.dbi-services.com/index.php/blog/entry/insert1m-bulk" href="http://t.co/D2RsgYzK6r" target="_blank" rel="nofollow">http://www.dbi-services.com/index.php/blog/entry/insert1m-bulk …</a> (the bulk one) needs 2x more CPU in &gt;=11.2.0.4 than 11.2.0.2 <img src="../wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /> <a href="http://t.co/EeHJLja4Bh">pic.twitter.com/EeHJLja4Bh</a></p>
</div>
</blockquote>
</div>
<div>
<blockquote>
<div>
<div></div>
<div><a href="https://twitter.com/xtner"><img class=" alignleft" src="https://pbs.twimg.com/profile_images/459446689938423808/treQHHJW_normal.jpeg" alt="" /><span>Sayan Malakshinov</span> <span>@xtner</span></a></div>
<div></div>
</div>
<div>
<p dir="ltr" lang="en"><a href="https://twitter.com/FranckPachot">@FranckPachot</a> Have you checked how much cpu consumed dbms_random.value? It&#8217;s quite heavyweight function</p>
</div>
</blockquote>
<div>
<blockquote>
<div>8:38 AM &#8211; 12 May 2015</div>
</blockquote>
</div>
</div>
<p>and his question reminded me something. Nicolas Jardot presented &#8216;Solving customer issues with the 12c Optimizer&#8217; at several events and one of his <a href="http://www.dbi-services.com/index.php/blog/entry/oracle-open-world-2013-solving-customer-issues-iii-histogram-on-varchar2-column">demo </a>compared a testcase between 11g and 12c. The time to generate the testcase was very large in 12c and we already suspected dbms_random. So it&#8217;s time to investigate that now. Let&#8217;s run the following on both versions:</p>
<pre class="brush: sql; gutter: true; first-line: 1">SQL&gt; declare
   n number;
  begin
   for i in 1..1e8
   loop
    n:=dbms_random.value(0,10000);
   end loop;
  end;
 /

PL/SQL procedure successfully completed.

Elapsed: 00:01:15.88

</pre>
<p>But when I run it in 11.2.0.4 the time is 4x higher:</p>
<pre class="brush: sql; gutter: true; first-line: 1">PL/SQL procedure successfully completed.

Elapsed: 00:05:31.92
</pre>
<h3>dbms_random loop in 11.2.0.3</h3>
<p>Here is the CPU Flame Graph during the fast execution of the dbms_random loop:</p>
<p><a class="easyblog-thumb-preview" title="Capture3-perf-random-o11203.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture3-perf-random-o11203.JPG" rel="lightbox[2084]"><img title="b2ap3_thumbnail_Capture3-perf-random-o11203.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture3-perf-random-o11203.JPG" alt="b2ap3_thumbnail_Capture3-perf-random-o11203.JPG" /></a></p>
<p>Many functions above pfrrun_no_tool. None with higher samples than others.</p>
<h3>dbms_random loop in 11.2.0.4</h3>
<p>Here is the CPU Flame Graph during the longer execution:</p>
<p><a class="easyblog-thumb-preview" title="Capture4-perf-random-o11204.JPG" href="http://blog.dbi-services.com/images/easyblog_images/139/Capture4-perf-random-o11204.JPG" rel="lightbox[2084]"><img title="b2ap3_thumbnail_Capture4-perf-random-o11204.JPG" src="../images/easyblog_images/139/b2ap3_thumbnail_Capture4-perf-random-o11204.JPG" alt="b2ap3_thumbnail_Capture4-perf-random-o11204.JPG" /></a></p>
<p>Most of the time is spent in that &#8216;FCAL&#8217; callstack.</p>
<h3>&#8216;diff&#8217; is also a nice tool&#8230;</h3>
<p>If I had this issue in production, then I would open an SR for a bug. I&#8217;ve enough information to give and only Oracle support can go further to see what&#8217;s behind those functions. But I&#8217;m in a lab and I can go further.</p>
<p>Where is the DBMS_RANDOM defined? Let&#8217;s look for it in ORACLE_HOME/rdbms/admin:</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">$ grep -i "package.*dbms_random" $ORACLE_HOME/rdbms/admin/*
/home/oracle/app/oracle/product/11204/rdbms/admin/dbmsrand.sql:CREATE OR REPLACE PACKAGE dbms_random AUTHID DEFINER AS
/home/oracle/app/oracle/product/11204/rdbms/admin/dbmsrand.sql:CREATE OR REPLACE PACKAGE BODY dbms_random AS
</pre>
<p>So, what is the difference between the 11.2.0.3 and 11.2.0.4 ?</p>
<pre class="brush: actionscript3; gutter: true; first-line: 1">$ diff /home/oracle/app/oracle/product/1120?/rdbms/admin/dbmsrand.sql
2c2
---
&gt; Rem $Header: rdbms/admin/dbmsrand.sql /st_rdbms_11.2.0/1 2013/03/11 01:24:43 yujwang Exp $
6,7c6,7
---
&gt; Rem Copyright (c) 1997, 2013, Oracle and/or its affiliates.
&gt; Rem All rights reserved.
16a17
&gt; Rem    yberezin    02/26/13 - record and replay random number - bug 12676338
102a104,111
&gt;     -- external C function to record random value
&gt;     PROCEDURE record_random_number(val IN NUMBER);
&gt;     PRAGMA restrict_references (record_random_number, WNDS);
&gt;
&gt;     -- external C function to replay random value
&gt;     FUNCTION replay_random_number RETURN NUMBER;
&gt;     PRAGMA restrict_references (replay_random_number, WNDS);
&gt;
185c194,212
</pre>
<p>Interesting. There is a new function that is called when generating random numbers, probably to get the same numbers when we replay a RAT workload. This is just a guess, and let&#8217;s continue guessing. I&#8217;m in a lab I can do what I want. I&#8217;m in 11.2.0.4 where by loop takes 5 minutes. I&#8217;ll replace the dbms_random with the 11.2.0.3 ones:</p>
<pre class="brush: sql; gutter: true; first-line: 1">sqlplus / as sysdba @ /home/oracle/app/oracle/product/11203/rdbms/admin/dbmsrand.sql

SQL*Plus: Release 11.2.0.4.0 Production on Sun May 17 21:53:50 2015

Copyright (c) 1982, 2013, Oracle.  All rights reserved.

Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

Package created.

Package body created.

Synonym created.

Grant succeeded.
</pre>
<p>I&#8217;m lucky, the old version of the package compiles in my version. Then I run my loop:</p>
<pre class="brush: sql; gutter: true; first-line: 1">PL/SQL procedure successfully completed.

Elapsed: 00:01:10.14

</pre>
<p>Yes, that&#8217;s it. I get the same elapsed time as in 11.2.0.3 just by using the dbms_random from 11.2.0.3</p>
<p>And when I run the testcase from the initial issue &#8211; the bulk insert from random values that is 2x faster in versions before 11.2.0.4 or 12c &#8211; I have now reduced the time by 2 when using the dbms_random from those previous versions.</p>
<h3>Conclusion</h3>
<p>I&#8217;ve exposed here a methodology that is not exactly what I do usually on a performance issue. I did that because I wanted to learn about those tools (perf events, Flame Graph) I was not yet familiar with. And I also used the old method of eliminating the possible causes one by one: test on same machine, with only the version of Oracle changing, test each part of the code independantly to see where the performance is different, etc.</p>
<p>The final message is: don&#8217;t give up. When there is something unexplained, use all relevant tools to measure, use the knowledge you got from your experience. It takes only time, but everything can be explained. And don&#8217;t rely only on yourself. There is a very smart community of Oracle fans that can help: blogs, forums, twitter, etc. Here my friends from twitter were a great help, both for ideas (tests, tools, knowledge, ideas) and motivation to continue to investigate.</p>
<table class="rw-rating-table rw-ltr rw-left rw-no-labels"><tr><td><nobr>&nbsp;</nobr></td><td><div class="rw-left"><div class="rw-ui-container rw-class-blog-post rw-urid-20850" data-img="https://pbs.twimg.com/profile_images/378800000811081324/ec2cc398422e4aa1338b048d6f03f28a_normal.jpeg"></div></div></td></tr></table>							
		</div><!--/content-inner-->
<div class="comment-wrap ">


			<!-- If comments are open, but there are no comments. -->

	 

								<div id="respond" class="comment-respond">
